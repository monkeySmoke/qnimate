{"version":3,"sources":["webpack:///qnimate.min.js","webpack:///webpack/bootstrap 759903bde0a0e62891a7","webpack:///./src/qnimate.js","webpack:///./~/d3/build/d3.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","_d","d3","Qnimate","_ref","width","height","vertices","this","domId","vertexNum","_init","value","isRunning","_tick","_this","FPS","interval","then","Date","now","renderCount","voronoi","range","map","randomUniform","symbols","Math","random","svg","select","append","attr","graph","_this2","window","requestAnimationFrame","delta","_render","setTimeout","d","dx","dy","lab","_this3","paths","selectAll","data","triangles","nodes","enter","_color","polygonCentroid","polygonHull","join","_nextVertices","_this4","v","x","y","global","factory","ascending","a","b","NaN","bisector","compare","ascendingComparator","left","lo","hi","mid","right","f","descending","number","variance","array","n","s","j","isNaN","deviation","sqrt","extent","constant","identity","start","stop","step","arguments","max","ceil","Array","ticks","count","tickStep","floor","step0","abs","step1","pow","log","LN10","error","e10","e5","e2","sturges","values","LN2","histogram","xz","domain","x0","x1","tz","threshold","isArray","shift","pop","bin","bins","bisectRight","push","_","thresholds","slice","h","freedmanDiaconis","min","sort","scott","mean","median","numbers","merge","arrays","merged","pairs","permute","indexes","permutes","scan","xi","xj","shuffle","i0","i1","t","sum","transpose","matrix","row","zip","Map","map$1","object","each","set","o","nest","apply","depth","createResult","setResult","keys","rollup","sortValues","keyValue","valuesByKey","result","get","entries","sortKey","sortKeys","k","createObject","setObject","createMap","setMap","order","Set","add","uniform","normal","mu","sigma","r","logNormal","randomNormal","exp","irwinHall","bates","randomIrwinHall","exponential","lambda","linear","quadIn","quadOut","quadInOut","cubicIn","cubicOut","easeCubicInOut","sinIn","cos","halfPi","sinOut","sin","sinInOut","pi","expIn","expOut","expInOut","circleIn","circleOut","circleInOut","bounceIn","bounceOut","b1","b0","b3","b2","b4","b6","b5","b7","b8","b9","bounceInOut","area","polygon","centroid","cross","lexicographicOrder","computeUpperHullIndexes","points","size","hull","sortedPoints","flippedPoints","upperIndexes","lowerIndexes","skipLeft","skipRight","contains","point","y1","y0","inside","length$1","xa","ya","xb","yb","perimeter","Path","_x0","_y0","_x1","_y1","path","tree_add","_x","_y","cover","tree","parent","xm","ym","xp","yp","bottom","node","_root","leaf","next","addAll","yz","Infinity","tree_cover","z","tree_data","visit","tree_extent","undefined","Quad","tree_find","radius","x2","y2","q","x3","y3","quads","d2","tree_remove","retainer","previous","removeAll","remove","tree_root","tree_size","tree_visit","callback","child","tree_visitAfter","defaultX","tree_x","defaultY","tree_y","quadtree","Quadtree","leaf_copy","copy","Queue","Error","_size","_call","_error","_tasks","_data","_waiting","_active","_ended","_start","poke","e","abort","end","noabort","maybeNotify","queue","concurrency","constant$1","arcInnerRadius","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","asin","halfPi$1","intersect","x10","y10","x32","y32","cornerTangents","r1","rc","cw","x01","y01","ox","oy","x11","y11","x00","y00","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","arc","buffer","r0","a0","a1","da","context","epsilon$1","tau$2","moveTo","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","padRadius","cornerRadius","rc0","rc1","p0","p1","pi$2","oc","ax","ay","bx","by","kc","acos","lc","atan2","lineTo","closePath","Linear","_context","curveLinear","line","defined0","output","curve","defined","lineStart","lineEnd","x$$","y$$","area$1","x0z","y0z","areaStart","areaEnd","arealine","lineX0","lineY0","lineY1","lineX1","descending$1","identity$1","pie","index","arcs","pa","Radial","_curve","curveRadial","radial","radialLine","l","angle","radialLine$1","curveRadialLinear","radialArea","lineStartAngle","lineEndAngle","lineInnerRadius","lineOuterRadius","symbol","type","draw","circle","noop","that","bezierCurveTo","Basis","basis","BasisClosed","basisClosed","BasisOpen","basisOpen","Bundle","beta","_basis","_beta","point$1","_k","_x2","_y2","Cardinal","tension","CardinalClosed","CardinalOpen","point$2","_l01_a","_l01_2a","_l12_a","_l12_2a","_l23_a","_l23_2a","CatmullRom","alpha","_alpha","CatmullRomClosed","CatmullRomOpen","LinearClosed","linearClosed","sign","slope3","h0","h1","s0","s1","slope2","point$3","MonotoneX","MonotoneY","ReflectContext","monotoneX","monotoneY","Natural","controlPoints","natural","Step","_t","stepBefore","stepAfter","none","series","none$1","stackValue","stack","oz","kz","sz","sij","ki","si","offset","slice$2","expand","silhouette","wiggle","s2","sij0","sij1","s3","sk","skj0","skj1","ascending$1","sums","sum$1","descending$2","reverse","insideOut","top","tops","bottoms","concat","define","constructor","extend","definition","create","Color","color","format","trim","toLowerCase","reHex3","exec","parseInt","Rgb","reHex6","rgbn","reRgbInteger","reRgbPercent","reRgbaInteger","rgba","reRgbaPercent","reHslPercent","hsla","reHslaPercent","named","g","rgbConvert","rgb","opacity","colorRgb","Hsl","hslConvert","colorHsl","hsl2rgb","m1","m2","labConvert","Lab","Hcl","deg2rad","rgb2xyz","xyz2lab","Xn","Yn","Zn","t3","t2","lab2xyz","xyz2rgb","hclConvert","rad2deg","colorHcl","cubehelixConvert","Cubehelix","BC_DA","ED","EB","bl","E","C","cubehelix","basis$1","v0","v1","v2","v3","basis$2","basisClosed$1","constant$2","linear$1","exponential$1","hue","round","gamma","nogamma","rgbSpline","spline","colors","array$1","nb","na","interpolate","interpolateNumber","zero","one","interpolateString","am","bm","bs","bi","reA","lastIndex","reB","interpolateRgb","interpolateRound","decompose","scaleX","scaleY","skewX","translateX","translateY","rotate","degrees","atan","parseCss","identity$2","cssNode","document","createElement","cssRoot","documentElement","cssView","defaultView","style","transform","getComputedStyle","appendChild","getPropertyValue","removeChild","split","parseSvg","svgNode","createElementNS","setAttribute","baseVal","consolidate","interpolateTransform","parse","pxComma","pxParen","degParen","translate","scale","cosh","sinh","tanh","interpolateZoom","S","ux0","uy0","w0","ux1","uy1","w1","epsilon2","rho","d1","rho4","rho2","coshr0","u","duration","hsl","lab$1","hcl","cubehelix$1","cubehelixGamma","cubehelix$$","quantize","samples","dispatch","Dispatch","parseTypenames","typenames","types","name","indexOf","set$1","noop$1","objectConverter","columns","Function","JSON","stringify","customConverter","inferColumns","rows","columnSet","forEach","column","dsv","delimiter","text","convert","parseRows","token","I","N","EOF","eol","EOL","charCodeAt","replace","delimiterCode","formatValue","formatRows","formatRow","reFormat","test","RegExp","request","url","respond","status","xhr","hasResponse","response","event","mimeType","responseType","headers","XMLHttpRequest","user","password","timeout","XDomainRequest","onload","onerror","ontimeout","onreadystatechange","readyState","onprogress","header","send","post","method","fixCallback","open","has","setRequestHeader","overrideMimeType","on","responseText","defaultMimeType","dsv$1","responseOf","clockNow","setFrame","clearNow","clock","clockSkew","Timer","_time","_next","timer","delay","time","restart","timerFlush","frame","taskHead","wake","clockLast","nap","poke$1","pokeDelay","taskTail","sleep","clearTimeout","clearInterval","setInterval","timeout$1","elapsed","interval$1","total","tick","newInterval","floori","offseti","field","date","d0","filter","setTime","t0$1","t1$1","every","isFinite","weekday","setDate","getDate","getDay","setHours","getTimezoneOffset","durationMinute","durationWeek","utcWeekday","setUTCDate","getUTCDate","getUTCDay","setUTCHours","formatDecimal","toExponential","coefficient","exponent$1","formatGroup","grouping","thousands","substring","formatDefault","toPrecision","out","formatPrefixAuto","exponent","prefixExponent","formatRounded","formatSpecifier","specifier","FormatSpecifier","match","re","fill","align","comma","precision","formatTypes","identity$3","formatLocale","locale","newFormat","valuePrefix","prefix","valueSuffix","suffix","formatType","valueNegative","prefixes","maybeSuffix","decimal","group","padding","currency","toString","formatPrefix","precisionFixed","precisionPrefix","precisionRound","localDate","H","M","L","setFullYear","utcDate","UTC","setUTCFullYear","newYear","formatLocale$1","formats","pad","string","pads","charAt","newParse","newDate","parseSpecifier","w","day","W","U","Z","parses","parsePeriod","periodRe","periodLookup","parseShortWeekday","shortWeekdayRe","shortWeekdayLookup","parseWeekday","weekdayRe","weekdayLookup","parseShortMonth","shortMonthRe","shortMonthLookup","parseMonth","monthRe","monthLookup","parseLocaleDateTime","locale_dateTime","parseLocaleDate","locale_date","parseLocaleTime","locale_time","formatShortWeekday","locale_shortWeekdays","formatWeekday","locale_weekdays","formatShortMonth","locale_shortMonths","getMonth","formatMonth","locale_months","formatPeriod","locale_periods","getHours","formatUTCShortWeekday","formatUTCWeekday","formatUTCShortMonth","getUTCMonth","formatUTCMonth","formatUTCPeriod","getUTCHours","dateTime","periods","days","shortDays","months","shortMonths","formatRe","formatLookup","A","B","formatDayOfMonth","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMonthNumber","formatMinutes","formatSeconds","formatWeekNumberSunday","formatWeekdayNumber","formatWeekNumberMonday","X","formatYear","Y","formatFullYear","formatZone","%","formatLiteralPercent","utcFormats","formatUTCDayOfMonth","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","formatUTCMilliseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekNumberSunday","formatUTCWeekdayNumber","formatUTCWeekNumberMonday","formatUTCYear","formatUTCFullYear","formatUTCZone","parseDayOfMonth","parseHour24","parseDayOfYear","parseMilliseconds","parseMonthNumber","parseMinutes","parseSeconds","parseWeekNumberSunday","parseWeekdayNumber","parseWeekNumberMonday","parseYear","parseFullYear","parseZone","parseLiteralPercent","utcFormat","utcParse","requote","requoteRe","names","numberRe","percentRe","year","getMilliseconds","getMinutes","getSeconds","timeWeek","timeMonday","getFullYear","utcDay","utcYear","getUTCMilliseconds","getUTCMinutes","getUTCSeconds","utcWeek","utcMonday","getUTCFullYear","formatIsoNative","toISOString","parseIsoNative","ordinal","unknown","implicit","slice$3","band","rescale","range$$","paddingInner","paddingOuter","bandwidth","ordinalRange","rangeRound","pointish","point$4","constant$3","number$1","deinterpolate","deinterpolateClamp","reinterpolateClamp","reinterpolate","bimap","polymap","source","clamp","continuous","deinterpolate$$","piecewise","input","interpolate$$","unit","invert","map$2","tickFormat","linearish","nice","linear$2","identity$4","deinterpolate$1","pow10","powp","base","logp","log10","log2","reflect","logs","pows","raise","quantile","invertExtent","quantiles","quantize$1","threshold$1","number$2","calendar","month","week","hour","minute","second","millisecond","formatMillisecond","formatSecond","formatMinute","formatHour","formatDay","formatWeek","tickInterval","tickIntervals","durationYear","durationSecond$1","durationMinute$1","durationHour$1","durationDay$1","durationWeek$1","durationMonth","timeFormat","utcTime","utcMonth","utcHour","utcMinute","rainbow$1","ts","rainbow","ramp","sequential","namespace","namespaces","space","local","creatorInherit","ownerDocument","uri","namespaceURI","xhtml","creatorFixed","fullname","creator","Local","nextId","filterContextListener","listener","contextListener","related","relatedTarget","compareDocumentPosition","event1","event0","__data__","parseTypenames$1","onRemove","typename","__on","removeEventListener","capture","onAdd","wrap","filterEvents","addEventListener","selection_on","customEvent","args","sourceEvent","current","point$5","ownerSVGElement","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","clientLeft","clientTop","mouse","changedTouches","selector","querySelector","selection_select","groups","_groups","subgroups","subnode","subgroup","Selection","_parents","selectorAll","querySelectorAll","selection_selectAll","parents","selection_filter","matcher$1","constant$4","bindIndex","update","exit","groupLength","dataLength","EnterNode","bindKey","nodeByKeyValue","keyValues","keyPrefix","selection_data","bind","enterGroup","updateGroup","exitGroup","_enter","_exit","datum","_parent","sparse","selection_enter","selection_exit","selection_merge","selection","groups0","groups1","m0","merges","group0","group1","selection_order","nextSibling","parentNode","insertBefore","selection_sort","compareNode","ascending$2","sortgroups","sortgroup","selection_call","selection_nodes","selection_node","selection_size","selection_empty","selection_each","attrRemove","removeAttribute","attrRemoveNS","removeAttributeNS","attrConstant","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","selection_attr","getAttributeNS","getAttribute","styleRemove","removeProperty","styleConstant","priority","setProperty","styleFunction","selection_style","propertyRemove","propertyConstant","propertyFunction","selection_property","classArray","classList","ClassList","_node","_names","classedAdd","list","classedRemove","classedTrue","classedFalse","classedFunction","selection_classed","textRemove","textContent","textConstant","textFunction","selection_text","htmlRemove","innerHTML","htmlConstant","htmlFunction","selection_html","raise$1","selection_raise","lower","previousSibling","firstChild","selection_lower","selection_append","constantNull","selection_insert","before","selection_remove","selection_datum","property","dispatchEvent","params","window$$","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","dispatchConstant","dispatchFunction","selection_dispatch","root","touch","touches","identifier","schedule","timing","schedules","__transition","emptyOn","tween","emptyTween","ease","state","CREATED","init","set$2","STARTING","get$1","self","SCHEDULED","STARTED","ENDED","ENDING","interrupt","active","empty","selection_interrupt","tweenRemove","tween0","tween1","splice","tweenFunction","transition_tween","_id","tweenValue","transition","interpolate$1","attrRemove$1","attrRemoveNS$1","attrConstant$1","value1","value00","interpolate0","value0","attrConstantNS$1","attrFunction$1","value10","attrFunctionNS$1","transition_attr","interpolateTransform$2","attrTween","attrTweenNS","_value","transition_attrTween","delayFunction","delayConstant","transition_delay","durationFunction","durationConstant","transition_duration","easeConstant","transition_ease","transition_filter","Transition","_name","transition_merge","start$1","onFunction","on0","on1","sit","transition_on","removeFunction","transition_remove","transition_select","transition_selectAll","children","inherit","transition_selection","Selection$1","styleRemove$1","styleRemoveEnd","styleConstant$1","styleFunction$1","transition_style","interpolateTransform$1","styleTween","transition_styleTween","textConstant$1","textFunction$1","transition_text","transition_transition","id0","id1","newId","defaultTiming","selection_transition","root$1","identity$5","scale0","scale1","center","entering","__axis","axis","orient","tickValues","tickArguments","spacing","tickSizeInner","tickPadding","range0","range1","position","tickExit","tickEnter","insert","epsilon$2","tickSizeOuter","slice$4","tickSize","axisTop","axisRight","axisBottom","axisLeft","defaultSeparation","meanX","reduce","meanXReduce","maxY","maxYReduce","leafLeft","leafRight","cluster","previousNode","eachAfter","separation","nodeSize","node_each","node_eachBefore","node_eachAfter","node_sum","node_sort","eachBefore","node_path","ancestor","leastCommonAncestor","aNodes","ancestors","bNodes","node_ancestors","node_descendants","node_leaves","leaves","node_links","links","hierarchy","childs","Node","valued","defaultChildren","computeHeight","node_copy","copyData","Node$2","shuffle$1","head","tail","enclose","circles","encloseN","encloses","dr","l2","l0","l1","enclose1","enclose2","enclose3","r2","x21","y21","r21","r3","a2","c2","a3","c3","ab","place","db","dc","intersects","distance2","Node$1","packEnclose","sj","aa","ba","ca","oa","pack","siblings","optional","required","constantZero","constant$5","defaultRadius","radiusLeaf","packChildren","translateChild","roundNode","treemapDice","partition","positionNode","defaultId","defaultParentId","parentId","stratify","nodeId","nodeKey","nodeByKey","keyPrefix$1","ambiguous","preroot","defaultSeparation$1","nextLeft","nextRight","moveSubtree","wm","wp","change","executeShifts","nextAncestor","vim","TreeNode","treeRoot","firstWalk","secondWalk","sizeNode","tx","kx","ky","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","treemapSlice","squarifyRatio","ratio","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","dice","index$1","treemap","paddingStack","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","squarify","binary","valueOffset","valueTarget","valueLeft","valueRight","yk","xk","sliceDice","center$1","force","sx","sy","initialize","constant$6","jiggle","x$1","vx","y$1","vy","collide","quad","rj","ri","yi","strength","ri2","iterations","visitAfter","prepare","radii","index$2","link","defaultStrength","distances","strengths","bias","nodeById","initializeStrength","initializeDistance","distance","x$2","y$2","simulation","alphaMin","stepper","fix","alphaTarget","alphaDecay","forces","drag","fixes","initializeNodes","initialRadius","initialAngle","initializeForce","unfix","unfixAll","find","closest","manyBody","accumulate","theta2","distanceMax2","distanceMin2","distanceMin","distanceMax","theta","x$3","y$3","nopropagation","stopImmediatePropagation","noevent","preventDefault","dragDisable","view","__noselect","MozUserSelect","dragEnable","noclick","constant$7","DragEvent","subject","defaultFilter","button","defaultContainer","defaultSubject","mousedowned","touchstarted","touchmoved","touchended","touchending","gesture","beforestart","container","mousemoved","mouseupped","mousemoving","gestures","sublisteners","listeners","constant$8","x$4","y$4","RedBlackTree","RedBlackNode","R","P","RedBlackRotateLeft","RedBlackRotateRight","RedBlackFirst","createEdge","edge","edges","setEdgeEnd","cells","halfedges","createBorderEdge","vertex","clipEdge","connectEdge","fm","fb","lx","ly","rx","ry","fx","fy","clipEdges","epsilon$3","createCell","site","cellHalfedgeAngle","cell","va","vb","cellHalfedgeStart","cellHalfedgeEnd","sortCellHalfedges","clipCells","iCell","iHalfedge","nHalfedges","startX","startY","endX","endY","nCells","v00","v01","v11","v10","Circle","attachCircle","lArc","rArc","lSite","cSite","rSite","epsilon2$1","ha","hc","circlePool","firstCircle","detachCircle","Beach","createBeach","beach","beachPool","detachBeach","beaches","removeBeach","disappearing","unshift","iArc","nArcs","addBeach","dxl","dxr","directrix","leftBreakPoint","rightBreakPoint","newArc","hb","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","triangleArea","lexicographic","Diagram","sites","polygons","constant$9","ZoomEvent","Transform","__zoom","identity$6","nopropagation$1","noevent$1","defaultFilter$1","defaultExtent","clientWidth","clientHeight","defaultTransform","zoom","wheeled","dblclicked","k0","k1","constrain","invertX","invertY","Gesture","wheelidled","wheelTimer","deltaY","deltaMode","mousePoint","mouseLocation","wheelDelay","shiftKey","touch0","touch1","touchstarting","touchDelay","dp","dl","collection","scaleBy","scaleTo","translateBy","emit","scaleExtent","translateExtent","constant$10","BrushEvent","nopropagation$2","noevent$2","type$1","defaultFilter$2","defaultExtent$1","local$1","__brush","brushSelection","dim","brushX","brush$1","brushY","brush","XY","overlay","cursors","handle","handles","redraw","started","handleSize","emitter","Emitter","moved","point1","shifting","lockX","lockY","moving","move","point0","mode","MODE_SPACE","MODE_DRAG","signX","e0","e1","signY","n0","n1","MODE_HANDLE","MODE_CENTER","flipX","flipY","ended","keydowned","keyCode","keyupped","altKey","metaKey","signsX","signsY","selection1","selection0","starting","adder","Adder","reset","add$1","bv","av","pi$3","asin$1","halfPi$2","haversin","noop$2","streamGeometry","geometry","sink","streamGeometryType","streamLine","coordinates","closed","coordinate","streamPolygon","polygonStart","polygonEnd","stream","streamObjectType","areaRingStart","areaSink","areaPointFirst","areaRingEnd","areaPoint","lambda00","phi00","phi","radians","lambda0","cosPhi0","quarterPi","sinPhi0","dLambda","sdLambda","adLambda","cosPhi","sinPhi","areaRingSum","area$2","areaSum","spherical","cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","sqrt$1","boundsPoint","ranges","range$1","lambda0$1","lambda1","phi0","phi1","linePoint","equatorial","inflection","phii","lambda2","lambdai","degrees$1","antimeridian","boundsLineStart","boundsSink","boundsLineEnd","boundsRingPoint","deltaSum","lambda00$1","phi00$1","boundsRingStart","boundsRingEnd","epsilon$4","rangeCompare","rangeContains","bounds","feature","deltaMax","centroidPoint","centroidPointCartesian","W0","X0","Y0","Z0","centroidLineStart","centroidSink","centroidLinePointFirst","z0","centroidLinePoint","W1","X1","Y1","Z1","centroidLineEnd","centroidRingStart","centroidRingPointFirst","centroidRingEnd","centroidRingPoint","lambda00$2","phi00$2","cz","X2","Y2","Z2","centroid$1","epsilon2$2","constant$11","compose","rotationIdentity","tau$3","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","forward","circleStream","direction","cosRadius","sinRadius","circleRadius","circle$1","ring","clipBuffer","lines","rejoin","clipLine","pointEqual","Intersection","other","entry","clipPolygon","segments","compareIntersection","startInside","clip","segment","link$1","isSubject","clipExtent","visible","from","to","corner","comparePoint","cb","activeSink","polygonInside","winding","bufferSink","clean","cleanInside","clipSink","first","v_","x_","y_","x__","y__","v__","clipMin","clipMax","extent$1","streamSink","lengthLineStart","lengthSink","lengthPointFirst","lengthLineEnd","lambda0$2","sinPhi0$1","cosPhi0$1","lengthPoint","cosDelta","sinDelta","lengthSum","length$2","object$1","graticuleX","graticuleY","graticule","DX","DY","outline","extentMajor","extentMinor","stepMajor","stepMinor","interpolate$2","sy0","sy1","kx0","ky0","kx1","ky1","identity$7","areaRingStart$1","areaSink$1","areaPointFirst$1","areaPoint$1","x0$1","y0$1","areaRingSum$1","areaRingEnd$1","boundsPoint$1","x0$2","y0$2","centroidPoint$1","X0$1","Y0$1","Z0$1","centroidLineStart$1","centroidSink$1","centroidPointFirstLine","centroidPointLine","x0$3","y0$3","X1$1","Y1$1","Z1$1","centroidLineEnd$1","centroidRingStart$1","centroidPointFirstRing","centroidRingEnd$1","centroidPointRing","x00$1","y00$1","X2$1","Y2$1","Z2$1","PathContext","pointRadius","pointLineStart","pointLine","lineEndPolygon","PathString","pointCircle","circle$2","index$3","contextStream","projectStream","projection","boundsSink$1","polygonContains","sinPhi1","cosPhi1","absDelta","sum$2","intersection","phiArc","pointVisible","pointRing","ringSink","ringStart","ringEnd","ringSegments","ringBuffer","polygonStarted","validSegment","rotatedStart","sphere","clipAntimeridianLine","sign0","sign1","clipAntimeridianIntersect","sinLambda0Lambda1","clipAntimeridianInterpolate","clipCircle","cr","c0","point2","smallRadius","code","notHemisphere","two","pb","n2","n2n2","n1n2","determinant","c1","n1xn2","uu","polar","meridian","q1","transform$1","T","Transform$1","resample","project","delta2","resample$1","resampleNone","resampleLineTo","phi2","dx2","dy2","dz","cosMinDistance","resampleSink","maxDepth","ringPoint","b00","c00","projectionMutator","projectAt","projectRotate","projectTransform","recenter","preclip","clipAntimeridian","postclip","projectResample","transformRadians","clipAngle","conicProjection","parallels","conicEqualArea","r0y","conicEqualArea$1","albers","multiplex","sinks","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointSink","azimuthal","azimuthalInvert","sc","cc","azimuthalEqualArea$1","azimuthalEqualArea","azimuthalEquidistant$1","azimuthalEquidistant","mercator","log$1","tan","mercator$1","mercatorProjection","clipAuto","tany","conicConformal","pow$1","sign$1","conicConformal$1","equirectangular","equirectangular$1","conicEquidistant","gy","nx","conicEquidistant$1","gnomonic","gnomonic$1","orthographic","orthographic$1","stereographic","stereographic$1","transverseMercator","transverseMercator$1","version","ascendingBisect","bisectLeft","clear","proto","polyIn","custom","polyOut","polyInOut","PI","overshoot","backIn","backOut","backInOut","tau","amplitude","period","elasticIn","elasticOut","elasticInOut","pi$1","tau$1","epsilon","tauEpsilon","quadraticCurveTo","arcTo","l01_2","x20","y20","l21_2","l20_2","l21","l01","t01","t21","ccw","treeProto","slice$1","defer","await","results","awaitAll","_line","_point","cross$1","tan30","tan30_2","diamond","ka","kr","star","square","sqrt3","triangle","wye","_x3","_x4","_y3","_y4","bundle","cardinal","_x5","_y5","cardinalClosed","cardinalOpen","x23","y23","catmullRom","catmullRomClosed","catmullRomOpen","_t0","px","py","darker","brighter","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","displayable","Kn","rgbGamma","rgbBasis","rgbBasisClosed","SQRT2","hsl$1","hslLong","hcl$1","hclLong","cubehelix$2","interpolateCubehelixLong","csv","csvParse","csvParseRows","csvFormat","csvFormatRows","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatRows","html","createRange","createContextualFragment","json","xml","responseXML","csv$1","tsv$1","performance","milliseconds","durationSecond","durationHour","durationDay","seconds","minutes","hours","tuesday","wednesday","thursday","friday","saturday","sundays","mondays","tuesdays","wednesdays","thursdays","fridays","saturdays","setMonth","years","setUTCSeconds","utcMinutes","setUTCMinutes","utcHours","utcDays","utcTuesday","utcWednesday","utcThursday","utcFriday","utcSaturday","utcSundays","utcMondays","utcTuesdays","utcWednesdays","utcThursdays","utcFridays","utcSaturdays","setUTCMonth","utcMonths","utcYears","","toFixed","toUpperCase","defaultLocale","defaultLocale$1","timeParse","-","0","isoSpecifier","formatIso","parseIso","array$2","category10","category20b","category20c","category20","cubehelix$3","warm","cool","viridis","magma","inferno","plasma","xlink","xmlns","matcher","matches","element","vendorMatches","webkitMatchesSelector","msMatchesSelector","mozMatchesSelector","oMatchesSelector","element$1","mouseenter","mouseleave","classed","selection_prototype","descendants","resquarify","_squarify","after","grandpa","uncle","sibling","applyX","applyY","location","rescaleX","rescaleY","xy","nw","ne","se","sw","temp","valueOf","Feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","areaRing","areaSum$1","cxcy","bisect","thresholdFreedmanDiaconis","thresholdScott","thresholdSturges","randomLogNormal","randomBates","randomExponential","easeLinear","easeQuad","easeQuadIn","easeQuadOut","easeQuadInOut","easeCubic","easeCubicIn","easeCubicOut","easePoly","easePolyIn","easePolyOut","easePolyInOut","easeSin","easeSinIn","easeSinOut","easeSinInOut","easeExp","easeExpIn","easeExpOut","easeExpInOut","easeCircle","easeCircleIn","easeCircleOut","easeCircleInOut","easeBounce","easeBounceIn","easeBounceOut","easeBounceInOut","easeBack","easeBackIn","easeBackOut","easeBackInOut","easeElastic","easeElasticIn","easeElasticOut","easeElasticInOut","polygonArea","polygonLength","symbolCircle","symbolCross","symbolDiamond","symbolSquare","symbolStar","symbolTriangle","symbolWye","curveBasisClosed","curveBasisOpen","curveBasis","curveBundle","curveCardinalClosed","curveCardinalOpen","curveCardinal","curveCatmullRomClosed","curveCatmullRomOpen","curveCatmullRom","curveLinearClosed","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","stackOffsetExpand","stackOffsetNone","stackOffsetSilhouette","stackOffsetWiggle","stackOrderAscending","stackOrderDescending","stackOrderInsideOut","stackOrderNone","stackOrderReverse","interpolateArray","interpolateObject","interpolateTransformCss","interpolateTransformSvg","interpolateRgbBasis","interpolateRgbBasisClosed","interpolateHsl","interpolateHslLong","interpolateLab","interpolateHcl","interpolateHclLong","interpolateCubehelix","interpolateBasis","interpolateBasisClosed","dsvFormat","timeInterval","timeMillisecond","timeMilliseconds","timeSecond","timeSeconds","timeMinute","timeMinutes","timeHour","timeHours","timeDay","timeDays","timeWeeks","timeSunday","timeSundays","timeMondays","timeTuesday","timeTuesdays","timeWednesday","timeWednesdays","timeThursday","timeThursdays","timeFriday","timeFridays","timeSaturday","timeSaturdays","timeMonth","timeMonths","timeYear","timeYears","utcMillisecond","utcMilliseconds","utcSecond","utcSeconds","utcWeeks","utcSunday","isoFormat","isoParse","timeFormatLocale","scaleBand","scalePoint","scaleIdentity","scaleLinear","scaleLog","scaleOrdinal","scaleImplicit","scalePow","scaleSqrt","scaleQuantile","scaleQuantize","scaleThreshold","scaleTime","scaleUtc","schemeCategory10","schemeCategory20b","schemeCategory20c","schemeCategory20","scaleSequential","interpolateCubehelixDefault","interpolateRainbow","interpolateWarm","interpolateCool","interpolateViridis","interpolateMagma","interpolateInferno","interpolatePlasma","packSiblings","treemapBinary","treemapSliceDice","treemapSquarify","treemapResquarify","forceCenter","forceCollide","forceLink","forceManyBody","forceSimulation","forceX","forceY","zoomIdentity","zoomTransform","geoArea","geoBounds","geoCentroid","geoCircle","geoClipExtent","geoDistance","geoGraticule","geoInterpolate","geoLength","geoPath","geoAlbers","geoAlbersUsa","geoAzimuthalEqualArea","geoAzimuthalEquidistant","geoConicConformal","geoConicEqualArea","geoConicEquidistant","geoEquirectangular","geoGnomonic","geoProjection","geoProjectionMutator","geoMercator","geoOrthographic","geoStereographic","geoTransverseMercator","geoRotation","geoStream","geoTransform"],"mappings":"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","file":"qnimate.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _d = __webpack_require__(1);\n\t\n\tvar d3 = _interopRequireWildcard(_d);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Qnimate = function () {\n\t  function Qnimate(_ref) {\n\t    var id = _ref.id;\n\t    var width = _ref.width;\n\t    var height = _ref.height;\n\t    var vertices = _ref.vertices;\n\t\n\t    _classCallCheck(this, Qnimate);\n\t\n\t    this.domId = id;\n\t    this.width = width || 960;\n\t    this.height = height || 500;\n\t    this.vertexNum = vertices || 40;\n\t    this._init();\n\t  }\n\t\n\t  // public members\n\t\n\t  _createClass(Qnimate, [{\n\t    key: 'run',\n\t    value: function run() {\n\t      this.isRunning = true;\n\t      this._tick();\n\t    }\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      this.isRunning = false;\n\t    }\n\t\n\t    // private members\n\t\n\t  }, {\n\t    key: '_init',\n\t    value: function _init() {\n\t      var _this = this;\n\t\n\t      this.FPS = 30;\n\t      this.interval = 1000 / this.FPS;\n\t      this.then = Date.now();\n\t      this.renderCount = 10 * this.FPS;\n\t\n\t      this.voronoi = d3.voronoi();\n\t      this.vertices = d3.range(this.vertexNum).map(function () {\n\t        return [d3.randomUniform(-_this.width / 2, 1.5 * _this.width)(), d3.randomUniform(-_this.height / 2, 1.5 * _this.height)()];\n\t      });\n\t      this.symbols = this.vertices.map(function () {\n\t        return Math.random() > 0.5 ? 1 : -1;\n\t      });\n\t\n\t      // the root element <svg>\n\t      this.svg = d3.select('#' + this.domId).append('svg').attr('width', this.width).attr('height', this.height);\n\t\n\t      // our canvas <g>\n\t      this.graph = this.svg.append('g');\n\t    }\n\t  }, {\n\t    key: '_tick',\n\t    value: function _tick() {\n\t      var _this2 = this;\n\t\n\t      if (this.isRunning) {\n\t        if (window.requestAnimationFrame) {\n\t          requestAnimationFrame(function () {\n\t            return _this2._tick();\n\t          });\n\t          var now = Date.now();\n\t          var delta = now - this.then;\n\t          if (delta > this.interval) {\n\t            this.then = now - delta % this.interval;\n\t\n\t            // call render recursively\n\t            this._render(this.vertices);\n\t          }\n\t        } else {\n\t          setTimeout(function () {\n\t            return _this2._tick();\n\t          }, this.interval);\n\t\n\t          // call render recursively\n\t          this._render(this.vertices);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * generate color from a point\n\t     * @param d\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: '_color',\n\t    value: function _color(d) {\n\t      var dx = d[0] - this.width / 2,\n\t          dy = d[1] - this.height / 2;\n\t      return d3.lab(100 - (dx * dx + dy * dy) / 5000, dx / 10, dy / 10);\n\t    }\n\t\n\t    /**\n\t     * render a frame by vertices\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: '_render',\n\t    value: function _render() {\n\t      var _this3 = this;\n\t\n\t      var paths = this.graph.selectAll('path').attr('stroke-linejoin', 'round').attr('stroke-linecap', 'butt').data(this.voronoi(this.vertices).triangles());\n\t\n\t      if (paths.nodes().length < 1) {\n\t        paths = paths.enter().append('path');\n\t      }\n\t\n\t      paths.attr('fill', function (d) {\n\t        return _this3._color(d3.polygonCentroid(d3.polygonHull(d)));\n\t      }).attr('d', function (d) {\n\t        return 'M' + d.join('L') + 'Z';\n\t      });\n\t\n\t      // vertices generated at every render circle\n\t      this._nextVertices();\n\t    }\n\t\n\t    /**\n\t     * generate the next vertices\n\t     * @private\n\t     */\n\t\n\t  }, {\n\t    key: '_nextVertices',\n\t    value: function _nextVertices() {\n\t      var _this4 = this;\n\t\n\t      if (! this.renderCount--) {\n\t        this.symbols = this.symbols.map(function () {\n\t          return Math.random() > 0.5 ? 1 : -1;\n\t        });\n\t        this.renderCount = 10 * this.FPS;\n\t      }\n\t\n\t      this.vertices = this.vertices.map(function (v, i) {\n\t        var dx = Math.random() / 5;\n\t        var dy = Math.random() / 5;\n\t\n\t        var x = v[0] + _this4.symbols[i] * dx;\n\t        var y = v[1] + _this4.symbols[i] * dy;\n\t\n\t        return [x, y];\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return Qnimate;\n\t}();\n\t\n\t// 'module' is always defined by webpack\n\t\n\t\n\twindow.Qnimate = module.exports = Qnimate;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// https://d3js.org Version 4.0.0-alpha.50. Copyright 2016 Mike Bostock.\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.d3 = global.d3 || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  var version = \"4.0.0-alpha.50\";\n\t\n\t  function ascending(a, b) {\n\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\t  }\n\t\n\t  function bisector(compare) {\n\t    if (compare.length === 1) compare = ascendingComparator(compare);\n\t    return {\n\t      left: function(a, x, lo, hi) {\n\t        if (lo == null) lo = 0;\n\t        if (hi == null) hi = a.length;\n\t        while (lo < hi) {\n\t          var mid = lo + hi >>> 1;\n\t          if (compare(a[mid], x) < 0) lo = mid + 1;\n\t          else hi = mid;\n\t        }\n\t        return lo;\n\t      },\n\t      right: function(a, x, lo, hi) {\n\t        if (lo == null) lo = 0;\n\t        if (hi == null) hi = a.length;\n\t        while (lo < hi) {\n\t          var mid = lo + hi >>> 1;\n\t          if (compare(a[mid], x) > 0) hi = mid;\n\t          else lo = mid + 1;\n\t        }\n\t        return lo;\n\t      }\n\t    };\n\t  }\n\t\n\t  function ascendingComparator(f) {\n\t    return function(d, x) {\n\t      return ascending(f(d), x);\n\t    };\n\t  }\n\t\n\t  var ascendingBisect = bisector(ascending);\n\t  var bisectRight = ascendingBisect.right;\n\t  var bisectLeft = ascendingBisect.left;\n\t\n\t  function descending(a, b) {\n\t    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n\t  }\n\t\n\t  function number(x) {\n\t    return x === null ? NaN : +x;\n\t  }\n\t\n\t  function variance(array, f) {\n\t    var n = array.length,\n\t        m = 0,\n\t        a,\n\t        d,\n\t        s = 0,\n\t        i = -1,\n\t        j = 0;\n\t\n\t    if (f == null) {\n\t      while (++i < n) {\n\t        if (!isNaN(a = number(array[i]))) {\n\t          d = a - m;\n\t          m += d / ++j;\n\t          s += d * (a - m);\n\t        }\n\t      }\n\t    }\n\t\n\t    else {\n\t      while (++i < n) {\n\t        if (!isNaN(a = number(f(array[i], i, array)))) {\n\t          d = a - m;\n\t          m += d / ++j;\n\t          s += d * (a - m);\n\t        }\n\t      }\n\t    }\n\t\n\t    if (j > 1) return s / (j - 1);\n\t  }\n\t\n\t  function deviation(array, f) {\n\t    var v = variance(array, f);\n\t    return v ? Math.sqrt(v) : v;\n\t  }\n\t\n\t  function extent(array, f) {\n\t    var i = -1,\n\t        n = array.length,\n\t        a,\n\t        b,\n\t        c;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n\t      while (++i < n) if ((b = array[i]) != null) {\n\t        if (a > b) a = b;\n\t        if (c < b) c = b;\n\t      }\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n\t        if (a > b) a = b;\n\t        if (c < b) c = b;\n\t      }\n\t    }\n\t\n\t    return [a, c];\n\t  }\n\t\n\t  var array = Array.prototype;\n\t\n\t  var slice = array.slice;\n\t  var map = array.map;\n\t\n\t  function constant(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function identity(x) {\n\t    return x;\n\t  }\n\t\n\t  function range(start, stop, step) {\n\t    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\t\n\t    var i = -1,\n\t        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n\t        range = new Array(n);\n\t\n\t    while (++i < n) {\n\t      range[i] = start + i * step;\n\t    }\n\t\n\t    return range;\n\t  }\n\t\n\t  var e10 = Math.sqrt(50);\n\t  var e5 = Math.sqrt(10);\n\t  var e2 = Math.sqrt(2);\n\t  function ticks(start, stop, count) {\n\t    var step = tickStep(start, stop, count);\n\t    return range(\n\t      Math.ceil(start / step) * step,\n\t      Math.floor(stop / step) * step + step / 2, // inclusive\n\t      step\n\t    );\n\t  }\n\t\n\t  function tickStep(start, stop, count) {\n\t    var step0 = Math.abs(stop - start) / Math.max(0, count),\n\t        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n\t        error = step0 / step1;\n\t    if (error >= e10) step1 *= 10;\n\t    else if (error >= e5) step1 *= 5;\n\t    else if (error >= e2) step1 *= 2;\n\t    return stop < start ? -step1 : step1;\n\t  }\n\t\n\t  function sturges(values) {\n\t    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n\t  }\n\t\n\t  function histogram() {\n\t    var value = identity,\n\t        domain = extent,\n\t        threshold = sturges;\n\t\n\t    function histogram(data) {\n\t      var i,\n\t          n = data.length,\n\t          x,\n\t          values = new Array(n);\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        values[i] = value(data[i], i, data);\n\t      }\n\t\n\t      var xz = domain(values),\n\t          x0 = xz[0],\n\t          x1 = xz[1],\n\t          tz = threshold(values, x0, x1);\n\t\n\t      // Convert number of thresholds into uniform thresholds.\n\t      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\t\n\t      // Remove any thresholds outside the domain.\n\t      var m = tz.length;\n\t      while (tz[0] <= x0) tz.shift(), --m;\n\t      while (tz[m - 1] >= x1) tz.pop(), --m;\n\t\n\t      var bins = new Array(m + 1),\n\t          bin;\n\t\n\t      // Initialize bins.\n\t      for (i = 0; i <= m; ++i) {\n\t        bin = bins[i] = [];\n\t        bin.x0 = i > 0 ? tz[i - 1] : x0;\n\t        bin.x1 = i < m ? tz[i] : x1;\n\t      }\n\t\n\t      // Assign data to bins by value, ignoring any outside the domain.\n\t      for (i = 0; i < n; ++i) {\n\t        x = values[i];\n\t        if (x0 <= x && x <= x1) {\n\t          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n\t        }\n\t      }\n\t\n\t      return bins;\n\t    }\n\t\n\t    histogram.value = function(_) {\n\t      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n\t    };\n\t\n\t    histogram.domain = function(_) {\n\t      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n\t    };\n\t\n\t    histogram.thresholds = function(_) {\n\t      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n\t    };\n\t\n\t    return histogram;\n\t  }\n\t\n\t  function threshold(array, p, f) {\n\t    if (f == null) f = number;\n\t    if (!(n = array.length)) return;\n\t    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n\t    if (p >= 1) return +f(array[n - 1], n - 1, array);\n\t    var n,\n\t        h = (n - 1) * p,\n\t        i = Math.floor(h),\n\t        a = +f(array[i], i, array),\n\t        b = +f(array[i + 1], i + 1, array);\n\t    return a + (b - a) * (h - i);\n\t  }\n\t\n\t  function freedmanDiaconis(values, min, max) {\n\t    values = map.call(values, number).sort(ascending);\n\t    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n\t  }\n\t\n\t  function scott(values, min, max) {\n\t    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n\t  }\n\t\n\t  function max(array, f) {\n\t    var i = -1,\n\t        n = array.length,\n\t        a,\n\t        b;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n\t      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n\t    }\n\t\n\t    return a;\n\t  }\n\t\n\t  function mean(array, f) {\n\t    var s = 0,\n\t        n = array.length,\n\t        a,\n\t        i = -1,\n\t        j = n;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;\n\t    }\n\t\n\t    if (j) return s / j;\n\t  }\n\t\n\t  function median(array, f) {\n\t    var numbers = [],\n\t        n = array.length,\n\t        a,\n\t        i = -1;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n\t    }\n\t\n\t    return threshold(numbers.sort(ascending), 0.5);\n\t  }\n\t\n\t  function merge(arrays) {\n\t    var n = arrays.length,\n\t        m,\n\t        i = -1,\n\t        j = 0,\n\t        merged,\n\t        array;\n\t\n\t    while (++i < n) j += arrays[i].length;\n\t    merged = new Array(j);\n\t\n\t    while (--n >= 0) {\n\t      array = arrays[n];\n\t      m = array.length;\n\t      while (--m >= 0) {\n\t        merged[--j] = array[m];\n\t      }\n\t    }\n\t\n\t    return merged;\n\t  }\n\t\n\t  function min(array, f) {\n\t    var i = -1,\n\t        n = array.length,\n\t        a,\n\t        b;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n\t      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n\t      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n\t    }\n\t\n\t    return a;\n\t  }\n\t\n\t  function pairs(array) {\n\t    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n\t    while (i < n) pairs[i] = [p, p = array[++i]];\n\t    return pairs;\n\t  }\n\t\n\t  function permute(array, indexes) {\n\t    var i = indexes.length, permutes = new Array(i);\n\t    while (i--) permutes[i] = array[indexes[i]];\n\t    return permutes;\n\t  }\n\t\n\t  function scan(array, compare) {\n\t    if (!(n = array.length)) return;\n\t    var i = 0,\n\t        n,\n\t        j = 0,\n\t        xi,\n\t        xj = array[j];\n\t\n\t    if (!compare) compare = ascending;\n\t\n\t    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\t\n\t    if (compare(xj, xj) === 0) return j;\n\t  }\n\t\n\t  function shuffle(array, i0, i1) {\n\t    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n\t        t,\n\t        i;\n\t\n\t    while (m) {\n\t      i = Math.random() * m-- | 0;\n\t      t = array[m + i0];\n\t      array[m + i0] = array[i + i0];\n\t      array[i + i0] = t;\n\t    }\n\t\n\t    return array;\n\t  }\n\t\n\t  function sum(array, f) {\n\t    var s = 0,\n\t        n = array.length,\n\t        a,\n\t        i = -1;\n\t\n\t    if (f == null) {\n\t      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n\t    }\n\t\n\t    else {\n\t      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n\t    }\n\t\n\t    return s;\n\t  }\n\t\n\t  function transpose(matrix) {\n\t    if (!(n = matrix.length)) return [];\n\t    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n\t      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n\t        row[j] = matrix[j][i];\n\t      }\n\t    }\n\t    return transpose;\n\t  }\n\t\n\t  function length(d) {\n\t    return d.length;\n\t  }\n\t\n\t  function zip() {\n\t    return transpose(arguments);\n\t  }\n\t\n\t  var prefix = \"$\";\n\t\n\t  function Map() {}\n\t\n\t  Map.prototype = map$1.prototype = {\n\t    constructor: Map,\n\t    has: function(key) {\n\t      return (prefix + key) in this;\n\t    },\n\t    get: function(key) {\n\t      return this[prefix + key];\n\t    },\n\t    set: function(key, value) {\n\t      this[prefix + key] = value;\n\t      return this;\n\t    },\n\t    remove: function(key) {\n\t      var property = prefix + key;\n\t      return property in this && delete this[property];\n\t    },\n\t    clear: function() {\n\t      for (var property in this) if (property[0] === prefix) delete this[property];\n\t    },\n\t    keys: function() {\n\t      var keys = [];\n\t      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n\t      return keys;\n\t    },\n\t    values: function() {\n\t      var values = [];\n\t      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n\t      return values;\n\t    },\n\t    entries: function() {\n\t      var entries = [];\n\t      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n\t      return entries;\n\t    },\n\t    size: function() {\n\t      var size = 0;\n\t      for (var property in this) if (property[0] === prefix) ++size;\n\t      return size;\n\t    },\n\t    empty: function() {\n\t      for (var property in this) if (property[0] === prefix) return false;\n\t      return true;\n\t    },\n\t    each: function(f) {\n\t      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n\t    }\n\t  };\n\t\n\t  function map$1(object, f) {\n\t    var map = new Map;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\t\n\t    // Index array by numeric index or specified key function.\n\t    else if (Array.isArray(object)) {\n\t      var i = -1,\n\t          n = object.length,\n\t          o;\n\t\n\t      if (f == null) while (++i < n) map.set(i, object[i]);\n\t      else while (++i < n) map.set(f(o = object[i], i, object), o);\n\t    }\n\t\n\t    // Convert object to map.\n\t    else if (object) for (var key in object) map.set(key, object[key]);\n\t\n\t    return map;\n\t  }\n\t\n\t  function nest() {\n\t    var keys = [],\n\t        sortKeys = [],\n\t        sortValues,\n\t        rollup,\n\t        nest;\n\t\n\t    function apply(array, depth, createResult, setResult) {\n\t      if (depth >= keys.length) return rollup != null\n\t          ? rollup(array) : (sortValues != null\n\t          ? array.sort(sortValues)\n\t          : array);\n\t\n\t      var i = -1,\n\t          n = array.length,\n\t          key = keys[depth++],\n\t          keyValue,\n\t          value,\n\t          valuesByKey = map$1(),\n\t          values,\n\t          result = createResult();\n\t\n\t      while (++i < n) {\n\t        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n\t          values.push(value);\n\t        } else {\n\t          valuesByKey.set(keyValue, [value]);\n\t        }\n\t      }\n\t\n\t      valuesByKey.each(function(values, key) {\n\t        setResult(result, key, apply(values, depth, createResult, setResult));\n\t      });\n\t\n\t      return result;\n\t    }\n\t\n\t    function entries(map, depth) {\n\t      if (++depth > keys.length) return map;\n\t      var array, sortKey = sortKeys[depth - 1];\n\t      if (rollup != null && depth >= keys.length) array = map.entries();\n\t      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n\t      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n\t    }\n\t\n\t    return nest = {\n\t      object: function(array) { return apply(array, 0, createObject, setObject); },\n\t      map: function(array) { return apply(array, 0, createMap, setMap); },\n\t      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n\t      key: function(d) { keys.push(d); return nest; },\n\t      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n\t      sortValues: function(order) { sortValues = order; return nest; },\n\t      rollup: function(f) { rollup = f; return nest; }\n\t    };\n\t  }\n\t\n\t  function createObject() {\n\t    return {};\n\t  }\n\t\n\t  function setObject(object, key, value) {\n\t    object[key] = value;\n\t  }\n\t\n\t  function createMap() {\n\t    return map$1();\n\t  }\n\t\n\t  function setMap(map, key, value) {\n\t    map.set(key, value);\n\t  }\n\t\n\t  function Set() {}\n\t\n\t  var proto = map$1.prototype;\n\t\n\t  Set.prototype = set.prototype = {\n\t    constructor: Set,\n\t    has: proto.has,\n\t    add: function(value) {\n\t      value += \"\";\n\t      this[prefix + value] = value;\n\t      return this;\n\t    },\n\t    remove: proto.remove,\n\t    clear: proto.clear,\n\t    values: proto.keys,\n\t    size: proto.size,\n\t    empty: proto.empty,\n\t    each: proto.each\n\t  };\n\t\n\t  function set(object, f) {\n\t    var set = new Set;\n\t\n\t    // Copy constructor.\n\t    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\t\n\t    // Otherwise, assume it’s an array.\n\t    else if (object) {\n\t      var i = -1, n = object.length;\n\t      if (f == null) while (++i < n) set.add(object[i]);\n\t      else while (++i < n) set.add(f(object[i], i, object));\n\t    }\n\t\n\t    return set;\n\t  }\n\t\n\t  function keys(map) {\n\t    var keys = [];\n\t    for (var key in map) keys.push(key);\n\t    return keys;\n\t  }\n\t\n\t  function values(map) {\n\t    var values = [];\n\t    for (var key in map) values.push(map[key]);\n\t    return values;\n\t  }\n\t\n\t  function entries(map) {\n\t    var entries = [];\n\t    for (var key in map) entries.push({key: key, value: map[key]});\n\t    return entries;\n\t  }\n\t\n\t  function uniform(min, max) {\n\t    min = min == null ? 0 : +min;\n\t    max = max == null ? 1 : +max;\n\t    if (arguments.length === 1) max = min, min = 0;\n\t    else max -= min;\n\t    return function() {\n\t      return Math.random() * max + min;\n\t    };\n\t  }\n\t\n\t  function normal(mu, sigma) {\n\t    var x, r;\n\t    mu = mu == null ? 0 : +mu;\n\t    sigma = sigma == null ? 1 : +sigma;\n\t    return function() {\n\t      var y;\n\t\n\t      // If available, use the second previously-generated uniform random.\n\t      if (x != null) y = x, x = null;\n\t\n\t      // Otherwise, generate a new x and y.\n\t      else do {\n\t        x = Math.random() * 2 - 1;\n\t        y = Math.random() * 2 - 1;\n\t        r = x * x + y * y;\n\t      } while (!r || r > 1);\n\t\n\t      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n\t    };\n\t  }\n\t\n\t  function logNormal() {\n\t    var randomNormal = normal.apply(this, arguments);\n\t    return function() {\n\t      return Math.exp(randomNormal());\n\t    };\n\t  }\n\t\n\t  function irwinHall(n) {\n\t    return function() {\n\t      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();\n\t      return sum;\n\t    };\n\t  }\n\t\n\t  function bates(n) {\n\t    var randomIrwinHall = irwinHall(n);\n\t    return function() {\n\t      return randomIrwinHall() / n;\n\t    };\n\t  }\n\t\n\t  function exponential(lambda) {\n\t    return function() {\n\t      return -Math.log(1 - Math.random()) / lambda;\n\t    };\n\t  }\n\t\n\t  function linear(t) {\n\t    return +t;\n\t  }\n\t\n\t  function quadIn(t) {\n\t    return t * t;\n\t  }\n\t\n\t  function quadOut(t) {\n\t    return t * (2 - t);\n\t  }\n\t\n\t  function quadInOut(t) {\n\t    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n\t  }\n\t\n\t  function cubicIn(t) {\n\t    return t * t * t;\n\t  }\n\t\n\t  function cubicOut(t) {\n\t    return --t * t * t + 1;\n\t  }\n\t\n\t  function easeCubicInOut(t) {\n\t    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n\t  }\n\t\n\t  var exponent = 3;\n\t\n\t  var polyIn = (function custom(e) {\n\t    e = +e;\n\t\n\t    function polyIn(t) {\n\t      return Math.pow(t, e);\n\t    }\n\t\n\t    polyIn.exponent = custom;\n\t\n\t    return polyIn;\n\t  })(exponent);\n\t\n\t  var polyOut = (function custom(e) {\n\t    e = +e;\n\t\n\t    function polyOut(t) {\n\t      return 1 - Math.pow(1 - t, e);\n\t    }\n\t\n\t    polyOut.exponent = custom;\n\t\n\t    return polyOut;\n\t  })(exponent);\n\t\n\t  var polyInOut = (function custom(e) {\n\t    e = +e;\n\t\n\t    function polyInOut(t) {\n\t      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n\t    }\n\t\n\t    polyInOut.exponent = custom;\n\t\n\t    return polyInOut;\n\t  })(exponent);\n\t\n\t  var pi = Math.PI;\n\t  var halfPi = pi / 2;\n\t  function sinIn(t) {\n\t    return 1 - Math.cos(t * halfPi);\n\t  }\n\t\n\t  function sinOut(t) {\n\t    return Math.sin(t * halfPi);\n\t  }\n\t\n\t  function sinInOut(t) {\n\t    return (1 - Math.cos(pi * t)) / 2;\n\t  }\n\t\n\t  function expIn(t) {\n\t    return Math.pow(2, 10 * t - 10);\n\t  }\n\t\n\t  function expOut(t) {\n\t    return 1 - Math.pow(2, -10 * t);\n\t  }\n\t\n\t  function expInOut(t) {\n\t    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n\t  }\n\t\n\t  function circleIn(t) {\n\t    return 1 - Math.sqrt(1 - t * t);\n\t  }\n\t\n\t  function circleOut(t) {\n\t    return Math.sqrt(1 - --t * t);\n\t  }\n\t\n\t  function circleInOut(t) {\n\t    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n\t  }\n\t\n\t  var b1 = 4 / 11;\n\t  var b2 = 6 / 11;\n\t  var b3 = 8 / 11;\n\t  var b4 = 3 / 4;\n\t  var b5 = 9 / 11;\n\t  var b6 = 10 / 11;\n\t  var b7 = 15 / 16;\n\t  var b8 = 21 / 22;\n\t  var b9 = 63 / 64;\n\t  var b0 = 1 / b1 / b1;\n\t  function bounceIn(t) {\n\t    return 1 - bounceOut(1 - t);\n\t  }\n\t\n\t  function bounceOut(t) {\n\t    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n\t  }\n\t\n\t  function bounceInOut(t) {\n\t    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n\t  }\n\t\n\t  var overshoot = 1.70158;\n\t\n\t  var backIn = (function custom(s) {\n\t    s = +s;\n\t\n\t    function backIn(t) {\n\t      return t * t * ((s + 1) * t - s);\n\t    }\n\t\n\t    backIn.overshoot = custom;\n\t\n\t    return backIn;\n\t  })(overshoot);\n\t\n\t  var backOut = (function custom(s) {\n\t    s = +s;\n\t\n\t    function backOut(t) {\n\t      return --t * t * ((s + 1) * t + s) + 1;\n\t    }\n\t\n\t    backOut.overshoot = custom;\n\t\n\t    return backOut;\n\t  })(overshoot);\n\t\n\t  var backInOut = (function custom(s) {\n\t    s = +s;\n\t\n\t    function backInOut(t) {\n\t      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n\t    }\n\t\n\t    backInOut.overshoot = custom;\n\t\n\t    return backInOut;\n\t  })(overshoot);\n\t\n\t  var tau = 2 * Math.PI;\n\t  var amplitude = 1;\n\t  var period = 0.3;\n\t  var elasticIn = (function custom(a, p) {\n\t    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\t\n\t    function elasticIn(t) {\n\t      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n\t    }\n\t\n\t    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n\t    elasticIn.period = function(p) { return custom(a, p); };\n\t\n\t    return elasticIn;\n\t  })(amplitude, period);\n\t\n\t  var elasticOut = (function custom(a, p) {\n\t    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\t\n\t    function elasticOut(t) {\n\t      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n\t    }\n\t\n\t    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n\t    elasticOut.period = function(p) { return custom(a, p); };\n\t\n\t    return elasticOut;\n\t  })(amplitude, period);\n\t\n\t  var elasticInOut = (function custom(a, p) {\n\t    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\t\n\t    function elasticInOut(t) {\n\t      return ((t = t * 2 - 1) < 0\n\t          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n\t          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n\t    }\n\t\n\t    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n\t    elasticInOut.period = function(p) { return custom(a, p); };\n\t\n\t    return elasticInOut;\n\t  })(amplitude, period);\n\t\n\t  function area(polygon) {\n\t    var i = -1,\n\t        n = polygon.length,\n\t        a,\n\t        b = polygon[n - 1],\n\t        area = 0;\n\t\n\t    while (++i < n) {\n\t      a = b;\n\t      b = polygon[i];\n\t      area += a[1] * b[0] - a[0] * b[1];\n\t    }\n\t\n\t    return area / 2;\n\t  }\n\t\n\t  function centroid(polygon) {\n\t    var i = -1,\n\t        n = polygon.length,\n\t        x = 0,\n\t        y = 0,\n\t        a,\n\t        b = polygon[n - 1],\n\t        c,\n\t        k = 0;\n\t\n\t    while (++i < n) {\n\t      a = b;\n\t      b = polygon[i];\n\t      k += c = a[0] * b[1] - b[0] * a[1];\n\t      x += (a[0] + b[0]) * c;\n\t      y += (a[1] + b[1]) * c;\n\t    }\n\t\n\t    return k *= 3, [x / k, y / k];\n\t  }\n\t\n\t  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n\t  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n\t  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n\t  // negative if clockwise, and zero if the points are collinear.\n\t  function cross(a, b, c) {\n\t    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n\t  }\n\t\n\t  function lexicographicOrder(a, b) {\n\t    return a[0] - b[0] || a[1] - b[1];\n\t  }\n\t\n\t  // Computes the upper convex hull per the monotone chain algorithm.\n\t  // Assumes points.length >= 3, is sorted by x, unique in y.\n\t  // Returns an array of indices into points in left-to-right order.\n\t  function computeUpperHullIndexes(points) {\n\t    var n = points.length,\n\t        indexes = [0, 1],\n\t        size = 2;\n\t\n\t    for (var i = 2; i < n; ++i) {\n\t      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n\t      indexes[size++] = i;\n\t    }\n\t\n\t    return indexes.slice(0, size); // remove popped points\n\t  }\n\t\n\t  function hull(points) {\n\t    if ((n = points.length) < 3) return null;\n\t\n\t    var i,\n\t        n,\n\t        sortedPoints = new Array(n),\n\t        flippedPoints = new Array(n);\n\t\n\t    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n\t    sortedPoints.sort(lexicographicOrder);\n\t    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\t\n\t    var upperIndexes = computeUpperHullIndexes(sortedPoints),\n\t        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\t\n\t    // Construct the hull polygon, removing possible duplicate endpoints.\n\t    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n\t        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n\t        hull = [];\n\t\n\t    // Add upper hull in right-to-l order.\n\t    // Then add lower hull in left-to-right order.\n\t    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n\t    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\t\n\t    return hull;\n\t  }\n\t\n\t  function contains(polygon, point) {\n\t    var n = polygon.length,\n\t        p = polygon[n - 1],\n\t        x = point[0], y = point[1],\n\t        x0 = p[0], y0 = p[1],\n\t        x1, y1,\n\t        inside = false;\n\t\n\t    for (var i = 0; i < n; ++i) {\n\t      p = polygon[i], x1 = p[0], y1 = p[1];\n\t      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n\t      x0 = x1, y0 = y1;\n\t    }\n\t\n\t    return inside;\n\t  }\n\t\n\t  function length$1(polygon) {\n\t    var i = -1,\n\t        n = polygon.length,\n\t        b = polygon[n - 1],\n\t        xa,\n\t        ya,\n\t        xb = b[0],\n\t        yb = b[1],\n\t        perimeter = 0;\n\t\n\t    while (++i < n) {\n\t      xa = xb;\n\t      ya = yb;\n\t      b = polygon[i];\n\t      xb = b[0];\n\t      yb = b[1];\n\t      xa -= xb;\n\t      ya -= yb;\n\t      perimeter += Math.sqrt(xa * xa + ya * ya);\n\t    }\n\t\n\t    return perimeter;\n\t  }\n\t\n\tvar   pi$1 = Math.PI;\n\tvar   tau$1 = 2 * pi$1;\n\t  var epsilon = 1e-6;\n\t  var tauEpsilon = tau$1 - epsilon;\n\t  function Path() {\n\t    this._x0 = this._y0 = // start of current subpath\n\t    this._x1 = this._y1 = null; // end of current subpath\n\t    this._ = [];\n\t  }\n\t\n\t  function path() {\n\t    return new Path;\n\t  }\n\t\n\t  Path.prototype = path.prototype = {\n\t    constructor: Path,\n\t    moveTo: function(x, y) {\n\t      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y);\n\t    },\n\t    closePath: function() {\n\t      if (this._x1 !== null) {\n\t        this._x1 = this._x0, this._y1 = this._y0;\n\t        this._.push(\"Z\");\n\t      }\n\t    },\n\t    lineTo: function(x, y) {\n\t      this._.push(\"L\", this._x1 = +x, \",\", this._y1 = +y);\n\t    },\n\t    quadraticCurveTo: function(x1, y1, x, y) {\n\t      this._.push(\"Q\", +x1, \",\", +y1, \",\", this._x1 = +x, \",\", this._y1 = +y);\n\t    },\n\t    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n\t      this._.push(\"C\", +x1, \",\", +y1, \",\", +x2, \",\", +y2, \",\", this._x1 = +x, \",\", this._y1 = +y);\n\t    },\n\t    arcTo: function(x1, y1, x2, y2, r) {\n\t      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n\t      var x0 = this._x1,\n\t          y0 = this._y1,\n\t          x21 = x2 - x1,\n\t          y21 = y2 - y1,\n\t          x01 = x0 - x1,\n\t          y01 = y0 - y1,\n\t          l01_2 = x01 * x01 + y01 * y01;\n\t\n\t      // Is the radius negative? Error.\n\t      if (r < 0) throw new Error(\"negative radius: \" + r);\n\t\n\t      // Is this path empty? Move to (x1,y1).\n\t      if (this._x1 === null) {\n\t        this._.push(\n\t          \"M\", this._x1 = x1, \",\", this._y1 = y1\n\t        );\n\t      }\n\t\n\t      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n\t      else if (!(l01_2 > epsilon));\n\t\n\t      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n\t      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n\t      // Or, is the radius zero? Line to (x1,y1).\n\t      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n\t        this._.push(\n\t          \"L\", this._x1 = x1, \",\", this._y1 = y1\n\t        );\n\t      }\n\t\n\t      // Otherwise, draw an arc!\n\t      else {\n\t        var x20 = x2 - x0,\n\t            y20 = y2 - y0,\n\t            l21_2 = x21 * x21 + y21 * y21,\n\t            l20_2 = x20 * x20 + y20 * y20,\n\t            l21 = Math.sqrt(l21_2),\n\t            l01 = Math.sqrt(l01_2),\n\t            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n\t            t01 = l / l01,\n\t            t21 = l / l21;\n\t\n\t        // If the start tangent is not coincident with (x0,y0), line to.\n\t        if (Math.abs(t01 - 1) > epsilon) {\n\t          this._.push(\n\t            \"L\", x1 + t01 * x01, \",\", y1 + t01 * y01\n\t          );\n\t        }\n\t\n\t        this._.push(\n\t          \"A\", r, \",\", r, \",0,0,\", +(y01 * x20 > x01 * y20), \",\", this._x1 = x1 + t21 * x21, \",\", this._y1 = y1 + t21 * y21\n\t        );\n\t      }\n\t    },\n\t    arc: function(x, y, r, a0, a1, ccw) {\n\t      x = +x, y = +y, r = +r;\n\t      var dx = r * Math.cos(a0),\n\t          dy = r * Math.sin(a0),\n\t          x0 = x + dx,\n\t          y0 = y + dy,\n\t          cw = 1 ^ ccw,\n\t          da = ccw ? a0 - a1 : a1 - a0;\n\t\n\t      // Is the radius negative? Error.\n\t      if (r < 0) throw new Error(\"negative radius: \" + r);\n\t\n\t      // Is this path empty? Move to (x0,y0).\n\t      if (this._x1 === null) {\n\t        this._.push(\n\t          \"M\", x0, \",\", y0\n\t        );\n\t      }\n\t\n\t      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n\t      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n\t        this._.push(\n\t          \"L\", x0, \",\", y0\n\t        );\n\t      }\n\t\n\t      // Is this arc empty? We’re done.\n\t      if (!r) return;\n\t\n\t      // Is this a complete circle? Draw two arcs to complete the circle.\n\t      if (da > tauEpsilon) {\n\t        this._.push(\n\t          \"A\", r, \",\", r, \",0,1,\", cw, \",\", x - dx, \",\", y - dy,\n\t          \"A\", r, \",\", r, \",0,1,\", cw, \",\", this._x1 = x0, \",\", this._y1 = y0\n\t        );\n\t      }\n\t\n\t      // Otherwise, draw an arc!\n\t      else {\n\t        if (da < 0) da = da % tau$1 + tau$1;\n\t        this._.push(\n\t          \"A\", r, \",\", r, \",0,\", +(da >= pi$1), \",\", cw, \",\", this._x1 = x + r * Math.cos(a1), \",\", this._y1 = y + r * Math.sin(a1)\n\t        );\n\t      }\n\t    },\n\t    rect: function(x, y, w, h) {\n\t      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y, \"h\", +w, \"v\", +h, \"h\", -w, \"Z\");\n\t    },\n\t    toString: function() {\n\t      return this._.join(\"\");\n\t    }\n\t  };\n\t\n\t  function tree_add(d) {\n\t    var x = +this._x.call(null, d),\n\t        y = +this._y.call(null, d);\n\t    return add(this.cover(x, y), x, y, d);\n\t  }\n\t\n\t  function add(tree, x, y, d) {\n\t    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\t\n\t    var parent,\n\t        node = tree._root,\n\t        leaf = {data: d},\n\t        x0 = tree._x0,\n\t        y0 = tree._y0,\n\t        x1 = tree._x1,\n\t        y1 = tree._y1,\n\t        xm,\n\t        ym,\n\t        xp,\n\t        yp,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return tree._root = leaf, tree;\n\t\n\t    // Find the existing leaf for the new point, or add it.\n\t    while (node.length) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n\t    }\n\t\n\t    // Is the new point is exactly coincident with the existing point?\n\t    xp = +tree._x.call(null, node.data);\n\t    yp = +tree._y.call(null, node.data);\n\t    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\t\n\t    // Otherwise, split the leaf node until the old and new point are separated.\n\t    do {\n\t      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n\t    return parent[j] = node, parent[i] = leaf, tree;\n\t  }\n\t\n\t  function addAll(data) {\n\t    var d, i, n = data.length,\n\t        x,\n\t        y,\n\t        xz = new Array(n),\n\t        yz = new Array(n),\n\t        x0 = Infinity,\n\t        y0 = Infinity,\n\t        x1 = -Infinity,\n\t        y1 = -Infinity;\n\t\n\t    // Compute the points and their extent.\n\t    for (i = 0; i < n; ++i) {\n\t      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n\t      xz[i] = x;\n\t      yz[i] = y;\n\t      if (x < x0) x0 = x;\n\t      if (x > x1) x1 = x;\n\t      if (y < y0) y0 = y;\n\t      if (y > y1) y1 = y;\n\t    }\n\t\n\t    // If there were no (valid) points, inherit the existing extent.\n\t    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n\t    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\t\n\t    // Expand the tree to cover the new points.\n\t    this.cover(x0, y0).cover(x1, y1);\n\t\n\t    // Add the new points.\n\t    for (i = 0; i < n; ++i) {\n\t      add(this, xz[i], yz[i], data[i]);\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function tree_cover(x, y) {\n\t    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\t\n\t    var x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1;\n\t\n\t    // If the quadtree has no extent, initialize them.\n\t    // Integer extent are necessary so that if we later double the extent,\n\t    // the existing quadrant boundaries don’t change due to floating point error!\n\t    if (isNaN(x0)) {\n\t      x1 = (x0 = Math.floor(x)) + 1;\n\t      y1 = (y0 = Math.floor(y)) + 1;\n\t    }\n\t\n\t    // Otherwise, double repeatedly to cover.\n\t    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n\t      var z = x1 - x0,\n\t          node = this._root,\n\t          parent,\n\t          i;\n\t\n\t      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n\t        case 0: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n\t          break;\n\t        }\n\t        case 1: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n\t          break;\n\t        }\n\t        case 2: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n\t          break;\n\t        }\n\t        case 3: {\n\t          do parent = new Array(4), parent[i] = node, node = parent;\n\t          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n\t          break;\n\t        }\n\t      }\n\t\n\t      if (this._root && this._root.length) this._root = node;\n\t    }\n\t\n\t    // If the quadtree covers the point already, just return.\n\t    else return this;\n\t\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    return this;\n\t  }\n\t\n\t  function tree_data() {\n\t    var data = [];\n\t    this.visit(function(node) {\n\t      if (!node.length) do data.push(node.data); while (node = node.next)\n\t    });\n\t    return data;\n\t  }\n\t\n\t  function tree_extent(_) {\n\t    return arguments.length\n\t        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n\t        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n\t  }\n\t\n\t  function Quad(node, x0, y0, x1, y1) {\n\t    this.node = node;\n\t    this.x0 = x0;\n\t    this.y0 = y0;\n\t    this.x1 = x1;\n\t    this.y1 = y1;\n\t  }\n\t\n\t  function tree_find(x, y, radius) {\n\t    var data,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1,\n\t        y1,\n\t        x2,\n\t        y2,\n\t        x3 = this._x1,\n\t        y3 = this._y1,\n\t        quads = [],\n\t        node = this._root,\n\t        q,\n\t        i;\n\t\n\t    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n\t    if (radius == null) radius = Infinity;\n\t    else {\n\t      x0 = x - radius, y0 = y - radius;\n\t      x3 = x + radius, y3 = y + radius;\n\t      radius *= radius;\n\t    }\n\t\n\t    while (q = quads.pop()) {\n\t\n\t      // Stop searching if this quadrant can’t contain a closer node.\n\t      if (!(node = q.node)\n\t          || (x1 = q.x0) > x3\n\t          || (y1 = q.y0) > y3\n\t          || (x2 = q.x1) < x0\n\t          || (y2 = q.y1) < y0) continue;\n\t\n\t      // Bisect the current quadrant.\n\t      if (node.length) {\n\t        var xm = (x1 + x2) / 2,\n\t            ym = (y1 + y2) / 2;\n\t\n\t        quads.push(\n\t          new Quad(node[3], xm, ym, x2, y2),\n\t          new Quad(node[2], x1, ym, xm, y2),\n\t          new Quad(node[1], xm, y1, x2, ym),\n\t          new Quad(node[0], x1, y1, xm, ym)\n\t        );\n\t\n\t        // Visit the closest quadrant first.\n\t        if (i = (y >= ym) << 1 | (x >= xm)) {\n\t          q = quads[quads.length - 1];\n\t          quads[quads.length - 1] = quads[quads.length - 1 - i];\n\t          quads[quads.length - 1 - i] = q;\n\t        }\n\t      }\n\t\n\t      // Visit this point. (Visiting coincident points isn’t necessary!)\n\t      else {\n\t        var dx = x - +this._x.call(null, node.data),\n\t            dy = y - +this._y.call(null, node.data),\n\t            d2 = dx * dx + dy * dy;\n\t        if (d2 < radius) {\n\t          var d = Math.sqrt(radius = d2);\n\t          x0 = x - d, y0 = y - d;\n\t          x3 = x + d, y3 = y + d;\n\t          data = node.data;\n\t        }\n\t      }\n\t    }\n\t\n\t    return data;\n\t  }\n\t\n\t  function tree_remove(d) {\n\t    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\t\n\t    var parent,\n\t        node = this._root,\n\t        retainer,\n\t        previous,\n\t        next,\n\t        x0 = this._x0,\n\t        y0 = this._y0,\n\t        x1 = this._x1,\n\t        y1 = this._y1,\n\t        x,\n\t        y,\n\t        xm,\n\t        ym,\n\t        right,\n\t        bottom,\n\t        i,\n\t        j;\n\t\n\t    // If the tree is empty, initialize the root as a leaf.\n\t    if (!node) return this;\n\t\n\t    // Find the leaf node for the point.\n\t    // While descending, also retain the deepest parent with a non-removed sibling.\n\t    if (node.length) while (true) {\n\t      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n\t      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n\t      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n\t      if (!node.length) break;\n\t      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n\t    }\n\t\n\t    // Find the point to remove.\n\t    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n\t    if (next = node.next) delete node.next;\n\t\n\t    // If there are multiple coincident points, remove just the point.\n\t    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\t\n\t    // If this is the root point, remove it.\n\t    if (!parent) return this._root = next, this;\n\t\n\t    // Remove this leaf.\n\t    next ? parent[i] = next : delete parent[i];\n\t\n\t    // If the parent now contains exactly one leaf, collapse superfluous parents.\n\t    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n\t        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n\t        && !node.length) {\n\t      if (retainer) retainer[j] = node;\n\t      else this._root = node;\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function removeAll(data) {\n\t    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n\t    return this;\n\t  }\n\t\n\t  function tree_root() {\n\t    return this._root;\n\t  }\n\t\n\t  function tree_size() {\n\t    var size = 0;\n\t    this.visit(function(node) {\n\t      if (!node.length) do ++size; while (node = node.next)\n\t    });\n\t    return size;\n\t  }\n\t\n\t  function tree_visit(callback) {\n\t    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n\t    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n\t        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t      }\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function tree_visitAfter(callback) {\n\t    var quads = [], next = [], q;\n\t    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n\t    while (q = quads.pop()) {\n\t      var node = q.node;\n\t      if (node.length) {\n\t        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n\t        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n\t        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n\t        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n\t        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n\t      }\n\t      next.push(q);\n\t    }\n\t    while (q = next.pop()) {\n\t      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function defaultX(d) {\n\t    return d[0];\n\t  }\n\t\n\t  function tree_x(_) {\n\t    return arguments.length ? (this._x = _, this) : this._x;\n\t  }\n\t\n\t  function defaultY(d) {\n\t    return d[1];\n\t  }\n\t\n\t  function tree_y(_) {\n\t    return arguments.length ? (this._y = _, this) : this._y;\n\t  }\n\t\n\t  function quadtree(nodes, x, y) {\n\t    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n\t    return nodes == null ? tree : tree.addAll(nodes);\n\t  }\n\t\n\t  function Quadtree(x, y, x0, y0, x1, y1) {\n\t    this._x = x;\n\t    this._y = y;\n\t    this._x0 = x0;\n\t    this._y0 = y0;\n\t    this._x1 = x1;\n\t    this._y1 = y1;\n\t    this._root = undefined;\n\t  }\n\t\n\t  function leaf_copy(leaf) {\n\t    var copy = {data: leaf.data}, next = copy;\n\t    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n\t    return copy;\n\t  }\n\t\n\t  var treeProto = quadtree.prototype = Quadtree.prototype;\n\t\n\t  treeProto.copy = function() {\n\t    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n\t        node = this._root,\n\t        nodes,\n\t        child;\n\t\n\t    if (!node) return copy;\n\t\n\t    if (!node.length) return copy._root = leaf_copy(node), copy;\n\t\n\t    nodes = [{source: node, target: copy._root = new Array(4)}];\n\t    while (node = nodes.pop()) {\n\t      for (var i = 0; i < 4; ++i) {\n\t        if (child = node.source[i]) {\n\t          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n\t          else node.target[i] = leaf_copy(child);\n\t        }\n\t      }\n\t    }\n\t\n\t    return copy;\n\t  };\n\t\n\t  treeProto.add = tree_add;\n\t  treeProto.addAll = addAll;\n\t  treeProto.cover = tree_cover;\n\t  treeProto.data = tree_data;\n\t  treeProto.extent = tree_extent;\n\t  treeProto.find = tree_find;\n\t  treeProto.remove = tree_remove;\n\t  treeProto.removeAll = removeAll;\n\t  treeProto.root = tree_root;\n\t  treeProto.size = tree_size;\n\t  treeProto.visit = tree_visit;\n\t  treeProto.visitAfter = tree_visitAfter;\n\t  treeProto.x = tree_x;\n\t  treeProto.y = tree_y;\n\t\n\t  var slice$1 = [].slice;\n\t\n\t  var noabort = {};\n\t\n\t  function Queue(size) {\n\t    if (!(size >= 1)) throw new Error;\n\t    this._size = size;\n\t    this._call =\n\t    this._error = null;\n\t    this._tasks = [];\n\t    this._data = [];\n\t    this._waiting =\n\t    this._active =\n\t    this._ended =\n\t    this._start = 0; // inside a synchronous task callback?\n\t  }\n\t\n\t  Queue.prototype = queue.prototype = {\n\t    constructor: Queue,\n\t    defer: function(callback) {\n\t      if (typeof callback !== \"function\" || this._call) throw new Error;\n\t      if (this._error != null) return this;\n\t      var t = slice$1.call(arguments, 1);\n\t      t.push(callback);\n\t      ++this._waiting, this._tasks.push(t);\n\t      poke(this);\n\t      return this;\n\t    },\n\t    abort: function() {\n\t      if (this._error == null) abort(this, new Error(\"abort\"));\n\t      return this;\n\t    },\n\t    await: function(callback) {\n\t      if (typeof callback !== \"function\" || this._call) throw new Error;\n\t      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n\t      maybeNotify(this);\n\t      return this;\n\t    },\n\t    awaitAll: function(callback) {\n\t      if (typeof callback !== \"function\" || this._call) throw new Error;\n\t      this._call = callback;\n\t      maybeNotify(this);\n\t      return this;\n\t    }\n\t  };\n\t\n\t  function poke(q) {\n\t    if (!q._start) try { start(q); } // let the current task complete\n\t    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n\t  }\n\t\n\t  function start(q) {\n\t    while (q._start = q._waiting && q._active < q._size) {\n\t      var i = q._ended + q._active,\n\t          t = q._tasks[i],\n\t          j = t.length - 1,\n\t          c = t[j];\n\t      t[j] = end(q, i);\n\t      --q._waiting, ++q._active;\n\t      t = c.apply(null, t);\n\t      if (!q._tasks[i]) continue; // task finished synchronously\n\t      q._tasks[i] = t || noabort;\n\t    }\n\t  }\n\t\n\t  function end(q, i) {\n\t    return function(e, r) {\n\t      if (!q._tasks[i]) return; // ignore multiple callbacks\n\t      --q._active, ++q._ended;\n\t      q._tasks[i] = null;\n\t      if (q._error != null) return; // ignore secondary errors\n\t      if (e != null) {\n\t        abort(q, e);\n\t      } else {\n\t        q._data[i] = r;\n\t        if (q._waiting) poke(q);\n\t        else maybeNotify(q);\n\t      }\n\t    };\n\t  }\n\t\n\t  function abort(q, e) {\n\t    var i = q._tasks.length, t;\n\t    q._error = e; // ignore active callbacks\n\t    q._data = undefined; // allow gc\n\t    q._waiting = NaN; // prevent starting\n\t\n\t    while (--i >= 0) {\n\t      if (t = q._tasks[i]) {\n\t        q._tasks[i] = null;\n\t        if (t.abort) try { t.abort(); }\n\t        catch (e) { /* ignore */ }\n\t      }\n\t    }\n\t\n\t    q._active = NaN; // allow notification\n\t    maybeNotify(q);\n\t  }\n\t\n\t  function maybeNotify(q) {\n\t    if (!q._active && q._call) q._call(q._error, q._data);\n\t  }\n\t\n\t  function queue(concurrency) {\n\t    return new Queue(arguments.length ? +concurrency : Infinity);\n\t  }\n\t\n\t  function constant$1(x) {\n\t    return function constant() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  var epsilon$1 = 1e-12;\n\t  var pi$2 = Math.PI;\n\t  var halfPi$1 = pi$2 / 2;\n\t  var tau$2 = 2 * pi$2;\n\t\n\t  function arcInnerRadius(d) {\n\t    return d.innerRadius;\n\t  }\n\t\n\t  function arcOuterRadius(d) {\n\t    return d.outerRadius;\n\t  }\n\t\n\t  function arcStartAngle(d) {\n\t    return d.startAngle;\n\t  }\n\t\n\t  function arcEndAngle(d) {\n\t    return d.endAngle;\n\t  }\n\t\n\t  function arcPadAngle(d) {\n\t    return d && d.padAngle; // Note: optional!\n\t  }\n\t\n\t  function asin(x) {\n\t    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);\n\t  }\n\t\n\t  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t    var x10 = x1 - x0, y10 = y1 - y0,\n\t        x32 = x3 - x2, y32 = y3 - y2,\n\t        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n\t    return [x0 + t * x10, y0 + t * y10];\n\t  }\n\t\n\t  // Compute perpendicular offset line of length rc.\n\t  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n\t  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n\t    var x01 = x0 - x1,\n\t        y01 = y0 - y1,\n\t        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n\t        ox = lo * y01,\n\t        oy = -lo * x01,\n\t        x11 = x0 + ox,\n\t        y11 = y0 + oy,\n\t        x10 = x1 + ox,\n\t        y10 = y1 + oy,\n\t        x00 = (x11 + x10) / 2,\n\t        y00 = (y11 + y10) / 2,\n\t        dx = x10 - x11,\n\t        dy = y10 - y11,\n\t        d2 = dx * dx + dy * dy,\n\t        r = r1 - rc,\n\t        D = x11 * y10 - x10 * y11,\n\t        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n\t        cx0 = (D * dy - dx * d) / d2,\n\t        cy0 = (-D * dx - dy * d) / d2,\n\t        cx1 = (D * dy + dx * d) / d2,\n\t        cy1 = (-D * dx + dy * d) / d2,\n\t        dx0 = cx0 - x00,\n\t        dy0 = cy0 - y00,\n\t        dx1 = cx1 - x00,\n\t        dy1 = cy1 - y00;\n\t\n\t    // Pick the closer of the two intersection points.\n\t    // TODO Is there a faster way to determine which intersection to use?\n\t    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\t\n\t    return {\n\t      cx: cx0,\n\t      cy: cy0,\n\t      x01: -ox,\n\t      y01: -oy,\n\t      x11: cx0 * (r1 / r - 1),\n\t      y11: cy0 * (r1 / r - 1)\n\t    };\n\t  }\n\t\n\t  function arc() {\n\t    var innerRadius = arcInnerRadius,\n\t        outerRadius = arcOuterRadius,\n\t        cornerRadius = constant$1(0),\n\t        padRadius = null,\n\t        startAngle = arcStartAngle,\n\t        endAngle = arcEndAngle,\n\t        padAngle = arcPadAngle,\n\t        context = null;\n\t\n\t    function arc() {\n\t      var buffer,\n\t          r,\n\t          r0 = +innerRadius.apply(this, arguments),\n\t          r1 = +outerRadius.apply(this, arguments),\n\t          a0 = startAngle.apply(this, arguments) - halfPi$1,\n\t          a1 = endAngle.apply(this, arguments) - halfPi$1,\n\t          da = Math.abs(a1 - a0),\n\t          cw = a1 > a0;\n\t\n\t      if (!context) context = buffer = path();\n\t\n\t      // Ensure that the outer radius is always larger than the inner radius.\n\t      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\t\n\t      // Is it a point?\n\t      if (!(r1 > epsilon$1)) context.moveTo(0, 0);\n\t\n\t      // Or is it a circle or annulus?\n\t      else if (da > tau$2 - epsilon$1) {\n\t        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));\n\t        context.arc(0, 0, r1, a0, a1, !cw);\n\t        if (r0 > epsilon$1) {\n\t          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));\n\t          context.arc(0, 0, r0, a1, a0, cw);\n\t        }\n\t      }\n\t\n\t      // Or is it a circular or annular sector?\n\t      else {\n\t        var a01 = a0,\n\t            a11 = a1,\n\t            a00 = a0,\n\t            a10 = a1,\n\t            da0 = da,\n\t            da1 = da,\n\t            ap = padAngle.apply(this, arguments) / 2,\n\t            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),\n\t            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n\t            rc0 = rc,\n\t            rc1 = rc,\n\t            t0,\n\t            t1;\n\t\n\t        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n\t        if (rp > epsilon$1) {\n\t          var p0 = asin(rp / r0 * Math.sin(ap)),\n\t              p1 = asin(rp / r1 * Math.sin(ap));\n\t          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n\t          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n\t          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n\t          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n\t        }\n\t\n\t        var x01 = r1 * Math.cos(a01),\n\t            y01 = r1 * Math.sin(a01),\n\t            x10 = r0 * Math.cos(a10),\n\t            y10 = r0 * Math.sin(a10);\n\t\n\t        // Apply rounded corners?\n\t        if (rc > epsilon$1) {\n\t          var x11 = r1 * Math.cos(a11),\n\t              y11 = r1 * Math.sin(a11),\n\t              x00 = r0 * Math.cos(a00),\n\t              y00 = r0 * Math.sin(a00);\n\t\n\t          // Restrict the corner radius according to the sector angle.\n\t          if (da < pi$2) {\n\t            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n\t                ax = x01 - oc[0],\n\t                ay = y01 - oc[1],\n\t                bx = x11 - oc[0],\n\t                by = y11 - oc[1],\n\t                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n\t                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n\t            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n\t            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n\t          }\n\t        }\n\t\n\t        // Is the sector collapsed to a line?\n\t        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);\n\t\n\t        // Does the sector’s outer ring have rounded corners?\n\t        else if (rc1 > epsilon$1) {\n\t          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n\t          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\t\n\t          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\t\n\t          // Have the corners merged?\n\t          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\t\n\t          // Otherwise, draw the two corners and the ring.\n\t          else {\n\t            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n\t            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n\t            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n\t          }\n\t        }\n\t\n\t        // Or is the outer ring just a circular arc?\n\t        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\t\n\t        // Is there no inner ring, and it’s a circular sector?\n\t        // Or perhaps it’s an annular sector collapsed due to padding?\n\t        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);\n\t\n\t        // Does the sector’s inner ring (or point) have rounded corners?\n\t        else if (rc0 > epsilon$1) {\n\t          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n\t          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\t\n\t          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\t\n\t          // Have the corners merged?\n\t          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\t\n\t          // Otherwise, draw the two corners and the ring.\n\t          else {\n\t            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n\t            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n\t            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n\t          }\n\t        }\n\t\n\t        // Or is the inner ring just a circular arc?\n\t        else context.arc(0, 0, r0, a10, a00, cw);\n\t      }\n\t\n\t      context.closePath();\n\t\n\t      if (buffer) return context = null, buffer + \"\" || null;\n\t    }\n\t\n\t    arc.centroid = function() {\n\t      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n\t          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n\t      return [Math.cos(a) * r, Math.sin(a) * r];\n\t    };\n\t\n\t    arc.innerRadius = function(_) {\n\t      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n\t    };\n\t\n\t    arc.outerRadius = function(_) {\n\t      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n\t    };\n\t\n\t    arc.cornerRadius = function(_) {\n\t      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n\t    };\n\t\n\t    arc.padRadius = function(_) {\n\t      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n\t    };\n\t\n\t    arc.startAngle = function(_) {\n\t      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n\t    };\n\t\n\t    arc.endAngle = function(_) {\n\t      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n\t    };\n\t\n\t    arc.padAngle = function(_) {\n\t      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n\t    };\n\t\n\t    arc.context = function(_) {\n\t      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n\t    };\n\t\n\t    return arc;\n\t  }\n\t\n\t  function Linear(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  Linear.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; // proceed\n\t        default: this._context.lineTo(x, y); break;\n\t      }\n\t    }\n\t  };\n\t\n\t  function curveLinear(context) {\n\t    return new Linear(context);\n\t  }\n\t\n\t  function x(p) {\n\t    return p[0];\n\t  }\n\t\n\t  function y(p) {\n\t    return p[1];\n\t  }\n\t\n\t  function line() {\n\t    var x$$ = x,\n\t        y$$ = y,\n\t        defined = constant$1(true),\n\t        context = null,\n\t        curve = curveLinear,\n\t        output = null;\n\t\n\t    function line(data) {\n\t      var i,\n\t          n = data.length,\n\t          d,\n\t          defined0 = false,\n\t          buffer;\n\t\n\t      if (context == null) output = curve(buffer = path());\n\t\n\t      for (i = 0; i <= n; ++i) {\n\t        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n\t          if (defined0 = !defined0) output.lineStart();\n\t          else output.lineEnd();\n\t        }\n\t        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));\n\t      }\n\t\n\t      if (buffer) return output = null, buffer + \"\" || null;\n\t    }\n\t\n\t    line.x = function(_) {\n\t      return arguments.length ? (x$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$;\n\t    };\n\t\n\t    line.y = function(_) {\n\t      return arguments.length ? (y$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$;\n\t    };\n\t\n\t    line.defined = function(_) {\n\t      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n\t    };\n\t\n\t    line.curve = function(_) {\n\t      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n\t    };\n\t\n\t    line.context = function(_) {\n\t      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n\t    };\n\t\n\t    return line;\n\t  }\n\t\n\t  function area$1() {\n\t    var x0 = x,\n\t        x1 = null,\n\t        y0 = constant$1(0),\n\t        y1 = y,\n\t        defined = constant$1(true),\n\t        context = null,\n\t        curve = curveLinear,\n\t        output = null;\n\t\n\t    function area(data) {\n\t      var i,\n\t          j,\n\t          k,\n\t          n = data.length,\n\t          d,\n\t          defined0 = false,\n\t          buffer,\n\t          x0z = new Array(n),\n\t          y0z = new Array(n);\n\t\n\t      if (context == null) output = curve(buffer = path());\n\t\n\t      for (i = 0; i <= n; ++i) {\n\t        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n\t          if (defined0 = !defined0) {\n\t            j = i;\n\t            output.areaStart();\n\t            output.lineStart();\n\t          } else {\n\t            output.lineEnd();\n\t            output.lineStart();\n\t            for (k = i - 1; k >= j; --k) {\n\t              output.point(x0z[k], y0z[k]);\n\t            }\n\t            output.lineEnd();\n\t            output.areaEnd();\n\t          }\n\t        }\n\t        if (defined0) {\n\t          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n\t          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n\t        }\n\t      }\n\t\n\t      if (buffer) return output = null, buffer + \"\" || null;\n\t    }\n\t\n\t    function arealine() {\n\t      return line().defined(defined).curve(curve).context(context);\n\t    }\n\t\n\t    area.x = function(_) {\n\t      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n\t    };\n\t\n\t    area.x0 = function(_) {\n\t      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n\t    };\n\t\n\t    area.x1 = function(_) {\n\t      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n\t    };\n\t\n\t    area.y = function(_) {\n\t      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n\t    };\n\t\n\t    area.y0 = function(_) {\n\t      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n\t    };\n\t\n\t    area.y1 = function(_) {\n\t      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n\t    };\n\t\n\t    area.lineX0 =\n\t    area.lineY0 = function() {\n\t      return arealine().x(x0).y(y0);\n\t    };\n\t\n\t    area.lineY1 = function() {\n\t      return arealine().x(x0).y(y1);\n\t    };\n\t\n\t    area.lineX1 = function() {\n\t      return arealine().x(x1).y(y0);\n\t    };\n\t\n\t    area.defined = function(_) {\n\t      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n\t    };\n\t\n\t    area.curve = function(_) {\n\t      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n\t    };\n\t\n\t    area.context = function(_) {\n\t      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n\t    };\n\t\n\t    return area;\n\t  }\n\t\n\t  function descending$1(a, b) {\n\t    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n\t  }\n\t\n\t  function identity$1(d) {\n\t    return d;\n\t  }\n\t\n\t  function pie() {\n\t    var value = identity$1,\n\t        sortValues = descending$1,\n\t        sort = null,\n\t        startAngle = constant$1(0),\n\t        endAngle = constant$1(tau$2),\n\t        padAngle = constant$1(0);\n\t\n\t    function pie(data) {\n\t      var i,\n\t          n = data.length,\n\t          j,\n\t          k,\n\t          sum = 0,\n\t          index = new Array(n),\n\t          arcs = new Array(n),\n\t          a0 = +startAngle.apply(this, arguments),\n\t          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),\n\t          a1,\n\t          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n\t          pa = p * (da < 0 ? -1 : 1),\n\t          v;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n\t          sum += v;\n\t        }\n\t      }\n\t\n\t      // Optionally sort the arcs by previously-computed values or by data.\n\t      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n\t      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\t\n\t      // Compute the arcs! They are stored in the original data's order.\n\t      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n\t        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n\t          data: data[j],\n\t          index: i,\n\t          value: v,\n\t          startAngle: a0,\n\t          endAngle: a1,\n\t          padAngle: p\n\t        };\n\t      }\n\t\n\t      return arcs;\n\t    }\n\t\n\t    pie.value = function(_) {\n\t      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), pie) : value;\n\t    };\n\t\n\t    pie.sortValues = function(_) {\n\t      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n\t    };\n\t\n\t    pie.sort = function(_) {\n\t      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n\t    };\n\t\n\t    pie.startAngle = function(_) {\n\t      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : startAngle;\n\t    };\n\t\n\t    pie.endAngle = function(_) {\n\t      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : endAngle;\n\t    };\n\t\n\t    pie.padAngle = function(_) {\n\t      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : padAngle;\n\t    };\n\t\n\t    return pie;\n\t  }\n\t\n\t  var curveRadialLinear = curveRadial(curveLinear);\n\t\n\t  function Radial(curve) {\n\t    this._curve = curve;\n\t  }\n\t\n\t  Radial.prototype = {\n\t    areaStart: function() {\n\t      this._curve.areaStart();\n\t    },\n\t    areaEnd: function() {\n\t      this._curve.areaEnd();\n\t    },\n\t    lineStart: function() {\n\t      this._curve.lineStart();\n\t    },\n\t    lineEnd: function() {\n\t      this._curve.lineEnd();\n\t    },\n\t    point: function(a, r) {\n\t      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n\t    }\n\t  };\n\t\n\t  function curveRadial(curve) {\n\t\n\t    function radial(context) {\n\t      return new Radial(curve(context));\n\t    }\n\t\n\t    radial._curve = curve;\n\t\n\t    return radial;\n\t  }\n\t\n\t  function radialLine(l) {\n\t    var c = l.curve;\n\t\n\t    l.angle = l.x, delete l.x;\n\t    l.radius = l.y, delete l.y;\n\t\n\t    l.curve = function(_) {\n\t      return arguments.length ? c(curveRadial(_)) : c()._curve;\n\t    };\n\t\n\t    return l;\n\t  }\n\t\n\t  function radialLine$1() {\n\t    return radialLine(line().curve(curveRadialLinear));\n\t  }\n\t\n\t  function radialArea() {\n\t    var a = area$1().curve(curveRadialLinear),\n\t        c = a.curve,\n\t        x0 = a.lineX0,\n\t        x1 = a.lineX1,\n\t        y0 = a.lineY0,\n\t        y1 = a.lineY1;\n\t\n\t    a.angle = a.x, delete a.x;\n\t    a.startAngle = a.x0, delete a.x0;\n\t    a.endAngle = a.x1, delete a.x1;\n\t    a.radius = a.y, delete a.y;\n\t    a.innerRadius = a.y0, delete a.y0;\n\t    a.outerRadius = a.y1, delete a.y1;\n\t    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;\n\t    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;\n\t    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;\n\t    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;\n\t\n\t    a.curve = function(_) {\n\t      return arguments.length ? c(curveRadial(_)) : c()._curve;\n\t    };\n\t\n\t    return a;\n\t  }\n\t\n\t  var circle = {\n\t    draw: function(context, size) {\n\t      var r = Math.sqrt(size / pi$2);\n\t      context.moveTo(r, 0);\n\t      context.arc(0, 0, r, 0, tau$2);\n\t    }\n\t  };\n\t\n\t  var cross$1 = {\n\t    draw: function(context, size) {\n\t      var r = Math.sqrt(size / 5) / 2;\n\t      context.moveTo(-3 * r, -r);\n\t      context.lineTo(-r, -r);\n\t      context.lineTo(-r, -3 * r);\n\t      context.lineTo(r, -3 * r);\n\t      context.lineTo(r, -r);\n\t      context.lineTo(3 * r, -r);\n\t      context.lineTo(3 * r, r);\n\t      context.lineTo(r, r);\n\t      context.lineTo(r, 3 * r);\n\t      context.lineTo(-r, 3 * r);\n\t      context.lineTo(-r, r);\n\t      context.lineTo(-3 * r, r);\n\t      context.closePath();\n\t    }\n\t  };\n\t\n\t  var tan30 = Math.sqrt(1 / 3);\n\t  var tan30_2 = tan30 * 2;\n\t  var diamond = {\n\t    draw: function(context, size) {\n\t      var y = Math.sqrt(size / tan30_2),\n\t          x = y * tan30;\n\t      context.moveTo(0, -y);\n\t      context.lineTo(x, 0);\n\t      context.lineTo(0, y);\n\t      context.lineTo(-x, 0);\n\t      context.closePath();\n\t    }\n\t  };\n\t\n\t  var ka = 0.89081309152928522810;\n\t  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);\n\t  var kx = Math.sin(tau$2 / 10) * kr;\n\t  var ky = -Math.cos(tau$2 / 10) * kr;\n\t  var star = {\n\t    draw: function(context, size) {\n\t      var r = Math.sqrt(size * ka),\n\t          x = kx * r,\n\t          y = ky * r;\n\t      context.moveTo(0, -r);\n\t      context.lineTo(x, y);\n\t      for (var i = 1; i < 5; ++i) {\n\t        var a = tau$2 * i / 5,\n\t            c = Math.cos(a),\n\t            s = Math.sin(a);\n\t        context.lineTo(s * r, -c * r);\n\t        context.lineTo(c * x - s * y, s * x + c * y);\n\t      }\n\t      context.closePath();\n\t    }\n\t  };\n\t\n\t  var square = {\n\t    draw: function(context, size) {\n\t      var w = Math.sqrt(size),\n\t          x = -w / 2;\n\t      context.rect(x, x, w, w);\n\t    }\n\t  };\n\t\n\t  var sqrt3 = Math.sqrt(3);\n\t\n\t  var triangle = {\n\t    draw: function(context, size) {\n\t      var y = -Math.sqrt(size / (sqrt3 * 3));\n\t      context.moveTo(0, y * 2);\n\t      context.lineTo(-sqrt3 * y, -y);\n\t      context.lineTo(sqrt3 * y, -y);\n\t      context.closePath();\n\t    }\n\t  };\n\t\n\t  var c = -0.5;\n\t  var s = Math.sqrt(3) / 2;\n\t  var k = 1 / Math.sqrt(12);\n\t  var a = (k / 2 + 1) * 3;\n\t  var wye = {\n\t    draw: function(context, size) {\n\t      var r = Math.sqrt(size / a),\n\t          x0 = r / 2,\n\t          y0 = r * k,\n\t          x1 = x0,\n\t          y1 = r * k + r,\n\t          x2 = -x1,\n\t          y2 = y1;\n\t      context.moveTo(x0, y0);\n\t      context.lineTo(x1, y1);\n\t      context.lineTo(x2, y2);\n\t      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n\t      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n\t      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n\t      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n\t      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n\t      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n\t      context.closePath();\n\t    }\n\t  };\n\t\n\t  var symbols = [\n\t    circle,\n\t    cross$1,\n\t    diamond,\n\t    square,\n\t    star,\n\t    triangle,\n\t    wye\n\t  ];\n\t\n\t  function symbol() {\n\t    var type = constant$1(circle),\n\t        size = constant$1(64),\n\t        context = null;\n\t\n\t    function symbol() {\n\t      var buffer;\n\t      if (!context) context = buffer = path();\n\t      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n\t      if (buffer) return context = null, buffer + \"\" || null;\n\t    }\n\t\n\t    symbol.type = function(_) {\n\t      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n\t    };\n\t\n\t    symbol.size = function(_) {\n\t      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n\t    };\n\t\n\t    symbol.context = function(_) {\n\t      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n\t    };\n\t\n\t    return symbol;\n\t  }\n\t\n\t  function noop() {}\n\t\n\t  function point(that, x, y) {\n\t    that._context.bezierCurveTo(\n\t      (2 * that._x0 + that._x1) / 3,\n\t      (2 * that._y0 + that._y1) / 3,\n\t      (that._x0 + 2 * that._x1) / 3,\n\t      (that._y0 + 2 * that._y1) / 3,\n\t      (that._x0 + 4 * that._x1 + x) / 6,\n\t      (that._y0 + 4 * that._y1 + y) / 6\n\t    );\n\t  }\n\t\n\t  function Basis(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  Basis.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 =\n\t      this._y0 = this._y1 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 3: point(this, this._x1, this._y1); // proceed\n\t        case 2: this._context.lineTo(this._x1, this._y1); break;\n\t      }\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n\t        default: point(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = x;\n\t      this._y0 = this._y1, this._y1 = y;\n\t    }\n\t  };\n\t\n\t  function basis(context) {\n\t    return new Basis(context);\n\t  }\n\t\n\t  function BasisClosed(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  BasisClosed.prototype = {\n\t    areaStart: noop,\n\t    areaEnd: noop,\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n\t      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 1: {\n\t          this._context.moveTo(this._x2, this._y2);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 2: {\n\t          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n\t          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 3: {\n\t          this.point(this._x2, this._y2);\n\t          this.point(this._x3, this._y3);\n\t          this.point(this._x4, this._y4);\n\t          break;\n\t        }\n\t      }\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n\t        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n\t        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n\t        default: point(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = x;\n\t      this._y0 = this._y1, this._y1 = y;\n\t    }\n\t  };\n\t\n\t  function basisClosed(context) {\n\t    return new BasisClosed(context);\n\t  }\n\t\n\t  function BasisOpen(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  BasisOpen.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 =\n\t      this._y0 = this._y1 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n\t        case 3: this._point = 4; // proceed\n\t        default: point(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = x;\n\t      this._y0 = this._y1, this._y1 = y;\n\t    }\n\t  };\n\t\n\t  function basisOpen(context) {\n\t    return new BasisOpen(context);\n\t  }\n\t\n\t  function Bundle(context, beta) {\n\t    this._basis = new Basis(context);\n\t    this._beta = beta;\n\t  }\n\t\n\t  Bundle.prototype = {\n\t    lineStart: function() {\n\t      this._x = [];\n\t      this._y = [];\n\t      this._basis.lineStart();\n\t    },\n\t    lineEnd: function() {\n\t      var x = this._x,\n\t          y = this._y,\n\t          j = x.length - 1;\n\t\n\t      if (j > 0) {\n\t        var x0 = x[0],\n\t            y0 = y[0],\n\t            dx = x[j] - x0,\n\t            dy = y[j] - y0,\n\t            i = -1,\n\t            t;\n\t\n\t        while (++i <= j) {\n\t          t = i / j;\n\t          this._basis.point(\n\t            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n\t            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n\t          );\n\t        }\n\t      }\n\t\n\t      this._x = this._y = null;\n\t      this._basis.lineEnd();\n\t    },\n\t    point: function(x, y) {\n\t      this._x.push(+x);\n\t      this._y.push(+y);\n\t    }\n\t  };\n\t\n\t  var bundle = (function custom(beta) {\n\t\n\t    function bundle(context) {\n\t      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n\t    }\n\t\n\t    bundle.beta = function(beta) {\n\t      return custom(+beta);\n\t    };\n\t\n\t    return bundle;\n\t  })(0.85);\n\t\n\t  function point$1(that, x, y) {\n\t    that._context.bezierCurveTo(\n\t      that._x1 + that._k * (that._x2 - that._x0),\n\t      that._y1 + that._k * (that._y2 - that._y0),\n\t      that._x2 + that._k * (that._x1 - x),\n\t      that._y2 + that._k * (that._y1 - y),\n\t      that._x2,\n\t      that._y2\n\t    );\n\t  }\n\t\n\t  function Cardinal(context, tension) {\n\t    this._context = context;\n\t    this._k = (1 - tension) / 6;\n\t  }\n\t\n\t  Cardinal.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 =\n\t      this._y0 = this._y1 = this._y2 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 2: this._context.lineTo(this._x2, this._y2); break;\n\t        case 3: point$1(this, this._x1, this._y1); break;\n\t      }\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n\t        case 2: this._point = 3; // proceed\n\t        default: point$1(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var cardinal = (function custom(tension) {\n\t\n\t    function cardinal(context) {\n\t      return new Cardinal(context, tension);\n\t    }\n\t\n\t    cardinal.tension = function(tension) {\n\t      return custom(+tension);\n\t    };\n\t\n\t    return cardinal;\n\t  })(0);\n\t\n\t  function CardinalClosed(context, tension) {\n\t    this._context = context;\n\t    this._k = (1 - tension) / 6;\n\t  }\n\t\n\t  CardinalClosed.prototype = {\n\t    areaStart: noop,\n\t    areaEnd: noop,\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n\t      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 1: {\n\t          this._context.moveTo(this._x3, this._y3);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 2: {\n\t          this._context.lineTo(this._x3, this._y3);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 3: {\n\t          this.point(this._x3, this._y3);\n\t          this.point(this._x4, this._y4);\n\t          this.point(this._x5, this._y5);\n\t          break;\n\t        }\n\t      }\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n\t        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n\t        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n\t        default: point$1(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var cardinalClosed = (function custom(tension) {\n\t\n\t    function cardinal(context) {\n\t      return new CardinalClosed(context, tension);\n\t    }\n\t\n\t    cardinal.tension = function(tension) {\n\t      return custom(+tension);\n\t    };\n\t\n\t    return cardinal;\n\t  })(0);\n\t\n\t  function CardinalOpen(context, tension) {\n\t    this._context = context;\n\t    this._k = (1 - tension) / 6;\n\t  }\n\t\n\t  CardinalOpen.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 =\n\t      this._y0 = this._y1 = this._y2 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n\t        case 3: this._point = 4; // proceed\n\t        default: point$1(this, x, y); break;\n\t      }\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var cardinalOpen = (function custom(tension) {\n\t\n\t    function cardinal(context) {\n\t      return new CardinalOpen(context, tension);\n\t    }\n\t\n\t    cardinal.tension = function(tension) {\n\t      return custom(+tension);\n\t    };\n\t\n\t    return cardinal;\n\t  })(0);\n\t\n\t  function point$2(that, x, y) {\n\t    var x1 = that._x1,\n\t        y1 = that._y1,\n\t        x2 = that._x2,\n\t        y2 = that._y2;\n\t\n\t    if (that._l01_a > epsilon$1) {\n\t      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n\t          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n\t      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n\t      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n\t    }\n\t\n\t    if (that._l23_a > epsilon$1) {\n\t      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n\t          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n\t      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n\t      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n\t    }\n\t\n\t    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n\t  }\n\t\n\t  function CatmullRom(context, alpha) {\n\t    this._context = context;\n\t    this._alpha = alpha;\n\t  }\n\t\n\t  CatmullRom.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 =\n\t      this._y0 = this._y1 = this._y2 = NaN;\n\t      this._l01_a = this._l12_a = this._l23_a =\n\t      this._l01_2a = this._l12_2a = this._l23_2a =\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 2: this._context.lineTo(this._x2, this._y2); break;\n\t        case 3: this.point(this, this._x2, this._y2); break;\n\t      }\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t\n\t      if (this._point) {\n\t        var x23 = this._x2 - x,\n\t            y23 = this._y2 - y;\n\t        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n\t      }\n\t\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; // proceed\n\t        default: point$2(this, x, y); break;\n\t      }\n\t\n\t      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n\t      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var catmullRom = (function custom(alpha) {\n\t\n\t    function catmullRom(context) {\n\t      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n\t    }\n\t\n\t    catmullRom.alpha = function(alpha) {\n\t      return custom(+alpha);\n\t    };\n\t\n\t    return catmullRom;\n\t  })(0.5);\n\t\n\t  function CatmullRomClosed(context, alpha) {\n\t    this._context = context;\n\t    this._alpha = alpha;\n\t  }\n\t\n\t  CatmullRomClosed.prototype = {\n\t    areaStart: noop,\n\t    areaEnd: noop,\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n\t      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n\t      this._l01_a = this._l12_a = this._l23_a =\n\t      this._l01_2a = this._l12_2a = this._l23_2a =\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 1: {\n\t          this._context.moveTo(this._x3, this._y3);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 2: {\n\t          this._context.lineTo(this._x3, this._y3);\n\t          this._context.closePath();\n\t          break;\n\t        }\n\t        case 3: {\n\t          this.point(this._x3, this._y3);\n\t          this.point(this._x4, this._y4);\n\t          this.point(this._x5, this._y5);\n\t          break;\n\t        }\n\t      }\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t\n\t      if (this._point) {\n\t        var x23 = this._x2 - x,\n\t            y23 = this._y2 - y;\n\t        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n\t      }\n\t\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n\t        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n\t        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n\t        default: point$2(this, x, y); break;\n\t      }\n\t\n\t      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n\t      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var catmullRomClosed = (function custom(alpha) {\n\t\n\t    function catmullRom(context) {\n\t      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n\t    }\n\t\n\t    catmullRom.alpha = function(alpha) {\n\t      return custom(+alpha);\n\t    };\n\t\n\t    return catmullRom;\n\t  })(0.5);\n\t\n\t  function CatmullRomOpen(context, alpha) {\n\t    this._context = context;\n\t    this._alpha = alpha;\n\t  }\n\t\n\t  CatmullRomOpen.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 = this._x2 =\n\t      this._y0 = this._y1 = this._y2 = NaN;\n\t      this._l01_a = this._l12_a = this._l23_a =\n\t      this._l01_2a = this._l12_2a = this._l23_2a =\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t\n\t      if (this._point) {\n\t        var x23 = this._x2 - x,\n\t            y23 = this._y2 - y;\n\t        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n\t      }\n\t\n\t      switch (this._point) {\n\t        case 0: this._point = 1; break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n\t        case 3: this._point = 4; // proceed\n\t        default: point$2(this, x, y); break;\n\t      }\n\t\n\t      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n\t      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n\t      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n\t      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n\t    }\n\t  };\n\t\n\t  var catmullRomOpen = (function custom(alpha) {\n\t\n\t    function catmullRom(context) {\n\t      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n\t    }\n\t\n\t    catmullRom.alpha = function(alpha) {\n\t      return custom(+alpha);\n\t    };\n\t\n\t    return catmullRom;\n\t  })(0.5);\n\t\n\t  function LinearClosed(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  LinearClosed.prototype = {\n\t    areaStart: noop,\n\t    areaEnd: noop,\n\t    lineStart: function() {\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (this._point) this._context.closePath();\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      if (this._point) this._context.lineTo(x, y);\n\t      else this._point = 1, this._context.moveTo(x, y);\n\t    }\n\t  };\n\t\n\t  function linearClosed(context) {\n\t    return new LinearClosed(context);\n\t  }\n\t\n\t  function sign(x) {\n\t    return x < 0 ? -1 : 1;\n\t  }\n\t\n\t  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n\t  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n\t  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n\t  // NOV(II), P. 443, 1990.\n\t  function slope3(that, x2, y2) {\n\t    var h0 = that._x1 - that._x0,\n\t        h1 = x2 - that._x1,\n\t        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n\t        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n\t        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n\t    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n\t  }\n\t\n\t  // Calculate a one-sided slope.\n\t  function slope2(that, t) {\n\t    var h = that._x1 - that._x0;\n\t    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n\t  }\n\t\n\t  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n\t  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n\t  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n\t  function point$3(that, t0, t1) {\n\t    var x0 = that._x0,\n\t        y0 = that._y0,\n\t        x1 = that._x1,\n\t        y1 = that._y1,\n\t        dx = (x1 - x0) / 3;\n\t    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n\t  }\n\t\n\t  function MonotoneX(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  MonotoneX.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x0 = this._x1 =\n\t      this._y0 = this._y1 =\n\t      this._t0 = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      switch (this._point) {\n\t        case 2: this._context.lineTo(this._x1, this._y1); break;\n\t        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n\t      }\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      var t1 = NaN;\n\t\n\t      x = +x, y = +y;\n\t      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; break;\n\t        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n\t        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n\t      }\n\t\n\t      this._x0 = this._x1, this._x1 = x;\n\t      this._y0 = this._y1, this._y1 = y;\n\t      this._t0 = t1;\n\t    }\n\t  }\n\t\n\t  function MonotoneY(context) {\n\t    this._context = new ReflectContext(context);\n\t  }\n\t\n\t  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n\t    MonotoneX.prototype.point.call(this, y, x);\n\t  };\n\t\n\t  function ReflectContext(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  ReflectContext.prototype = {\n\t    moveTo: function(x, y) { this._context.moveTo(y, x); },\n\t    closePath: function() { this._context.closePath(); },\n\t    lineTo: function(x, y) { this._context.lineTo(y, x); },\n\t    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n\t  };\n\t\n\t  function monotoneX(context) {\n\t    return new MonotoneX(context);\n\t  }\n\t\n\t  function monotoneY(context) {\n\t    return new MonotoneY(context);\n\t  }\n\t\n\t  function Natural(context) {\n\t    this._context = context;\n\t  }\n\t\n\t  Natural.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x = [];\n\t      this._y = [];\n\t    },\n\t    lineEnd: function() {\n\t      var x = this._x,\n\t          y = this._y,\n\t          n = x.length;\n\t\n\t      if (n) {\n\t        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n\t        if (n === 2) {\n\t          this._context.lineTo(x[1], y[1]);\n\t        } else {\n\t          var px = controlPoints(x),\n\t              py = controlPoints(y);\n\t          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n\t            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n\t      this._line = 1 - this._line;\n\t      this._x = this._y = null;\n\t    },\n\t    point: function(x, y) {\n\t      this._x.push(+x);\n\t      this._y.push(+y);\n\t    }\n\t  };\n\t\n\t  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n\t  function controlPoints(x) {\n\t    var i,\n\t        n = x.length - 1,\n\t        m,\n\t        a = new Array(n),\n\t        b = new Array(n),\n\t        r = new Array(n);\n\t    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n\t    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n\t    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n\t    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n\t    a[n - 1] = r[n - 1] / b[n - 1];\n\t    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n\t    b[n - 1] = (x[n] + a[n - 1]) / 2;\n\t    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n\t    return [a, b];\n\t  }\n\t\n\t  function natural(context) {\n\t    return new Natural(context);\n\t  }\n\t\n\t  function Step(context, t) {\n\t    this._context = context;\n\t    this._t = t;\n\t  }\n\t\n\t  Step.prototype = {\n\t    areaStart: function() {\n\t      this._line = 0;\n\t    },\n\t    areaEnd: function() {\n\t      this._line = NaN;\n\t    },\n\t    lineStart: function() {\n\t      this._x = this._y = NaN;\n\t      this._point = 0;\n\t    },\n\t    lineEnd: function() {\n\t      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n\t      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n\t      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n\t    },\n\t    point: function(x, y) {\n\t      x = +x, y = +y;\n\t      switch (this._point) {\n\t        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n\t        case 1: this._point = 2; // proceed\n\t        default: {\n\t          if (this._t <= 0) {\n\t            this._context.lineTo(this._x, y);\n\t            this._context.lineTo(x, y);\n\t          } else {\n\t            var x1 = this._x * (1 - this._t) + x * this._t;\n\t            this._context.lineTo(x1, this._y);\n\t            this._context.lineTo(x1, y);\n\t          }\n\t          break;\n\t        }\n\t      }\n\t      this._x = x, this._y = y;\n\t    }\n\t  };\n\t\n\t  function step(context) {\n\t    return new Step(context, 0.5);\n\t  }\n\t\n\t  function stepBefore(context) {\n\t    return new Step(context, 0);\n\t  }\n\t\n\t  function stepAfter(context) {\n\t    return new Step(context, 1);\n\t  }\n\t\n\t  var slice$2 = Array.prototype.slice;\n\t\n\t  function none(series, order) {\n\t    if (!((n = series.length) > 1)) return;\n\t    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n\t      s0 = s1, s1 = series[order[i]];\n\t      for (var j = 0; j < m; ++j) {\n\t        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n\t      }\n\t    }\n\t  }\n\t\n\t  function none$1(series) {\n\t    var n = series.length, o = new Array(n);\n\t    while (--n >= 0) o[n] = n;\n\t    return o;\n\t  }\n\t\n\t  function stackValue(d, key) {\n\t    return d[key];\n\t  }\n\t\n\t  function stack() {\n\t    var keys = constant$1([]),\n\t        order = none$1,\n\t        offset = none,\n\t        value = stackValue;\n\t\n\t    function stack(data) {\n\t      var kz = keys.apply(this, arguments),\n\t          i,\n\t          m = data.length,\n\t          n = kz.length,\n\t          sz = new Array(n),\n\t          oz;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n\t          si[j] = sij = [0, +value(data[j], ki, j, data)];\n\t          sij.data = data[j];\n\t        }\n\t        si.key = ki;\n\t      }\n\t\n\t      for (i = 0, oz = order(sz); i < n; ++i) {\n\t        sz[oz[i]].index = i;\n\t      }\n\t\n\t      offset(sz, oz);\n\t      return sz;\n\t    }\n\t\n\t    stack.keys = function(_) {\n\t      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : keys;\n\t    };\n\t\n\t    stack.value = function(_) {\n\t      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), stack) : value;\n\t    };\n\t\n\t    stack.order = function(_) {\n\t      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : order;\n\t    };\n\t\n\t    stack.offset = function(_) {\n\t      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n\t    };\n\t\n\t    return stack;\n\t  }\n\t\n\t  function expand(series, order) {\n\t    if (!((n = series.length) > 0)) return;\n\t    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n\t      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n\t      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n\t    }\n\t    none(series, order);\n\t  }\n\t\n\t  function silhouette(series, order) {\n\t    if (!((n = series.length) > 0)) return;\n\t    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n\t      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n\t      s0[j][1] += s0[j][0] = -y / 2;\n\t    }\n\t    none(series, order);\n\t  }\n\t\n\t  function wiggle(series, order) {\n\t    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n\t    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n\t      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n\t        var si = series[order[i]],\n\t            sij0 = si[j][1] || 0,\n\t            sij1 = si[j - 1][1] || 0,\n\t            s3 = (sij0 - sij1) / 2;\n\t        for (var k = 0; k < i; ++k) {\n\t          var sk = series[order[k]],\n\t              skj0 = sk[j][1] || 0,\n\t              skj1 = sk[j - 1][1] || 0;\n\t          s3 += skj0 - skj1;\n\t        }\n\t        s1 += sij0, s2 += s3 * sij0;\n\t      }\n\t      s0[j - 1][1] += s0[j - 1][0] = y;\n\t      if (s1) y -= s2 / s1;\n\t    }\n\t    s0[j - 1][1] += s0[j - 1][0] = y;\n\t    none(series, order);\n\t  }\n\t\n\t  function ascending$1(series) {\n\t    var sums = series.map(sum$1);\n\t    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });\n\t  }\n\t\n\t  function sum$1(series) {\n\t    var s = 0, i = -1, n = series.length, v;\n\t    while (++i < n) if (v = +series[i][1]) s += v;\n\t    return s;\n\t  }\n\t\n\t  function descending$2(series) {\n\t    return ascending$1(series).reverse();\n\t  }\n\t\n\t  function insideOut(series) {\n\t    var n = series.length,\n\t        i,\n\t        j,\n\t        sums = series.map(sum$1),\n\t        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n\t        top = 0,\n\t        bottom = 0,\n\t        tops = [],\n\t        bottoms = [];\n\t\n\t    for (i = 0; i < n; ++i) {\n\t      j = order[i];\n\t      if (top < bottom) {\n\t        top += sums[j];\n\t        tops.push(j);\n\t      } else {\n\t        bottom += sums[j];\n\t        bottoms.push(j);\n\t      }\n\t    }\n\t\n\t    return bottoms.reverse().concat(tops);\n\t  }\n\t\n\t  function reverse(series) {\n\t    return none$1(series).reverse();\n\t  }\n\t\n\t  function define(constructor, factory, prototype) {\n\t    constructor.prototype = factory.prototype = prototype;\n\t    prototype.constructor = constructor;\n\t  }\n\t\n\t  function extend(parent, definition) {\n\t    var prototype = Object.create(parent.prototype);\n\t    for (var key in definition) prototype[key] = definition[key];\n\t    return prototype;\n\t  }\n\t\n\t  function Color() {}\n\t\n\t  var darker = 0.7;\n\t  var brighter = 1 / darker;\n\t\n\t  var reHex3 = /^#([0-9a-f]{3})$/;\n\t  var reHex6 = /^#([0-9a-f]{6})$/;\n\t  var reRgbInteger = /^rgb\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*\\)$/;\n\t  var reRgbPercent = /^rgb\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\t  var reRgbaInteger = /^rgba\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n\t  var reRgbaPercent = /^rgba\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n\t  var reHslPercent = /^hsl\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\t  var reHslaPercent = /^hsla\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n\t  var named = {\n\t    aliceblue: 0xf0f8ff,\n\t    antiquewhite: 0xfaebd7,\n\t    aqua: 0x00ffff,\n\t    aquamarine: 0x7fffd4,\n\t    azure: 0xf0ffff,\n\t    beige: 0xf5f5dc,\n\t    bisque: 0xffe4c4,\n\t    black: 0x000000,\n\t    blanchedalmond: 0xffebcd,\n\t    blue: 0x0000ff,\n\t    blueviolet: 0x8a2be2,\n\t    brown: 0xa52a2a,\n\t    burlywood: 0xdeb887,\n\t    cadetblue: 0x5f9ea0,\n\t    chartreuse: 0x7fff00,\n\t    chocolate: 0xd2691e,\n\t    coral: 0xff7f50,\n\t    cornflowerblue: 0x6495ed,\n\t    cornsilk: 0xfff8dc,\n\t    crimson: 0xdc143c,\n\t    cyan: 0x00ffff,\n\t    darkblue: 0x00008b,\n\t    darkcyan: 0x008b8b,\n\t    darkgoldenrod: 0xb8860b,\n\t    darkgray: 0xa9a9a9,\n\t    darkgreen: 0x006400,\n\t    darkgrey: 0xa9a9a9,\n\t    darkkhaki: 0xbdb76b,\n\t    darkmagenta: 0x8b008b,\n\t    darkolivegreen: 0x556b2f,\n\t    darkorange: 0xff8c00,\n\t    darkorchid: 0x9932cc,\n\t    darkred: 0x8b0000,\n\t    darksalmon: 0xe9967a,\n\t    darkseagreen: 0x8fbc8f,\n\t    darkslateblue: 0x483d8b,\n\t    darkslategray: 0x2f4f4f,\n\t    darkslategrey: 0x2f4f4f,\n\t    darkturquoise: 0x00ced1,\n\t    darkviolet: 0x9400d3,\n\t    deeppink: 0xff1493,\n\t    deepskyblue: 0x00bfff,\n\t    dimgray: 0x696969,\n\t    dimgrey: 0x696969,\n\t    dodgerblue: 0x1e90ff,\n\t    firebrick: 0xb22222,\n\t    floralwhite: 0xfffaf0,\n\t    forestgreen: 0x228b22,\n\t    fuchsia: 0xff00ff,\n\t    gainsboro: 0xdcdcdc,\n\t    ghostwhite: 0xf8f8ff,\n\t    gold: 0xffd700,\n\t    goldenrod: 0xdaa520,\n\t    gray: 0x808080,\n\t    green: 0x008000,\n\t    greenyellow: 0xadff2f,\n\t    grey: 0x808080,\n\t    honeydew: 0xf0fff0,\n\t    hotpink: 0xff69b4,\n\t    indianred: 0xcd5c5c,\n\t    indigo: 0x4b0082,\n\t    ivory: 0xfffff0,\n\t    khaki: 0xf0e68c,\n\t    lavender: 0xe6e6fa,\n\t    lavenderblush: 0xfff0f5,\n\t    lawngreen: 0x7cfc00,\n\t    lemonchiffon: 0xfffacd,\n\t    lightblue: 0xadd8e6,\n\t    lightcoral: 0xf08080,\n\t    lightcyan: 0xe0ffff,\n\t    lightgoldenrodyellow: 0xfafad2,\n\t    lightgray: 0xd3d3d3,\n\t    lightgreen: 0x90ee90,\n\t    lightgrey: 0xd3d3d3,\n\t    lightpink: 0xffb6c1,\n\t    lightsalmon: 0xffa07a,\n\t    lightseagreen: 0x20b2aa,\n\t    lightskyblue: 0x87cefa,\n\t    lightslategray: 0x778899,\n\t    lightslategrey: 0x778899,\n\t    lightsteelblue: 0xb0c4de,\n\t    lightyellow: 0xffffe0,\n\t    lime: 0x00ff00,\n\t    limegreen: 0x32cd32,\n\t    linen: 0xfaf0e6,\n\t    magenta: 0xff00ff,\n\t    maroon: 0x800000,\n\t    mediumaquamarine: 0x66cdaa,\n\t    mediumblue: 0x0000cd,\n\t    mediumorchid: 0xba55d3,\n\t    mediumpurple: 0x9370db,\n\t    mediumseagreen: 0x3cb371,\n\t    mediumslateblue: 0x7b68ee,\n\t    mediumspringgreen: 0x00fa9a,\n\t    mediumturquoise: 0x48d1cc,\n\t    mediumvioletred: 0xc71585,\n\t    midnightblue: 0x191970,\n\t    mintcream: 0xf5fffa,\n\t    mistyrose: 0xffe4e1,\n\t    moccasin: 0xffe4b5,\n\t    navajowhite: 0xffdead,\n\t    navy: 0x000080,\n\t    oldlace: 0xfdf5e6,\n\t    olive: 0x808000,\n\t    olivedrab: 0x6b8e23,\n\t    orange: 0xffa500,\n\t    orangered: 0xff4500,\n\t    orchid: 0xda70d6,\n\t    palegoldenrod: 0xeee8aa,\n\t    palegreen: 0x98fb98,\n\t    paleturquoise: 0xafeeee,\n\t    palevioletred: 0xdb7093,\n\t    papayawhip: 0xffefd5,\n\t    peachpuff: 0xffdab9,\n\t    peru: 0xcd853f,\n\t    pink: 0xffc0cb,\n\t    plum: 0xdda0dd,\n\t    powderblue: 0xb0e0e6,\n\t    purple: 0x800080,\n\t    rebeccapurple: 0x663399,\n\t    red: 0xff0000,\n\t    rosybrown: 0xbc8f8f,\n\t    royalblue: 0x4169e1,\n\t    saddlebrown: 0x8b4513,\n\t    salmon: 0xfa8072,\n\t    sandybrown: 0xf4a460,\n\t    seagreen: 0x2e8b57,\n\t    seashell: 0xfff5ee,\n\t    sienna: 0xa0522d,\n\t    silver: 0xc0c0c0,\n\t    skyblue: 0x87ceeb,\n\t    slateblue: 0x6a5acd,\n\t    slategray: 0x708090,\n\t    slategrey: 0x708090,\n\t    snow: 0xfffafa,\n\t    springgreen: 0x00ff7f,\n\t    steelblue: 0x4682b4,\n\t    tan: 0xd2b48c,\n\t    teal: 0x008080,\n\t    thistle: 0xd8bfd8,\n\t    tomato: 0xff6347,\n\t    turquoise: 0x40e0d0,\n\t    violet: 0xee82ee,\n\t    wheat: 0xf5deb3,\n\t    white: 0xffffff,\n\t    whitesmoke: 0xf5f5f5,\n\t    yellow: 0xffff00,\n\t    yellowgreen: 0x9acd32\n\t  };\n\t\n\t  define(Color, color, {\n\t    displayable: function() {\n\t      return this.rgb().displayable();\n\t    },\n\t    toString: function() {\n\t      return this.rgb() + \"\";\n\t    }\n\t  });\n\t\n\t  function color(format) {\n\t    var m;\n\t    format = (format + \"\").trim().toLowerCase();\n\t    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n\t        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n\t        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n\t        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n\t        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n\t        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n\t        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n\t        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n\t        : named.hasOwnProperty(format) ? rgbn(named[format])\n\t        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n\t        : null;\n\t  }\n\t\n\t  function rgbn(n) {\n\t    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n\t  }\n\t\n\t  function rgba(r, g, b, a) {\n\t    if (a <= 0) r = g = b = NaN;\n\t    return new Rgb(r, g, b, a);\n\t  }\n\t\n\t  function rgbConvert(o) {\n\t    if (!(o instanceof Color)) o = color(o);\n\t    if (!o) return new Rgb;\n\t    o = o.rgb();\n\t    return new Rgb(o.r, o.g, o.b, o.opacity);\n\t  }\n\t\n\t  function colorRgb(r, g, b, opacity) {\n\t    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n\t  }\n\t\n\t  function Rgb(r, g, b, opacity) {\n\t    this.r = +r;\n\t    this.g = +g;\n\t    this.b = +b;\n\t    this.opacity = +opacity;\n\t  }\n\t\n\t  define(Rgb, colorRgb, extend(Color, {\n\t    brighter: function(k) {\n\t      k = k == null ? brighter : Math.pow(brighter, k);\n\t      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n\t    },\n\t    darker: function(k) {\n\t      k = k == null ? darker : Math.pow(darker, k);\n\t      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n\t    },\n\t    rgb: function() {\n\t      return this;\n\t    },\n\t    displayable: function() {\n\t      return (0 <= this.r && this.r <= 255)\n\t          && (0 <= this.g && this.g <= 255)\n\t          && (0 <= this.b && this.b <= 255)\n\t          && (0 <= this.opacity && this.opacity <= 1);\n\t    },\n\t    toString: function() {\n\t      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n\t      return (a === 1 ? \"rgb(\" : \"rgba(\")\n\t          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n\t          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n\t          + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n\t          + (a === 1 ? \")\" : \", \" + a + \")\");\n\t    }\n\t  }));\n\t\n\t  function hsla(h, s, l, a) {\n\t    if (a <= 0) h = s = l = NaN;\n\t    else if (l <= 0 || l >= 1) h = s = NaN;\n\t    else if (s <= 0) h = NaN;\n\t    return new Hsl(h, s, l, a);\n\t  }\n\t\n\t  function hslConvert(o) {\n\t    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n\t    if (!(o instanceof Color)) o = color(o);\n\t    if (!o) return new Hsl;\n\t    if (o instanceof Hsl) return o;\n\t    o = o.rgb();\n\t    var r = o.r / 255,\n\t        g = o.g / 255,\n\t        b = o.b / 255,\n\t        min = Math.min(r, g, b),\n\t        max = Math.max(r, g, b),\n\t        h = NaN,\n\t        s = max - min,\n\t        l = (max + min) / 2;\n\t    if (s) {\n\t      if (r === max) h = (g - b) / s + (g < b) * 6;\n\t      else if (g === max) h = (b - r) / s + 2;\n\t      else h = (r - g) / s + 4;\n\t      s /= l < 0.5 ? max + min : 2 - max - min;\n\t      h *= 60;\n\t    } else {\n\t      s = l > 0 && l < 1 ? 0 : h;\n\t    }\n\t    return new Hsl(h, s, l, o.opacity);\n\t  }\n\t\n\t  function colorHsl(h, s, l, opacity) {\n\t    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n\t  }\n\t\n\t  function Hsl(h, s, l, opacity) {\n\t    this.h = +h;\n\t    this.s = +s;\n\t    this.l = +l;\n\t    this.opacity = +opacity;\n\t  }\n\t\n\t  define(Hsl, colorHsl, extend(Color, {\n\t    brighter: function(k) {\n\t      k = k == null ? brighter : Math.pow(brighter, k);\n\t      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n\t    },\n\t    darker: function(k) {\n\t      k = k == null ? darker : Math.pow(darker, k);\n\t      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n\t    },\n\t    rgb: function() {\n\t      var h = this.h % 360 + (this.h < 0) * 360,\n\t          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n\t          l = this.l,\n\t          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n\t          m1 = 2 * l - m2;\n\t      return new Rgb(\n\t        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n\t        hsl2rgb(h, m1, m2),\n\t        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n\t        this.opacity\n\t      );\n\t    },\n\t    displayable: function() {\n\t      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n\t          && (0 <= this.l && this.l <= 1)\n\t          && (0 <= this.opacity && this.opacity <= 1);\n\t    }\n\t  }));\n\t\n\t  /* From FvD 13.37, CSS Color Module Level 3 */\n\t  function hsl2rgb(h, m1, m2) {\n\t    return (h < 60 ? m1 + (m2 - m1) * h / 60\n\t        : h < 180 ? m2\n\t        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n\t        : m1) * 255;\n\t  }\n\t\n\t  var deg2rad = Math.PI / 180;\n\t  var rad2deg = 180 / Math.PI;\n\t\n\t  var Kn = 18;\n\t  var Xn = 0.950470;\n\t  var Yn = 1;\n\t  var Zn = 1.088830;\n\t  var t0 = 4 / 29;\n\t  var t1 = 6 / 29;\n\t  var t2 = 3 * t1 * t1;\n\t  var t3 = t1 * t1 * t1;\n\t  function labConvert(o) {\n\t    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n\t    if (o instanceof Hcl) {\n\t      var h = o.h * deg2rad;\n\t      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n\t    }\n\t    if (!(o instanceof Rgb)) o = rgbConvert(o);\n\t    var b = rgb2xyz(o.r),\n\t        a = rgb2xyz(o.g),\n\t        l = rgb2xyz(o.b),\n\t        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n\t        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n\t        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n\t    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n\t  }\n\t\n\t  function lab(l, a, b, opacity) {\n\t    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n\t  }\n\t\n\t  function Lab(l, a, b, opacity) {\n\t    this.l = +l;\n\t    this.a = +a;\n\t    this.b = +b;\n\t    this.opacity = +opacity;\n\t  }\n\t\n\t  define(Lab, lab, extend(Color, {\n\t    brighter: function(k) {\n\t      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n\t    },\n\t    darker: function(k) {\n\t      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n\t    },\n\t    rgb: function() {\n\t      var y = (this.l + 16) / 116,\n\t          x = isNaN(this.a) ? y : y + this.a / 500,\n\t          z = isNaN(this.b) ? y : y - this.b / 200;\n\t      y = Yn * lab2xyz(y);\n\t      x = Xn * lab2xyz(x);\n\t      z = Zn * lab2xyz(z);\n\t      return new Rgb(\n\t        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n\t        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n\t        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n\t        this.opacity\n\t      );\n\t    }\n\t  }));\n\t\n\t  function xyz2lab(t) {\n\t    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n\t  }\n\t\n\t  function lab2xyz(t) {\n\t    return t > t1 ? t * t * t : t2 * (t - t0);\n\t  }\n\t\n\t  function xyz2rgb(x) {\n\t    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n\t  }\n\t\n\t  function rgb2xyz(x) {\n\t    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n\t  }\n\t\n\t  function hclConvert(o) {\n\t    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n\t    if (!(o instanceof Lab)) o = labConvert(o);\n\t    var h = Math.atan2(o.b, o.a) * rad2deg;\n\t    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n\t  }\n\t\n\t  function colorHcl(h, c, l, opacity) {\n\t    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n\t  }\n\t\n\t  function Hcl(h, c, l, opacity) {\n\t    this.h = +h;\n\t    this.c = +c;\n\t    this.l = +l;\n\t    this.opacity = +opacity;\n\t  }\n\t\n\t  define(Hcl, colorHcl, extend(Color, {\n\t    brighter: function(k) {\n\t      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n\t    },\n\t    darker: function(k) {\n\t      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n\t    },\n\t    rgb: function() {\n\t      return labConvert(this).rgb();\n\t    }\n\t  }));\n\t\n\t  var A = -0.14861;\n\t  var B = +1.78277;\n\t  var C = -0.29227;\n\t  var D = -0.90649;\n\t  var E = +1.97294;\n\t  var ED = E * D;\n\t  var EB = E * B;\n\t  var BC_DA = B * C - D * A;\n\t  function cubehelixConvert(o) {\n\t    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n\t    if (!(o instanceof Rgb)) o = rgbConvert(o);\n\t    var r = o.r / 255,\n\t        g = o.g / 255,\n\t        b = o.b / 255,\n\t        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n\t        bl = b - l,\n\t        k = (E * (g - l) - C * bl) / D,\n\t        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n\t        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n\t    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n\t  }\n\t\n\t  function cubehelix(h, s, l, opacity) {\n\t    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n\t  }\n\t\n\t  function Cubehelix(h, s, l, opacity) {\n\t    this.h = +h;\n\t    this.s = +s;\n\t    this.l = +l;\n\t    this.opacity = +opacity;\n\t  }\n\t\n\t  define(Cubehelix, cubehelix, extend(Color, {\n\t    brighter: function(k) {\n\t      k = k == null ? brighter : Math.pow(brighter, k);\n\t      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n\t    },\n\t    darker: function(k) {\n\t      k = k == null ? darker : Math.pow(darker, k);\n\t      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n\t    },\n\t    rgb: function() {\n\t      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n\t          l = +this.l,\n\t          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n\t          cosh = Math.cos(h),\n\t          sinh = Math.sin(h);\n\t      return new Rgb(\n\t        255 * (l + a * (A * cosh + B * sinh)),\n\t        255 * (l + a * (C * cosh + D * sinh)),\n\t        255 * (l + a * (E * cosh)),\n\t        this.opacity\n\t      );\n\t    }\n\t  }));\n\t\n\t  function basis$1(t1, v0, v1, v2, v3) {\n\t    var t2 = t1 * t1, t3 = t2 * t1;\n\t    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n\t        + (4 - 6 * t2 + 3 * t3) * v1\n\t        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n\t        + t3 * v3) / 6;\n\t  }\n\t\n\t  function basis$2(values) {\n\t    var n = values.length - 1;\n\t    return function(t) {\n\t      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n\t          v1 = values[i],\n\t          v2 = values[i + 1],\n\t          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n\t          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n\t      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n\t    };\n\t  }\n\t\n\t  function basisClosed$1(values) {\n\t    var n = values.length;\n\t    return function(t) {\n\t      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n\t          v0 = values[(i + n - 1) % n],\n\t          v1 = values[i % n],\n\t          v2 = values[(i + 1) % n],\n\t          v3 = values[(i + 2) % n];\n\t      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n\t    };\n\t  }\n\t\n\t  function constant$2(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function linear$1(a, d) {\n\t    return function(t) {\n\t      return a + t * d;\n\t    };\n\t  }\n\t\n\t  function exponential$1(a, b, y) {\n\t    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n\t      return Math.pow(a + t * b, y);\n\t    };\n\t  }\n\t\n\t  function hue(a, b) {\n\t    var d = b - a;\n\t    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n\t  }\n\t\n\t  function gamma(y) {\n\t    return (y = +y) === 1 ? nogamma : function(a, b) {\n\t      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);\n\t    };\n\t  }\n\t\n\t  function nogamma(a, b) {\n\t    var d = b - a;\n\t    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n\t  }\n\t\n\t  var interpolateRgb = (function rgbGamma(y) {\n\t    var color = gamma(y);\n\t\n\t    function rgb(start, end) {\n\t      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n\t          g = color(start.g, end.g),\n\t          b = color(start.b, end.b),\n\t          opacity = color(start.opacity, end.opacity);\n\t      return function(t) {\n\t        start.r = r(t);\n\t        start.g = g(t);\n\t        start.b = b(t);\n\t        start.opacity = opacity(t);\n\t        return start + \"\";\n\t      };\n\t    }\n\t\n\t    rgb.gamma = rgbGamma;\n\t\n\t    return rgb;\n\t  })(1);\n\t\n\t  function rgbSpline(spline) {\n\t    return function(colors) {\n\t      var n = colors.length,\n\t          r = new Array(n),\n\t          g = new Array(n),\n\t          b = new Array(n),\n\t          i, color;\n\t      for (i = 0; i < n; ++i) {\n\t        color = colorRgb(colors[i]);\n\t        r[i] = color.r || 0;\n\t        g[i] = color.g || 0;\n\t        b[i] = color.b || 0;\n\t      }\n\t      r = spline(r);\n\t      g = spline(g);\n\t      b = spline(b);\n\t      color.opacity = 1;\n\t      return function(t) {\n\t        color.r = r(t);\n\t        color.g = g(t);\n\t        color.b = b(t);\n\t        return color + \"\";\n\t      };\n\t    };\n\t  }\n\t\n\t  var rgbBasis = rgbSpline(basis$2);\n\t  var rgbBasisClosed = rgbSpline(basisClosed$1);\n\t\n\t  function array$1(a, b) {\n\t    var nb = b ? b.length : 0,\n\t        na = a ? Math.min(nb, a.length) : 0,\n\t        x = new Array(nb),\n\t        c = new Array(nb),\n\t        i;\n\t\n\t    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n\t    for (; i < nb; ++i) c[i] = b[i];\n\t\n\t    return function(t) {\n\t      for (i = 0; i < na; ++i) c[i] = x[i](t);\n\t      return c;\n\t    };\n\t  }\n\t\n\t  function interpolateNumber(a, b) {\n\t    return a = +a, b -= a, function(t) {\n\t      return a + b * t;\n\t    };\n\t  }\n\t\n\t  function object(a, b) {\n\t    var i = {},\n\t        c = {},\n\t        k;\n\t\n\t    if (a === null || typeof a !== \"object\") a = {};\n\t    if (b === null || typeof b !== \"object\") b = {};\n\t\n\t    for (k in b) {\n\t      if (k in a) {\n\t        i[k] = interpolate(a[k], b[k]);\n\t      } else {\n\t        c[k] = b[k];\n\t      }\n\t    }\n\t\n\t    return function(t) {\n\t      for (k in i) c[k] = i[k](t);\n\t      return c;\n\t    };\n\t  }\n\t\n\t  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n\t  var reB = new RegExp(reA.source, \"g\");\n\t  function zero(b) {\n\t    return function() {\n\t      return b;\n\t    };\n\t  }\n\t\n\t  function one(b) {\n\t    return function(t) {\n\t      return b(t) + \"\";\n\t    };\n\t  }\n\t\n\t  function interpolateString(a, b) {\n\t    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n\t        am, // current match in a\n\t        bm, // current match in b\n\t        bs, // string preceding current number in b, if any\n\t        i = -1, // index in s\n\t        s = [], // string constants and placeholders\n\t        q = []; // number interpolators\n\t\n\t    // Coerce inputs to strings.\n\t    a = a + \"\", b = b + \"\";\n\t\n\t    // Interpolate pairs of numbers in a & b.\n\t    while ((am = reA.exec(a))\n\t        && (bm = reB.exec(b))) {\n\t      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n\t        bs = b.slice(bi, bs);\n\t        if (s[i]) s[i] += bs; // coalesce with previous string\n\t        else s[++i] = bs;\n\t      }\n\t      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n\t        if (s[i]) s[i] += bm; // coalesce with previous string\n\t        else s[++i] = bm;\n\t      } else { // interpolate non-matching numbers\n\t        s[++i] = null;\n\t        q.push({i: i, x: interpolateNumber(am, bm)});\n\t      }\n\t      bi = reB.lastIndex;\n\t    }\n\t\n\t    // Add remains of b.\n\t    if (bi < b.length) {\n\t      bs = b.slice(bi);\n\t      if (s[i]) s[i] += bs; // coalesce with previous string\n\t      else s[++i] = bs;\n\t    }\n\t\n\t    // Special optimization for only a single match.\n\t    // Otherwise, interpolate each of the numbers and rejoin the string.\n\t    return s.length < 2 ? (q[0]\n\t        ? one(q[0].x)\n\t        : zero(b))\n\t        : (b = q.length, function(t) {\n\t            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n\t            return s.join(\"\");\n\t          });\n\t  }\n\t\n\t  function interpolate(a, b) {\n\t    var t = typeof b, c;\n\t    return b == null || t === \"boolean\" ? constant$2(b)\n\t        : (t === \"number\" ? interpolateNumber\n\t        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\n\t        : b instanceof color ? interpolateRgb\n\t        : Array.isArray(b) ? array$1\n\t        : object)(a, b);\n\t  }\n\t\n\t  function interpolateRound(a, b) {\n\t    return a = +a, b -= a, function(t) {\n\t      return Math.round(a + b * t);\n\t    };\n\t  }\n\t\n\t  var degrees = 180 / Math.PI;\n\t\n\t  var identity$2 = {\n\t    translateX: 0,\n\t    translateY: 0,\n\t    rotate: 0,\n\t    skewX: 0,\n\t    scaleX: 1,\n\t    scaleY: 1\n\t  };\n\t\n\t  function decompose(a, b, c, d, e, f) {\n\t    var scaleX, scaleY, skewX;\n\t    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n\t    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n\t    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n\t    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n\t    return {\n\t      translateX: e,\n\t      translateY: f,\n\t      rotate: Math.atan2(b, a) * degrees,\n\t      skewX: Math.atan(skewX) * degrees,\n\t      scaleX: scaleX,\n\t      scaleY: scaleY\n\t    };\n\t  }\n\t\n\t  var cssNode;\n\t  var cssRoot;\n\t  var cssView;\n\t  var svgNode;\n\t  function parseCss(value) {\n\t    if (value === \"none\") return identity$2;\n\t    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n\t    cssNode.style.transform = value;\n\t    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n\t    cssRoot.removeChild(cssNode);\n\t    var m = value.slice(7, -1).split(\",\");\n\t    return decompose(+m[0], +m[1], +m[2], +m[3], +m[4], +m[5]);\n\t  }\n\t\n\t  function parseSvg(value) {\n\t    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\t    svgNode.setAttribute(\"transform\", value == null ? \"\" : value);\n\t    var m = svgNode.transform.baseVal.consolidate().matrix;\n\t    return decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n\t  }\n\t\n\t  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\t\n\t    function pop(s) {\n\t      return s.length ? s.pop() + \" \" : \"\";\n\t    }\n\t\n\t    function translate(xa, ya, xb, yb, s, q) {\n\t      if (xa !== xb || ya !== yb) {\n\t        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n\t        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n\t      } else if (xb || yb) {\n\t        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n\t      }\n\t    }\n\t\n\t    function rotate(a, b, s, q) {\n\t      if (a !== b) {\n\t        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n\t        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n\t      } else if (b) {\n\t        s.push(pop(s) + \"rotate(\" + b + degParen);\n\t      }\n\t    }\n\t\n\t    function skewX(a, b, s, q) {\n\t      if (a !== b) {\n\t        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n\t      } else if (b) {\n\t        s.push(pop(s) + \"skewX(\" + b + degParen);\n\t      }\n\t    }\n\t\n\t    function scale(xa, ya, xb, yb, s, q) {\n\t      if (xa !== xb || ya !== yb) {\n\t        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n\t        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n\t      } else if (xb !== 1 || yb !== 1) {\n\t        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n\t      }\n\t    }\n\t\n\t    return function(a, b) {\n\t      var s = [], // string constants and placeholders\n\t          q = []; // number interpolators\n\t      a = parse(a), b = parse(b);\n\t      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n\t      rotate(a.rotate, b.rotate, s, q);\n\t      skewX(a.skewX, b.skewX, s, q);\n\t      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n\t      a = b = null; // gc\n\t      return function(t) {\n\t        var i = -1, n = q.length, o;\n\t        while (++i < n) s[(o = q[i]).i] = o.x(t);\n\t        return s.join(\"\");\n\t      };\n\t    };\n\t  }\n\t\n\t  var interpolateTransform$1 = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n\t  var interpolateTransform$2 = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\t\n\t  var rho = Math.SQRT2;\n\t  var rho2 = 2;\n\t  var rho4 = 4;\n\t  var epsilon2 = 1e-12;\n\t  function cosh(x) {\n\t    return ((x = Math.exp(x)) + 1 / x) / 2;\n\t  }\n\t\n\t  function sinh(x) {\n\t    return ((x = Math.exp(x)) - 1 / x) / 2;\n\t  }\n\t\n\t  function tanh(x) {\n\t    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n\t  }\n\t\n\t  // p0 = [ux0, uy0, w0]\n\t  // p1 = [ux1, uy1, w1]\n\t  function interpolateZoom(p0, p1) {\n\t    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n\t        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n\t        dx = ux1 - ux0,\n\t        dy = uy1 - uy0,\n\t        d2 = dx * dx + dy * dy,\n\t        i,\n\t        S;\n\t\n\t    // Special case for u0 ≅ u1.\n\t    if (d2 < epsilon2) {\n\t      S = Math.log(w1 / w0) / rho;\n\t      i = function(t) {\n\t        return [\n\t          ux0 + t * dx,\n\t          uy0 + t * dy,\n\t          w0 * Math.exp(rho * t * S)\n\t        ];\n\t      }\n\t    }\n\t\n\t    // General case.\n\t    else {\n\t      var d1 = Math.sqrt(d2),\n\t          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n\t          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n\t          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n\t          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n\t      S = (r1 - r0) / rho;\n\t      i = function(t) {\n\t        var s = t * S,\n\t            coshr0 = cosh(r0),\n\t            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n\t        return [\n\t          ux0 + u * dx,\n\t          uy0 + u * dy,\n\t          w0 * coshr0 / cosh(rho * s + r0)\n\t        ];\n\t      }\n\t    }\n\t\n\t    i.duration = S * 1000;\n\t\n\t    return i;\n\t  }\n\t\n\t  function hsl(hue) {\n\t    return function(start, end) {\n\t      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n\t          s = nogamma(start.s, end.s),\n\t          l = nogamma(start.l, end.l),\n\t          opacity = nogamma(start.opacity, end.opacity);\n\t      return function(t) {\n\t        start.h = h(t);\n\t        start.s = s(t);\n\t        start.l = l(t);\n\t        start.opacity = opacity(t);\n\t        return start + \"\";\n\t      };\n\t    }\n\t  }\n\t\n\t  var hsl$1 = hsl(hue);\n\t  var hslLong = hsl(nogamma);\n\t\n\t  function lab$1(start, end) {\n\t    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n\t        a = nogamma(start.a, end.a),\n\t        b = nogamma(start.b, end.b),\n\t        opacity = nogamma(start.opacity, end.opacity);\n\t    return function(t) {\n\t      start.l = l(t);\n\t      start.a = a(t);\n\t      start.b = b(t);\n\t      start.opacity = opacity(t);\n\t      return start + \"\";\n\t    };\n\t  }\n\t\n\t  function hcl(hue) {\n\t    return function(start, end) {\n\t      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n\t          c = nogamma(start.c, end.c),\n\t          l = nogamma(start.l, end.l),\n\t          opacity = nogamma(start.opacity, end.opacity);\n\t      return function(t) {\n\t        start.h = h(t);\n\t        start.c = c(t);\n\t        start.l = l(t);\n\t        start.opacity = opacity(t);\n\t        return start + \"\";\n\t      };\n\t    }\n\t  }\n\t\n\t  var hcl$1 = hcl(hue);\n\t  var hclLong = hcl(nogamma);\n\t\n\t  function cubehelix$1(hue) {\n\t    return (function cubehelixGamma(y) {\n\t      y = +y;\n\t\n\t      function cubehelix$$(start, end) {\n\t        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n\t            s = nogamma(start.s, end.s),\n\t            l = nogamma(start.l, end.l),\n\t            opacity = nogamma(start.opacity, end.opacity);\n\t        return function(t) {\n\t          start.h = h(t);\n\t          start.s = s(t);\n\t          start.l = l(Math.pow(t, y));\n\t          start.opacity = opacity(t);\n\t          return start + \"\";\n\t        };\n\t      }\n\t\n\t      cubehelix$$.gamma = cubehelixGamma;\n\t\n\t      return cubehelix$$;\n\t    })(1);\n\t  }\n\t\n\t  var cubehelix$2 = cubehelix$1(hue);\n\t  var interpolateCubehelixLong = cubehelix$1(nogamma);\n\t\n\t  function quantize(interpolate, n) {\n\t    var samples = new Array(n);\n\t    for (var i = 0; i < n; ++i) samples[i] = interpolate(i / (n - 1));\n\t    return samples;\n\t  }\n\t\n\t  var noop$1 = {value: function() {}};\n\t\n\t  function dispatch() {\n\t    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n\t      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n\t      _[t] = [];\n\t    }\n\t    return new Dispatch(_);\n\t  }\n\t\n\t  function Dispatch(_) {\n\t    this._ = _;\n\t  }\n\t\n\t  function parseTypenames(typenames, types) {\n\t    return typenames.trim().split(/^|\\s+/).map(function(t) {\n\t      var name = \"\", i = t.indexOf(\".\");\n\t      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n\t      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n\t      return {type: t, name: name};\n\t    });\n\t  }\n\t\n\t  Dispatch.prototype = dispatch.prototype = {\n\t    constructor: Dispatch,\n\t    on: function(typename, callback) {\n\t      var _ = this._,\n\t          T = parseTypenames(typename + \"\", _),\n\t          t,\n\t          i = -1,\n\t          n = T.length;\n\t\n\t      // If no callback was specified, return the callback of the given type and name.\n\t      if (arguments.length < 2) {\n\t        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n\t        return;\n\t      }\n\t\n\t      // If a type was specified, set the callback for the given type and name.\n\t      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n\t      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n\t      while (++i < n) {\n\t        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);\n\t        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);\n\t      }\n\t\n\t      return this;\n\t    },\n\t    copy: function() {\n\t      var copy = {}, _ = this._;\n\t      for (var t in _) copy[t] = _[t].slice();\n\t      return new Dispatch(copy);\n\t    },\n\t    call: function(type, that) {\n\t      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    },\n\t    apply: function(type, that, args) {\n\t      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n\t      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n\t    }\n\t  };\n\t\n\t  function get(type, name) {\n\t    for (var i = 0, n = type.length, c; i < n; ++i) {\n\t      if ((c = type[i]).name === name) {\n\t        return c.value;\n\t      }\n\t    }\n\t  }\n\t\n\t  function set$1(type, name, callback) {\n\t    for (var i = 0, n = type.length; i < n; ++i) {\n\t      if (type[i].name === name) {\n\t        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));\n\t        break;\n\t      }\n\t    }\n\t    if (callback != null) type.push({name: name, value: callback});\n\t    return type;\n\t  }\n\t\n\t  function objectConverter(columns) {\n\t    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n\t      return JSON.stringify(name) + \": d[\" + i + \"]\";\n\t    }).join(\",\") + \"}\");\n\t  }\n\t\n\t  function customConverter(columns, f) {\n\t    var object = objectConverter(columns);\n\t    return function(row, i) {\n\t      return f(object(row), i, columns);\n\t    };\n\t  }\n\t\n\t  // Compute unique columns in order of discovery.\n\t  function inferColumns(rows) {\n\t    var columnSet = Object.create(null),\n\t        columns = [];\n\t\n\t    rows.forEach(function(row) {\n\t      for (var column in row) {\n\t        if (!(column in columnSet)) {\n\t          columns.push(columnSet[column] = column);\n\t        }\n\t      }\n\t    });\n\t\n\t    return columns;\n\t  }\n\t\n\t  function dsv(delimiter) {\n\t    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n\t        delimiterCode = delimiter.charCodeAt(0);\n\t\n\t    function parse(text, f) {\n\t      var convert, columns, rows = parseRows(text, function(row, i) {\n\t        if (convert) return convert(row, i - 1);\n\t        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n\t      });\n\t      rows.columns = columns;\n\t      return rows;\n\t    }\n\t\n\t    function parseRows(text, f) {\n\t      var EOL = {}, // sentinel value for end-of-line\n\t          EOF = {}, // sentinel value for end-of-file\n\t          rows = [], // output rows\n\t          N = text.length,\n\t          I = 0, // current character index\n\t          n = 0, // the current line number\n\t          t, // the current token\n\t          eol; // is the current token followed by EOL?\n\t\n\t      function token() {\n\t        if (I >= N) return EOF; // special case: end of file\n\t        if (eol) return eol = false, EOL; // special case: end of line\n\t\n\t        // special case: quotes\n\t        var j = I, c;\n\t        if (text.charCodeAt(j) === 34) {\n\t          var i = j;\n\t          while (i++ < N) {\n\t            if (text.charCodeAt(i) === 34) {\n\t              if (text.charCodeAt(i + 1) !== 34) break;\n\t              ++i;\n\t            }\n\t          }\n\t          I = i + 2;\n\t          c = text.charCodeAt(i + 1);\n\t          if (c === 13) {\n\t            eol = true;\n\t            if (text.charCodeAt(i + 2) === 10) ++I;\n\t          } else if (c === 10) {\n\t            eol = true;\n\t          }\n\t          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n\t        }\n\t\n\t        // common case: find next delimiter or newline\n\t        while (I < N) {\n\t          var k = 1;\n\t          c = text.charCodeAt(I++);\n\t          if (c === 10) eol = true; // \\n\n\t          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n\t          else if (c !== delimiterCode) continue;\n\t          return text.slice(j, I - k);\n\t        }\n\t\n\t        // special case: last token before EOF\n\t        return text.slice(j);\n\t      }\n\t\n\t      while ((t = token()) !== EOF) {\n\t        var a = [];\n\t        while (t !== EOL && t !== EOF) {\n\t          a.push(t);\n\t          t = token();\n\t        }\n\t        if (f && (a = f(a, n++)) == null) continue;\n\t        rows.push(a);\n\t      }\n\t\n\t      return rows;\n\t    }\n\t\n\t    function format(rows, columns) {\n\t      if (columns == null) columns = inferColumns(rows);\n\t      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n\t        return columns.map(function(column) {\n\t          return formatValue(row[column]);\n\t        }).join(delimiter);\n\t      })).join(\"\\n\");\n\t    }\n\t\n\t    function formatRows(rows) {\n\t      return rows.map(formatRow).join(\"\\n\");\n\t    }\n\t\n\t    function formatRow(row) {\n\t      return row.map(formatValue).join(delimiter);\n\t    }\n\t\n\t    function formatValue(text) {\n\t      return text == null ? \"\"\n\t          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n\t          : text;\n\t    }\n\t\n\t    return {\n\t      parse: parse,\n\t      parseRows: parseRows,\n\t      format: format,\n\t      formatRows: formatRows\n\t    };\n\t  }\n\t\n\t  var csv = dsv(\",\");\n\t\n\t  var csvParse = csv.parse;\n\t  var csvParseRows = csv.parseRows;\n\t  var csvFormat = csv.format;\n\t  var csvFormatRows = csv.formatRows;\n\t\n\t  var tsv = dsv(\"\\t\");\n\t\n\t  var tsvParse = tsv.parse;\n\t  var tsvParseRows = tsv.parseRows;\n\t  var tsvFormat = tsv.format;\n\t  var tsvFormatRows = tsv.formatRows;\n\t\n\t  function request(url, callback) {\n\t    var request,\n\t        event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n\t        mimeType,\n\t        headers = map$1(),\n\t        xhr = new XMLHttpRequest,\n\t        user = null,\n\t        password = null,\n\t        response,\n\t        responseType,\n\t        timeout = 0;\n\t\n\t    // If IE does not support CORS, use XDomainRequest.\n\t    if (typeof XDomainRequest !== \"undefined\"\n\t        && !(\"withCredentials\" in xhr)\n\t        && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\t\n\t    \"onload\" in xhr\n\t        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n\t        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\t\n\t    function respond(o) {\n\t      var status = xhr.status, result;\n\t      if (!status && hasResponse(xhr)\n\t          || status >= 200 && status < 300\n\t          || status === 304) {\n\t        if (response) {\n\t          try {\n\t            result = response.call(request, xhr);\n\t          } catch (e) {\n\t            event.call(\"error\", request, e);\n\t            return;\n\t          }\n\t        } else {\n\t          result = xhr;\n\t        }\n\t        event.call(\"load\", request, result);\n\t      } else {\n\t        event.call(\"error\", request, o);\n\t      }\n\t    }\n\t\n\t    xhr.onprogress = function(e) {\n\t      event.call(\"progress\", request, e);\n\t    };\n\t\n\t    request = {\n\t      header: function(name, value) {\n\t        name = (name + \"\").toLowerCase();\n\t        if (arguments.length < 2) return headers.get(name);\n\t        if (value == null) headers.remove(name);\n\t        else headers.set(name, value + \"\");\n\t        return request;\n\t      },\n\t\n\t      // If mimeType is non-null and no Accept header is set, a default is used.\n\t      mimeType: function(value) {\n\t        if (!arguments.length) return mimeType;\n\t        mimeType = value == null ? null : value + \"\";\n\t        return request;\n\t      },\n\t\n\t      // Specifies what type the response value should take;\n\t      // for instance, arraybuffer, blob, document, or text.\n\t      responseType: function(value) {\n\t        if (!arguments.length) return responseType;\n\t        responseType = value;\n\t        return request;\n\t      },\n\t\n\t      timeout: function(value) {\n\t        if (!arguments.length) return timeout;\n\t        timeout = +value;\n\t        return request;\n\t      },\n\t\n\t      user: function(value) {\n\t        return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n\t      },\n\t\n\t      password: function(value) {\n\t        return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n\t      },\n\t\n\t      // Specify how to convert the response content to a specific type;\n\t      // changes the callback value on \"load\" events.\n\t      response: function(value) {\n\t        response = value;\n\t        return request;\n\t      },\n\t\n\t      // Alias for send(\"GET\", …).\n\t      get: function(data, callback) {\n\t        return request.send(\"GET\", data, callback);\n\t      },\n\t\n\t      // Alias for send(\"POST\", …).\n\t      post: function(data, callback) {\n\t        return request.send(\"POST\", data, callback);\n\t      },\n\t\n\t      // If callback is non-null, it will be used for error and load events.\n\t      send: function(method, data, callback) {\n\t        if (!callback && typeof data === \"function\") callback = data, data = null;\n\t        if (callback && callback.length === 1) callback = fixCallback(callback);\n\t        xhr.open(method, url, true, user, password);\n\t        if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n\t        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n\t        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n\t        if (responseType != null) xhr.responseType = responseType;\n\t        if (timeout > 0) xhr.timeout = timeout;\n\t        if (callback) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n\t        event.call(\"beforesend\", request, xhr);\n\t        xhr.send(data == null ? null : data);\n\t        return request;\n\t      },\n\t\n\t      abort: function() {\n\t        xhr.abort();\n\t        return request;\n\t      },\n\t\n\t      on: function() {\n\t        var value = event.on.apply(event, arguments);\n\t        return value === event ? request : value;\n\t      }\n\t    };\n\t\n\t    return callback\n\t        ? request.get(callback)\n\t        : request;\n\t  }\n\t\n\t  function fixCallback(callback) {\n\t    return function(error, xhr) {\n\t      callback(error == null ? xhr : null);\n\t    };\n\t  }\n\t\n\t  function hasResponse(xhr) {\n\t    var type = xhr.responseType;\n\t    return type && type !== \"text\"\n\t        ? xhr.response // null on error\n\t        : xhr.responseText; // \"\" on error\n\t  }\n\t\n\t  function type(defaultMimeType, response) {\n\t    return function(url, callback) {\n\t      var r = request(url).mimeType(defaultMimeType).response(response);\n\t      return callback ? r.get(callback) : r;\n\t    };\n\t  }\n\t\n\t  var html = type(\"text/html\", function(xhr) {\n\t    return document.createRange().createContextualFragment(xhr.responseText);\n\t  });\n\t\n\t  var json = type(\"application/json\", function(xhr) {\n\t    return JSON.parse(xhr.responseText);\n\t  });\n\t\n\t  var text = type(\"text/plain\", function(xhr) {\n\t    return xhr.responseText;\n\t  });\n\t\n\t  var xml = type(\"application/xml\", function(xhr) {\n\t    var xml = xhr.responseXML;\n\t    if (!xml) throw new Error(\"parse error\");\n\t    return xml;\n\t  });\n\t\n\t  function dsv$1(defaultMimeType, parse) {\n\t    return function(url, row, callback) {\n\t      if (arguments.length < 3) callback = row, row = null;\n\t      var r = request(url).mimeType(defaultMimeType);\n\t      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n\t      r.row(row);\n\t      return callback ? r.get(callback) : r;\n\t    };\n\t  }\n\t\n\t  function responseOf(parse, row) {\n\t    return function(request) {\n\t      return parse(request.responseText, row);\n\t    };\n\t  }\n\t\n\t  var csv$1 = dsv$1(\"text/csv\", csvParse);\n\t\n\t  var tsv$1 = dsv$1(\"text/tab-separated-values\", tsvParse);\n\t\n\t  var frame = 0;\n\t  var timeout = 0;\n\t  var interval = 0;\n\t  var pokeDelay = 1000;\n\t  var taskHead;\n\t  var taskTail;\n\t  var clockLast = 0;\n\t  var clockNow = 0;\n\t  var clockSkew = 0;\n\t  var clock = typeof performance === \"object\" ? performance : Date;\n\t  var setFrame = typeof requestAnimationFrame === \"function\"\n\t          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n\t          : function(f) { setTimeout(f, 17); };\n\t  function now() {\n\t    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n\t  }\n\t\n\t  function clearNow() {\n\t    clockNow = 0;\n\t  }\n\t\n\t  function Timer() {\n\t    this._call =\n\t    this._time =\n\t    this._next = null;\n\t  }\n\t\n\t  Timer.prototype = timer.prototype = {\n\t    constructor: Timer,\n\t    restart: function(callback, delay, time) {\n\t      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n\t      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n\t      if (!this._next && taskTail !== this) {\n\t        if (taskTail) taskTail._next = this;\n\t        else taskHead = this;\n\t        taskTail = this;\n\t      }\n\t      this._call = callback;\n\t      this._time = time;\n\t      sleep();\n\t    },\n\t    stop: function() {\n\t      if (this._call) {\n\t        this._call = null;\n\t        this._time = Infinity;\n\t        sleep();\n\t      }\n\t    }\n\t  };\n\t\n\t  function timer(callback, delay, time) {\n\t    var t = new Timer;\n\t    t.restart(callback, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function timerFlush() {\n\t    now(); // Get the current time, if not already set.\n\t    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n\t    var t = taskHead, e;\n\t    while (t) {\n\t      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n\t      t = t._next;\n\t    }\n\t    --frame;\n\t  }\n\t\n\t  function wake(time) {\n\t    clockNow = (clockLast = time || clock.now()) + clockSkew;\n\t    frame = timeout = 0;\n\t    try {\n\t      timerFlush();\n\t    } finally {\n\t      frame = 0;\n\t      nap();\n\t      clockNow = 0;\n\t    }\n\t  }\n\t\n\t  function poke$1() {\n\t    var now = clock.now(), delay = now - clockLast;\n\t    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n\t  }\n\t\n\t  function nap() {\n\t    var t0, t1 = taskHead, t2, time = Infinity;\n\t    while (t1) {\n\t      if (t1._call) {\n\t        if (time > t1._time) time = t1._time;\n\t        t0 = t1, t1 = t1._next;\n\t      } else {\n\t        t2 = t1._next, t1._next = null;\n\t        t1 = t0 ? t0._next = t2 : taskHead = t2;\n\t      }\n\t    }\n\t    taskTail = t0;\n\t    sleep(time);\n\t  }\n\t\n\t  function sleep(time) {\n\t    if (frame) return; // Soonest alarm already set, or will be.\n\t    if (timeout) timeout = clearTimeout(timeout);\n\t    var delay = time - clockNow;\n\t    if (delay > 24) {\n\t      if (time < Infinity) timeout = setTimeout(wake, delay);\n\t      if (interval) interval = clearInterval(interval);\n\t    } else {\n\t      if (!interval) interval = setInterval(poke$1, pokeDelay);\n\t      frame = 1, setFrame(wake);\n\t    }\n\t  }\n\t\n\t  function timeout$1(callback, delay, time) {\n\t    var t = new Timer;\n\t    delay = delay == null ? 0 : +delay;\n\t    t.restart(function(elapsed) {\n\t      t.stop();\n\t      callback(elapsed + delay);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\t  function interval$1(callback, delay, time) {\n\t    var t = new Timer, total = delay;\n\t    if (delay == null) return t.restart(callback, delay, time), t;\n\t    delay = +delay, time = time == null ? now() : +time;\n\t    t.restart(function tick(elapsed) {\n\t      elapsed += total;\n\t      t.restart(tick, total += delay, time);\n\t      callback(elapsed);\n\t    }, delay, time);\n\t    return t;\n\t  }\n\t\n\tvar   t0$1 = new Date;\n\tvar   t1$1 = new Date;\n\t  function newInterval(floori, offseti, count, field) {\n\t\n\t    function interval(date) {\n\t      return floori(date = new Date(+date)), date;\n\t    }\n\t\n\t    interval.floor = interval;\n\t\n\t    interval.ceil = function(date) {\n\t      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n\t    };\n\t\n\t    interval.round = function(date) {\n\t      var d0 = interval(date),\n\t          d1 = interval.ceil(date);\n\t      return date - d0 < d1 - date ? d0 : d1;\n\t    };\n\t\n\t    interval.offset = function(date, step) {\n\t      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n\t    };\n\t\n\t    interval.range = function(start, stop, step) {\n\t      var range = [];\n\t      start = interval.ceil(start);\n\t      step = step == null ? 1 : Math.floor(step);\n\t      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\t      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)\n\t      return range;\n\t    };\n\t\n\t    interval.filter = function(test) {\n\t      return newInterval(function(date) {\n\t        while (floori(date), !test(date)) date.setTime(date - 1);\n\t      }, function(date, step) {\n\t        while (--step >= 0) while (offseti(date, 1), !test(date));\n\t      });\n\t    };\n\t\n\t    if (count) {\n\t      interval.count = function(start, end) {\n\t        t0$1.setTime(+start), t1$1.setTime(+end);\n\t        floori(t0$1), floori(t1$1);\n\t        return Math.floor(count(t0$1, t1$1));\n\t      };\n\t\n\t      interval.every = function(step) {\n\t        step = Math.floor(step);\n\t        return !isFinite(step) || !(step > 0) ? null\n\t            : !(step > 1) ? interval\n\t            : interval.filter(field\n\t                ? function(d) { return field(d) % step === 0; }\n\t                : function(d) { return interval.count(0, d) % step === 0; });\n\t      };\n\t    }\n\t\n\t    return interval;\n\t  }\n\t\n\t  var millisecond = newInterval(function() {\n\t    // noop\n\t  }, function(date, step) {\n\t    date.setTime(+date + step);\n\t  }, function(start, end) {\n\t    return end - start;\n\t  });\n\t\n\t  // An optimized implementation for this simple case.\n\t  millisecond.every = function(k) {\n\t    k = Math.floor(k);\n\t    if (!isFinite(k) || !(k > 0)) return null;\n\t    if (!(k > 1)) return millisecond;\n\t    return newInterval(function(date) {\n\t      date.setTime(Math.floor(date / k) * k);\n\t    }, function(date, step) {\n\t      date.setTime(+date + step * k);\n\t    }, function(start, end) {\n\t      return (end - start) / k;\n\t    });\n\t  };\n\t\n\t  var milliseconds = millisecond.range;\n\t\n\t  var durationSecond = 1e3;\n\t  var durationMinute = 6e4;\n\t  var durationHour = 36e5;\n\t  var durationDay = 864e5;\n\t  var durationWeek = 6048e5;\n\t\n\t  var second = newInterval(function(date) {\n\t    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n\t  }, function(date, step) {\n\t    date.setTime(+date + step * durationSecond);\n\t  }, function(start, end) {\n\t    return (end - start) / durationSecond;\n\t  }, function(date) {\n\t    return date.getUTCSeconds();\n\t  });\n\t\n\t  var seconds = second.range;\n\t\n\t  var minute = newInterval(function(date) {\n\t    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n\t  }, function(date, step) {\n\t    date.setTime(+date + step * durationMinute);\n\t  }, function(start, end) {\n\t    return (end - start) / durationMinute;\n\t  }, function(date) {\n\t    return date.getMinutes();\n\t  });\n\t\n\t  var minutes = minute.range;\n\t\n\t  var hour = newInterval(function(date) {\n\t    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n\t    if (offset < 0) offset += durationHour;\n\t    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n\t  }, function(date, step) {\n\t    date.setTime(+date + step * durationHour);\n\t  }, function(start, end) {\n\t    return (end - start) / durationHour;\n\t  }, function(date) {\n\t    return date.getHours();\n\t  });\n\t\n\t  var hours = hour.range;\n\t\n\t  var day = newInterval(function(date) {\n\t    date.setHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setDate(date.getDate() + step);\n\t  }, function(start, end) {\n\t    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n\t  }, function(date) {\n\t    return date.getDate() - 1;\n\t  });\n\t\n\t  var days = day.range;\n\t\n\t  function weekday(i) {\n\t    return newInterval(function(date) {\n\t      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n\t      date.setHours(0, 0, 0, 0);\n\t    }, function(date, step) {\n\t      date.setDate(date.getDate() + step * 7);\n\t    }, function(start, end) {\n\t      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n\t    });\n\t  }\n\t\n\t  var timeWeek = weekday(0);\n\t  var timeMonday = weekday(1);\n\t  var tuesday = weekday(2);\n\t  var wednesday = weekday(3);\n\t  var thursday = weekday(4);\n\t  var friday = weekday(5);\n\t  var saturday = weekday(6);\n\t\n\t  var sundays = timeWeek.range;\n\t  var mondays = timeMonday.range;\n\t  var tuesdays = tuesday.range;\n\t  var wednesdays = wednesday.range;\n\t  var thursdays = thursday.range;\n\t  var fridays = friday.range;\n\t  var saturdays = saturday.range;\n\t\n\t  var month = newInterval(function(date) {\n\t    date.setDate(1);\n\t    date.setHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setMonth(date.getMonth() + step);\n\t  }, function(start, end) {\n\t    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n\t  }, function(date) {\n\t    return date.getMonth();\n\t  });\n\t\n\t  var months = month.range;\n\t\n\t  var year = newInterval(function(date) {\n\t    date.setMonth(0, 1);\n\t    date.setHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setFullYear(date.getFullYear() + step);\n\t  }, function(start, end) {\n\t    return end.getFullYear() - start.getFullYear();\n\t  }, function(date) {\n\t    return date.getFullYear();\n\t  });\n\t\n\t  // An optimized implementation for this simple case.\n\t  year.every = function(k) {\n\t    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n\t      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n\t      date.setMonth(0, 1);\n\t      date.setHours(0, 0, 0, 0);\n\t    }, function(date, step) {\n\t      date.setFullYear(date.getFullYear() + step * k);\n\t    });\n\t  };\n\t\n\t  var years = year.range;\n\t\n\t  var utcMinute = newInterval(function(date) {\n\t    date.setUTCSeconds(0, 0);\n\t  }, function(date, step) {\n\t    date.setTime(+date + step * durationMinute);\n\t  }, function(start, end) {\n\t    return (end - start) / durationMinute;\n\t  }, function(date) {\n\t    return date.getUTCMinutes();\n\t  });\n\t\n\t  var utcMinutes = utcMinute.range;\n\t\n\t  var utcHour = newInterval(function(date) {\n\t    date.setUTCMinutes(0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setTime(+date + step * durationHour);\n\t  }, function(start, end) {\n\t    return (end - start) / durationHour;\n\t  }, function(date) {\n\t    return date.getUTCHours();\n\t  });\n\t\n\t  var utcHours = utcHour.range;\n\t\n\t  var utcDay = newInterval(function(date) {\n\t    date.setUTCHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setUTCDate(date.getUTCDate() + step);\n\t  }, function(start, end) {\n\t    return (end - start) / durationDay;\n\t  }, function(date) {\n\t    return date.getUTCDate() - 1;\n\t  });\n\t\n\t  var utcDays = utcDay.range;\n\t\n\t  function utcWeekday(i) {\n\t    return newInterval(function(date) {\n\t      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n\t      date.setUTCHours(0, 0, 0, 0);\n\t    }, function(date, step) {\n\t      date.setUTCDate(date.getUTCDate() + step * 7);\n\t    }, function(start, end) {\n\t      return (end - start) / durationWeek;\n\t    });\n\t  }\n\t\n\t  var utcWeek = utcWeekday(0);\n\t  var utcMonday = utcWeekday(1);\n\t  var utcTuesday = utcWeekday(2);\n\t  var utcWednesday = utcWeekday(3);\n\t  var utcThursday = utcWeekday(4);\n\t  var utcFriday = utcWeekday(5);\n\t  var utcSaturday = utcWeekday(6);\n\t\n\t  var utcSundays = utcWeek.range;\n\t  var utcMondays = utcMonday.range;\n\t  var utcTuesdays = utcTuesday.range;\n\t  var utcWednesdays = utcWednesday.range;\n\t  var utcThursdays = utcThursday.range;\n\t  var utcFridays = utcFriday.range;\n\t  var utcSaturdays = utcSaturday.range;\n\t\n\t  var utcMonth = newInterval(function(date) {\n\t    date.setUTCDate(1);\n\t    date.setUTCHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setUTCMonth(date.getUTCMonth() + step);\n\t  }, function(start, end) {\n\t    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n\t  }, function(date) {\n\t    return date.getUTCMonth();\n\t  });\n\t\n\t  var utcMonths = utcMonth.range;\n\t\n\t  var utcYear = newInterval(function(date) {\n\t    date.setUTCMonth(0, 1);\n\t    date.setUTCHours(0, 0, 0, 0);\n\t  }, function(date, step) {\n\t    date.setUTCFullYear(date.getUTCFullYear() + step);\n\t  }, function(start, end) {\n\t    return end.getUTCFullYear() - start.getUTCFullYear();\n\t  }, function(date) {\n\t    return date.getUTCFullYear();\n\t  });\n\t\n\t  // An optimized implementation for this simple case.\n\t  utcYear.every = function(k) {\n\t    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n\t      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n\t      date.setUTCMonth(0, 1);\n\t      date.setUTCHours(0, 0, 0, 0);\n\t    }, function(date, step) {\n\t      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n\t    });\n\t  };\n\t\n\t  var utcYears = utcYear.range;\n\t\n\t  // Computes the decimal coefficient and exponent of the specified number x with\n\t  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n\t  // For example, formatDecimal(1.23) returns [\"123\", 0].\n\t  function formatDecimal(x, p) {\n\t    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n\t    var i, coefficient = x.slice(0, i);\n\t\n\t    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n\t    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\t    return [\n\t      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n\t      +x.slice(i + 1)\n\t    ];\n\t  }\n\t\n\t  function exponent$1(x) {\n\t    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n\t  }\n\t\n\t  function formatGroup(grouping, thousands) {\n\t    return function(value, width) {\n\t      var i = value.length,\n\t          t = [],\n\t          j = 0,\n\t          g = grouping[0],\n\t          length = 0;\n\t\n\t      while (i > 0 && g > 0) {\n\t        if (length + g + 1 > width) g = Math.max(1, width - length);\n\t        t.push(value.substring(i -= g, i + g));\n\t        if ((length += g + 1) > width) break;\n\t        g = grouping[j = (j + 1) % grouping.length];\n\t      }\n\t\n\t      return t.reverse().join(thousands);\n\t    };\n\t  }\n\t\n\t  function formatDefault(x, p) {\n\t    x = x.toPrecision(p);\n\t\n\t    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n\t      switch (x[i]) {\n\t        case \".\": i0 = i1 = i; break;\n\t        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n\t        case \"e\": break out;\n\t        default: if (i0 > 0) i0 = 0; break;\n\t      }\n\t    }\n\t\n\t    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n\t  }\n\t\n\t  var prefixExponent;\n\t\n\t  function formatPrefixAuto(x, p) {\n\t    var d = formatDecimal(x, p);\n\t    if (!d) return x + \"\";\n\t    var coefficient = d[0],\n\t        exponent = d[1],\n\t        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n\t        n = coefficient.length;\n\t    return i === n ? coefficient\n\t        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n\t        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n\t        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n\t  }\n\t\n\t  function formatRounded(x, p) {\n\t    var d = formatDecimal(x, p);\n\t    if (!d) return x + \"\";\n\t    var coefficient = d[0],\n\t        exponent = d[1];\n\t    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n\t        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n\t        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n\t  }\n\t\n\t  var formatTypes = {\n\t    \"\": formatDefault,\n\t    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n\t    \"b\": function(x) { return Math.round(x).toString(2); },\n\t    \"c\": function(x) { return x + \"\"; },\n\t    \"d\": function(x) { return Math.round(x).toString(10); },\n\t    \"e\": function(x, p) { return x.toExponential(p); },\n\t    \"f\": function(x, p) { return x.toFixed(p); },\n\t    \"g\": function(x, p) { return x.toPrecision(p); },\n\t    \"o\": function(x) { return Math.round(x).toString(8); },\n\t    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n\t    \"r\": formatRounded,\n\t    \"s\": formatPrefixAuto,\n\t    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n\t    \"x\": function(x) { return Math.round(x).toString(16); }\n\t  };\n\t\n\t  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n\t  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\t\n\t  function formatSpecifier(specifier) {\n\t    return new FormatSpecifier(specifier);\n\t  }\n\t\n\t  function FormatSpecifier(specifier) {\n\t    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\t\n\t    var match,\n\t        fill = match[1] || \" \",\n\t        align = match[2] || \">\",\n\t        sign = match[3] || \"-\",\n\t        symbol = match[4] || \"\",\n\t        zero = !!match[5],\n\t        width = match[6] && +match[6],\n\t        comma = !!match[7],\n\t        precision = match[8] && +match[8].slice(1),\n\t        type = match[9] || \"\";\n\t\n\t    // The \"n\" type is an alias for \",g\".\n\t    if (type === \"n\") comma = true, type = \"g\";\n\t\n\t    // Map invalid types to the default format.\n\t    else if (!formatTypes[type]) type = \"\";\n\t\n\t    // If zero fill is specified, padding goes after sign and before digits.\n\t    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\t\n\t    this.fill = fill;\n\t    this.align = align;\n\t    this.sign = sign;\n\t    this.symbol = symbol;\n\t    this.zero = zero;\n\t    this.width = width;\n\t    this.comma = comma;\n\t    this.precision = precision;\n\t    this.type = type;\n\t  }\n\t\n\t  FormatSpecifier.prototype.toString = function() {\n\t    return this.fill\n\t        + this.align\n\t        + this.sign\n\t        + this.symbol\n\t        + (this.zero ? \"0\" : \"\")\n\t        + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n\t        + (this.comma ? \",\" : \"\")\n\t        + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n\t        + this.type;\n\t  };\n\t\n\t  var prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\t\n\t  function identity$3(x) {\n\t    return x;\n\t  }\n\t\n\t  var defaultLocale = formatLocale({\n\t    decimal: \".\",\n\t    thousands: \",\",\n\t    grouping: [3],\n\t    currency: [\"$\", \"\"]\n\t  });\n\t\n\t  var format = defaultLocale.format;\n\t  var formatPrefix = defaultLocale.formatPrefix;\n\t\n\t  function formatLocale(locale) {\n\t    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,\n\t        currency = locale.currency,\n\t        decimal = locale.decimal;\n\t\n\t    function newFormat(specifier) {\n\t      specifier = formatSpecifier(specifier);\n\t\n\t      var fill = specifier.fill,\n\t          align = specifier.align,\n\t          sign = specifier.sign,\n\t          symbol = specifier.symbol,\n\t          zero = specifier.zero,\n\t          width = specifier.width,\n\t          comma = specifier.comma,\n\t          precision = specifier.precision,\n\t          type = specifier.type;\n\t\n\t      // Compute the prefix and suffix.\n\t      // For SI-prefix, the suffix is lazily computed.\n\t      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n\t          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? \"%\" : \"\";\n\t\n\t      // What format function should we use?\n\t      // Is this an integer type?\n\t      // Can this type generate exponential notation?\n\t      var formatType = formatTypes[type],\n\t          maybeSuffix = !type || /[defgprs%]/.test(type);\n\t\n\t      // Set the default precision if not specified,\n\t      // or clamp the specified precision to the supported range.\n\t      // For significant precision, it must be in [1, 21].\n\t      // For fixed precision, it must be in [0, 20].\n\t      precision = precision == null ? (type ? 6 : 12)\n\t          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n\t          : Math.max(0, Math.min(20, precision));\n\t\n\t      function format(value) {\n\t        var valuePrefix = prefix,\n\t            valueSuffix = suffix,\n\t            i, n, c;\n\t\n\t        if (type === \"c\") {\n\t          valueSuffix = formatType(value) + valueSuffix;\n\t          value = \"\";\n\t        } else {\n\t          value = +value;\n\t\n\t          // Convert negative to positive, and compute the prefix.\n\t          // Note that -0 is not less than 0, but 1 / -0 is!\n\t          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);\n\t\n\t          // Perform the initial formatting.\n\t          value = formatType(value, precision);\n\t\n\t          // If the original value was negative, it may be rounded to zero during\n\t          // formatting; treat this as (positive) zero.\n\t          if (valueNegative) {\n\t            i = -1, n = value.length;\n\t            valueNegative = false;\n\t            while (++i < n) {\n\t              if (c = value.charCodeAt(i), (48 < c && c < 58)\n\t                  || (type === \"x\" && 96 < c && c < 103)\n\t                  || (type === \"X\" && 64 < c && c < 71)) {\n\t                valueNegative = true;\n\t                break;\n\t              }\n\t            }\n\t          }\n\t\n\t          // Compute the prefix and suffix.\n\t          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n\t          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\t\n\t          // Break the formatted value into the integer “value” part that can be\n\t          // grouped, and fractional or exponential “suffix” part that is not.\n\t          if (maybeSuffix) {\n\t            i = -1, n = value.length;\n\t            while (++i < n) {\n\t              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n\t                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n\t                value = value.slice(0, i);\n\t                break;\n\t              }\n\t            }\n\t          }\n\t        }\n\t\n\t        // If the fill character is not \"0\", grouping is applied before padding.\n\t        if (comma && !zero) value = group(value, Infinity);\n\t\n\t        // Compute the padding.\n\t        var length = valuePrefix.length + value.length + valueSuffix.length,\n\t            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\t\n\t        // If the fill character is \"0\", grouping is applied after padding.\n\t        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\t\n\t        // Reconstruct the final output based on the desired alignment.\n\t        switch (align) {\n\t          case \"<\": return valuePrefix + value + valueSuffix + padding;\n\t          case \"=\": return valuePrefix + padding + value + valueSuffix;\n\t          case \"^\": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n\t        }\n\t        return padding + valuePrefix + value + valueSuffix;\n\t      }\n\t\n\t      format.toString = function() {\n\t        return specifier + \"\";\n\t      };\n\t\n\t      return format;\n\t    }\n\t\n\t    function formatPrefix(specifier, value) {\n\t      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n\t          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\n\t          k = Math.pow(10, -e),\n\t          prefix = prefixes[8 + e / 3];\n\t      return function(value) {\n\t        return f(k * value) + prefix;\n\t      };\n\t    }\n\t\n\t    return {\n\t      format: newFormat,\n\t      formatPrefix: formatPrefix\n\t    };\n\t  }\n\t\n\t  function precisionFixed(step) {\n\t    return Math.max(0, -exponent$1(Math.abs(step)));\n\t  }\n\t\n\t  function precisionPrefix(step, value) {\n\t    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\n\t  }\n\t\n\t  function precisionRound(step, max) {\n\t    step = Math.abs(step), max = Math.abs(max) - step;\n\t    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\n\t  }\n\t\n\t  var defaultLocale$1 = formatLocale$1({\n\t    dateTime: \"%a %b %e %X %Y\",\n\t    date: \"%m/%d/%Y\",\n\t    time: \"%H:%M:%S\",\n\t    periods: [\"AM\", \"PM\"],\n\t    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n\t    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n\t    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\t  });\n\t\n\t  var timeFormat = defaultLocale$1.format;\n\t  var timeParse = defaultLocale$1.parse;\n\t  var utcFormat = defaultLocale$1.utcFormat;\n\t  var utcParse = defaultLocale$1.utcParse;\n\t\n\t  function localDate(d) {\n\t    if (0 <= d.y && d.y < 100) {\n\t      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n\t      date.setFullYear(d.y);\n\t      return date;\n\t    }\n\t    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n\t  }\n\t\n\t  function utcDate(d) {\n\t    if (0 <= d.y && d.y < 100) {\n\t      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n\t      date.setUTCFullYear(d.y);\n\t      return date;\n\t    }\n\t    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n\t  }\n\t\n\t  function newYear(y) {\n\t    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n\t  }\n\t\n\t  function formatLocale$1(locale) {\n\t    var locale_dateTime = locale.dateTime,\n\t        locale_date = locale.date,\n\t        locale_time = locale.time,\n\t        locale_periods = locale.periods,\n\t        locale_weekdays = locale.days,\n\t        locale_shortWeekdays = locale.shortDays,\n\t        locale_months = locale.months,\n\t        locale_shortMonths = locale.shortMonths;\n\t\n\t    var periodRe = formatRe(locale_periods),\n\t        periodLookup = formatLookup(locale_periods),\n\t        weekdayRe = formatRe(locale_weekdays),\n\t        weekdayLookup = formatLookup(locale_weekdays),\n\t        shortWeekdayRe = formatRe(locale_shortWeekdays),\n\t        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n\t        monthRe = formatRe(locale_months),\n\t        monthLookup = formatLookup(locale_months),\n\t        shortMonthRe = formatRe(locale_shortMonths),\n\t        shortMonthLookup = formatLookup(locale_shortMonths);\n\t\n\t    var formats = {\n\t      \"a\": formatShortWeekday,\n\t      \"A\": formatWeekday,\n\t      \"b\": formatShortMonth,\n\t      \"B\": formatMonth,\n\t      \"c\": null,\n\t      \"d\": formatDayOfMonth,\n\t      \"e\": formatDayOfMonth,\n\t      \"H\": formatHour24,\n\t      \"I\": formatHour12,\n\t      \"j\": formatDayOfYear,\n\t      \"L\": formatMilliseconds,\n\t      \"m\": formatMonthNumber,\n\t      \"M\": formatMinutes,\n\t      \"p\": formatPeriod,\n\t      \"S\": formatSeconds,\n\t      \"U\": formatWeekNumberSunday,\n\t      \"w\": formatWeekdayNumber,\n\t      \"W\": formatWeekNumberMonday,\n\t      \"x\": null,\n\t      \"X\": null,\n\t      \"y\": formatYear,\n\t      \"Y\": formatFullYear,\n\t      \"Z\": formatZone,\n\t      \"%\": formatLiteralPercent\n\t    };\n\t\n\t    var utcFormats = {\n\t      \"a\": formatUTCShortWeekday,\n\t      \"A\": formatUTCWeekday,\n\t      \"b\": formatUTCShortMonth,\n\t      \"B\": formatUTCMonth,\n\t      \"c\": null,\n\t      \"d\": formatUTCDayOfMonth,\n\t      \"e\": formatUTCDayOfMonth,\n\t      \"H\": formatUTCHour24,\n\t      \"I\": formatUTCHour12,\n\t      \"j\": formatUTCDayOfYear,\n\t      \"L\": formatUTCMilliseconds,\n\t      \"m\": formatUTCMonthNumber,\n\t      \"M\": formatUTCMinutes,\n\t      \"p\": formatUTCPeriod,\n\t      \"S\": formatUTCSeconds,\n\t      \"U\": formatUTCWeekNumberSunday,\n\t      \"w\": formatUTCWeekdayNumber,\n\t      \"W\": formatUTCWeekNumberMonday,\n\t      \"x\": null,\n\t      \"X\": null,\n\t      \"y\": formatUTCYear,\n\t      \"Y\": formatUTCFullYear,\n\t      \"Z\": formatUTCZone,\n\t      \"%\": formatLiteralPercent\n\t    };\n\t\n\t    var parses = {\n\t      \"a\": parseShortWeekday,\n\t      \"A\": parseWeekday,\n\t      \"b\": parseShortMonth,\n\t      \"B\": parseMonth,\n\t      \"c\": parseLocaleDateTime,\n\t      \"d\": parseDayOfMonth,\n\t      \"e\": parseDayOfMonth,\n\t      \"H\": parseHour24,\n\t      \"I\": parseHour24,\n\t      \"j\": parseDayOfYear,\n\t      \"L\": parseMilliseconds,\n\t      \"m\": parseMonthNumber,\n\t      \"M\": parseMinutes,\n\t      \"p\": parsePeriod,\n\t      \"S\": parseSeconds,\n\t      \"U\": parseWeekNumberSunday,\n\t      \"w\": parseWeekdayNumber,\n\t      \"W\": parseWeekNumberMonday,\n\t      \"x\": parseLocaleDate,\n\t      \"X\": parseLocaleTime,\n\t      \"y\": parseYear,\n\t      \"Y\": parseFullYear,\n\t      \"Z\": parseZone,\n\t      \"%\": parseLiteralPercent\n\t    };\n\t\n\t    // These recursive directive definitions must be deferred.\n\t    formats.x = newFormat(locale_date, formats);\n\t    formats.X = newFormat(locale_time, formats);\n\t    formats.c = newFormat(locale_dateTime, formats);\n\t    utcFormats.x = newFormat(locale_date, utcFormats);\n\t    utcFormats.X = newFormat(locale_time, utcFormats);\n\t    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\t\n\t    function newFormat(specifier, formats) {\n\t      return function(date) {\n\t        var string = [],\n\t            i = -1,\n\t            j = 0,\n\t            n = specifier.length,\n\t            c,\n\t            pad,\n\t            format;\n\t\n\t        if (!(date instanceof Date)) date = new Date(+date);\n\t\n\t        while (++i < n) {\n\t          if (specifier.charCodeAt(i) === 37) {\n\t            string.push(specifier.slice(j, i));\n\t            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n\t            else pad = c === \"e\" ? \" \" : \"0\";\n\t            if (format = formats[c]) c = format(date, pad);\n\t            string.push(c);\n\t            j = i + 1;\n\t          }\n\t        }\n\t\n\t        string.push(specifier.slice(j, i));\n\t        return string.join(\"\");\n\t      };\n\t    }\n\t\n\t    function newParse(specifier, newDate) {\n\t      return function(string) {\n\t        var d = newYear(1900),\n\t            i = parseSpecifier(d, specifier, string += \"\", 0);\n\t        if (i != string.length) return null;\n\t\n\t        // The am-pm flag is 0 for AM, and 1 for PM.\n\t        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\t\n\t        // Convert day-of-week and week-of-year to day-of-year.\n\t        if (\"W\" in d || \"U\" in d) {\n\t          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n\t          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n\t          d.m = 0;\n\t          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n\t        }\n\t\n\t        // If a time zone is specified, all fields are interpreted as UTC and then\n\t        // offset according to the specified time zone.\n\t        if (\"Z\" in d) {\n\t          d.H += d.Z / 100 | 0;\n\t          d.M += d.Z % 100;\n\t          return utcDate(d);\n\t        }\n\t\n\t        // Otherwise, all fields are in local time.\n\t        return newDate(d);\n\t      };\n\t    }\n\t\n\t    function parseSpecifier(d, specifier, string, j) {\n\t      var i = 0,\n\t          n = specifier.length,\n\t          m = string.length,\n\t          c,\n\t          parse;\n\t\n\t      while (i < n) {\n\t        if (j >= m) return -1;\n\t        c = specifier.charCodeAt(i++);\n\t        if (c === 37) {\n\t          c = specifier.charAt(i++);\n\t          parse = parses[c in pads ? specifier.charAt(i++) : c];\n\t          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n\t        } else if (c != string.charCodeAt(j++)) {\n\t          return -1;\n\t        }\n\t      }\n\t\n\t      return j;\n\t    }\n\t\n\t    function parsePeriod(d, string, i) {\n\t      var n = periodRe.exec(string.slice(i));\n\t      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n\t    }\n\t\n\t    function parseShortWeekday(d, string, i) {\n\t      var n = shortWeekdayRe.exec(string.slice(i));\n\t      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n\t    }\n\t\n\t    function parseWeekday(d, string, i) {\n\t      var n = weekdayRe.exec(string.slice(i));\n\t      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n\t    }\n\t\n\t    function parseShortMonth(d, string, i) {\n\t      var n = shortMonthRe.exec(string.slice(i));\n\t      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n\t    }\n\t\n\t    function parseMonth(d, string, i) {\n\t      var n = monthRe.exec(string.slice(i));\n\t      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n\t    }\n\t\n\t    function parseLocaleDateTime(d, string, i) {\n\t      return parseSpecifier(d, locale_dateTime, string, i);\n\t    }\n\t\n\t    function parseLocaleDate(d, string, i) {\n\t      return parseSpecifier(d, locale_date, string, i);\n\t    }\n\t\n\t    function parseLocaleTime(d, string, i) {\n\t      return parseSpecifier(d, locale_time, string, i);\n\t    }\n\t\n\t    function formatShortWeekday(d) {\n\t      return locale_shortWeekdays[d.getDay()];\n\t    }\n\t\n\t    function formatWeekday(d) {\n\t      return locale_weekdays[d.getDay()];\n\t    }\n\t\n\t    function formatShortMonth(d) {\n\t      return locale_shortMonths[d.getMonth()];\n\t    }\n\t\n\t    function formatMonth(d) {\n\t      return locale_months[d.getMonth()];\n\t    }\n\t\n\t    function formatPeriod(d) {\n\t      return locale_periods[+(d.getHours() >= 12)];\n\t    }\n\t\n\t    function formatUTCShortWeekday(d) {\n\t      return locale_shortWeekdays[d.getUTCDay()];\n\t    }\n\t\n\t    function formatUTCWeekday(d) {\n\t      return locale_weekdays[d.getUTCDay()];\n\t    }\n\t\n\t    function formatUTCShortMonth(d) {\n\t      return locale_shortMonths[d.getUTCMonth()];\n\t    }\n\t\n\t    function formatUTCMonth(d) {\n\t      return locale_months[d.getUTCMonth()];\n\t    }\n\t\n\t    function formatUTCPeriod(d) {\n\t      return locale_periods[+(d.getUTCHours() >= 12)];\n\t    }\n\t\n\t    return {\n\t      format: function(specifier) {\n\t        var f = newFormat(specifier += \"\", formats);\n\t        f.toString = function() { return specifier; };\n\t        return f;\n\t      },\n\t      parse: function(specifier) {\n\t        var p = newParse(specifier += \"\", localDate);\n\t        p.toString = function() { return specifier; };\n\t        return p;\n\t      },\n\t      utcFormat: function(specifier) {\n\t        var f = newFormat(specifier += \"\", utcFormats);\n\t        f.toString = function() { return specifier; };\n\t        return f;\n\t      },\n\t      utcParse: function(specifier) {\n\t        var p = newParse(specifier, utcDate);\n\t        p.toString = function() { return specifier; };\n\t        return p;\n\t      }\n\t    };\n\t  }\n\t\n\t  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"};\n\t  var numberRe = /^\\s*\\d+/;\n\t  var percentRe = /^%/;\n\t  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n\t  function pad(value, fill, width) {\n\t    var sign = value < 0 ? \"-\" : \"\",\n\t        string = (sign ? -value : value) + \"\",\n\t        length = string.length;\n\t    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n\t  }\n\t\n\t  function requote(s) {\n\t    return s.replace(requoteRe, \"\\\\$&\");\n\t  }\n\t\n\t  function formatRe(names) {\n\t    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n\t  }\n\t\n\t  function formatLookup(names) {\n\t    var map = {}, i = -1, n = names.length;\n\t    while (++i < n) map[names[i].toLowerCase()] = i;\n\t    return map;\n\t  }\n\t\n\t  function parseWeekdayNumber(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 1));\n\t    return n ? (d.w = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseWeekNumberSunday(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i));\n\t    return n ? (d.U = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseWeekNumberMonday(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i));\n\t    return n ? (d.W = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseFullYear(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 4));\n\t    return n ? (d.y = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseYear(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseZone(d, string, i) {\n\t    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n\t    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseMonthNumber(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseDayOfMonth(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.d = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseDayOfYear(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 3));\n\t    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseHour24(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.H = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseMinutes(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.M = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseSeconds(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 2));\n\t    return n ? (d.S = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseMilliseconds(d, string, i) {\n\t    var n = numberRe.exec(string.slice(i, i + 3));\n\t    return n ? (d.L = +n[0], i + n[0].length) : -1;\n\t  }\n\t\n\t  function parseLiteralPercent(d, string, i) {\n\t    var n = percentRe.exec(string.slice(i, i + 1));\n\t    return n ? i + n[0].length : -1;\n\t  }\n\t\n\t  function formatDayOfMonth(d, p) {\n\t    return pad(d.getDate(), p, 2);\n\t  }\n\t\n\t  function formatHour24(d, p) {\n\t    return pad(d.getHours(), p, 2);\n\t  }\n\t\n\t  function formatHour12(d, p) {\n\t    return pad(d.getHours() % 12 || 12, p, 2);\n\t  }\n\t\n\t  function formatDayOfYear(d, p) {\n\t    return pad(1 + day.count(year(d), d), p, 3);\n\t  }\n\t\n\t  function formatMilliseconds(d, p) {\n\t    return pad(d.getMilliseconds(), p, 3);\n\t  }\n\t\n\t  function formatMonthNumber(d, p) {\n\t    return pad(d.getMonth() + 1, p, 2);\n\t  }\n\t\n\t  function formatMinutes(d, p) {\n\t    return pad(d.getMinutes(), p, 2);\n\t  }\n\t\n\t  function formatSeconds(d, p) {\n\t    return pad(d.getSeconds(), p, 2);\n\t  }\n\t\n\t  function formatWeekNumberSunday(d, p) {\n\t    return pad(timeWeek.count(year(d), d), p, 2);\n\t  }\n\t\n\t  function formatWeekdayNumber(d) {\n\t    return d.getDay();\n\t  }\n\t\n\t  function formatWeekNumberMonday(d, p) {\n\t    return pad(timeMonday.count(year(d), d), p, 2);\n\t  }\n\t\n\t  function formatYear(d, p) {\n\t    return pad(d.getFullYear() % 100, p, 2);\n\t  }\n\t\n\t  function formatFullYear(d, p) {\n\t    return pad(d.getFullYear() % 10000, p, 4);\n\t  }\n\t\n\t  function formatZone(d) {\n\t    var z = d.getTimezoneOffset();\n\t    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n\t        + pad(z / 60 | 0, \"0\", 2)\n\t        + pad(z % 60, \"0\", 2);\n\t  }\n\t\n\t  function formatUTCDayOfMonth(d, p) {\n\t    return pad(d.getUTCDate(), p, 2);\n\t  }\n\t\n\t  function formatUTCHour24(d, p) {\n\t    return pad(d.getUTCHours(), p, 2);\n\t  }\n\t\n\t  function formatUTCHour12(d, p) {\n\t    return pad(d.getUTCHours() % 12 || 12, p, 2);\n\t  }\n\t\n\t  function formatUTCDayOfYear(d, p) {\n\t    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n\t  }\n\t\n\t  function formatUTCMilliseconds(d, p) {\n\t    return pad(d.getUTCMilliseconds(), p, 3);\n\t  }\n\t\n\t  function formatUTCMonthNumber(d, p) {\n\t    return pad(d.getUTCMonth() + 1, p, 2);\n\t  }\n\t\n\t  function formatUTCMinutes(d, p) {\n\t    return pad(d.getUTCMinutes(), p, 2);\n\t  }\n\t\n\t  function formatUTCSeconds(d, p) {\n\t    return pad(d.getUTCSeconds(), p, 2);\n\t  }\n\t\n\t  function formatUTCWeekNumberSunday(d, p) {\n\t    return pad(utcWeek.count(utcYear(d), d), p, 2);\n\t  }\n\t\n\t  function formatUTCWeekdayNumber(d) {\n\t    return d.getUTCDay();\n\t  }\n\t\n\t  function formatUTCWeekNumberMonday(d, p) {\n\t    return pad(utcMonday.count(utcYear(d), d), p, 2);\n\t  }\n\t\n\t  function formatUTCYear(d, p) {\n\t    return pad(d.getUTCFullYear() % 100, p, 2);\n\t  }\n\t\n\t  function formatUTCFullYear(d, p) {\n\t    return pad(d.getUTCFullYear() % 10000, p, 4);\n\t  }\n\t\n\t  function formatUTCZone() {\n\t    return \"+0000\";\n\t  }\n\t\n\t  function formatLiteralPercent() {\n\t    return \"%\";\n\t  }\n\t\n\t  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\t\n\t  function formatIsoNative(date) {\n\t    return date.toISOString();\n\t  }\n\t\n\t  var formatIso = Date.prototype.toISOString\n\t      ? formatIsoNative\n\t      : utcFormat(isoSpecifier);\n\t\n\t  function parseIsoNative(string) {\n\t    var date = new Date(string);\n\t    return isNaN(date) ? null : date;\n\t  }\n\t\n\t  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n\t      ? parseIsoNative\n\t      : utcParse(isoSpecifier);\n\t\n\t  var array$2 = Array.prototype;\n\t\n\t  var map$2 = array$2.map;\n\t  var slice$3 = array$2.slice;\n\t\n\t  var implicit = {name: \"implicit\"};\n\t\n\t  function ordinal(range) {\n\t    var index = map$1(),\n\t        domain = [],\n\t        unknown = implicit;\n\t\n\t    range = range == null ? [] : slice$3.call(range);\n\t\n\t    function scale(d) {\n\t      var key = d + \"\", i = index.get(key);\n\t      if (!i) {\n\t        if (unknown !== implicit) return unknown;\n\t        index.set(key, i = domain.push(d));\n\t      }\n\t      return range[(i - 1) % range.length];\n\t    }\n\t\n\t    scale.domain = function(_) {\n\t      if (!arguments.length) return domain.slice();\n\t      domain = [], index = map$1();\n\t      var i = -1, n = _.length, d, key;\n\t      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n\t      return scale;\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();\n\t    };\n\t\n\t    scale.unknown = function(_) {\n\t      return arguments.length ? (unknown = _, scale) : unknown;\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return ordinal()\n\t          .domain(domain)\n\t          .range(range)\n\t          .unknown(unknown);\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function band() {\n\t    var scale = ordinal().unknown(undefined),\n\t        domain = scale.domain,\n\t        ordinalRange = scale.range,\n\t        range$$ = [0, 1],\n\t        step,\n\t        bandwidth,\n\t        round = false,\n\t        paddingInner = 0,\n\t        paddingOuter = 0,\n\t        align = 0.5;\n\t\n\t    delete scale.unknown;\n\t\n\t    function rescale() {\n\t      var n = domain().length,\n\t          reverse = range$$[1] < range$$[0],\n\t          start = range$$[reverse - 0],\n\t          stop = range$$[1 - reverse];\n\t      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n\t      if (round) step = Math.floor(step);\n\t      start += (stop - start - step * (n - paddingInner)) * align;\n\t      bandwidth = step * (1 - paddingInner);\n\t      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n\t      var values = range(n).map(function(i) { return start + step * i; });\n\t      return ordinalRange(reverse ? values.reverse() : values);\n\t    }\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (domain(_), rescale()) : domain();\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();\n\t    };\n\t\n\t    scale.rangeRound = function(_) {\n\t      return range$$ = [+_[0], +_[1]], round = true, rescale();\n\t    };\n\t\n\t    scale.bandwidth = function() {\n\t      return bandwidth;\n\t    };\n\t\n\t    scale.step = function() {\n\t      return step;\n\t    };\n\t\n\t    scale.round = function(_) {\n\t      return arguments.length ? (round = !!_, rescale()) : round;\n\t    };\n\t\n\t    scale.padding = function(_) {\n\t      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n\t    };\n\t\n\t    scale.paddingInner = function(_) {\n\t      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n\t    };\n\t\n\t    scale.paddingOuter = function(_) {\n\t      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n\t    };\n\t\n\t    scale.align = function(_) {\n\t      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return band()\n\t          .domain(domain())\n\t          .range(range$$)\n\t          .round(round)\n\t          .paddingInner(paddingInner)\n\t          .paddingOuter(paddingOuter)\n\t          .align(align);\n\t    };\n\t\n\t    return rescale();\n\t  }\n\t\n\t  function pointish(scale) {\n\t    var copy = scale.copy;\n\t\n\t    scale.padding = scale.paddingOuter;\n\t    delete scale.paddingInner;\n\t    delete scale.paddingOuter;\n\t\n\t    scale.copy = function() {\n\t      return pointish(copy());\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function point$4() {\n\t    return pointish(band().paddingInner(1));\n\t  }\n\t\n\t  function constant$3(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function number$1(x) {\n\t    return +x;\n\t  }\n\t\n\t  var unit = [0, 1];\n\t\n\t  function deinterpolate(a, b) {\n\t    return (b -= (a = +a))\n\t        ? function(x) { return (x - a) / b; }\n\t        : constant$3(b);\n\t  }\n\t\n\t  function deinterpolateClamp(deinterpolate) {\n\t    return function(a, b) {\n\t      var d = deinterpolate(a = +a, b = +b);\n\t      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n\t    };\n\t  }\n\t\n\t  function reinterpolateClamp(reinterpolate) {\n\t    return function(a, b) {\n\t      var r = reinterpolate(a = +a, b = +b);\n\t      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n\t    };\n\t  }\n\t\n\t  function bimap(domain, range, deinterpolate, reinterpolate) {\n\t    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n\t    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n\t    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n\t    return function(x) { return r0(d0(x)); };\n\t  }\n\t\n\t  function polymap(domain, range, deinterpolate, reinterpolate) {\n\t    var j = Math.min(domain.length, range.length) - 1,\n\t        d = new Array(j),\n\t        r = new Array(j),\n\t        i = -1;\n\t\n\t    // Reverse descending domains.\n\t    if (domain[j] < domain[0]) {\n\t      domain = domain.slice().reverse();\n\t      range = range.slice().reverse();\n\t    }\n\t\n\t    while (++i < j) {\n\t      d[i] = deinterpolate(domain[i], domain[i + 1]);\n\t      r[i] = reinterpolate(range[i], range[i + 1]);\n\t    }\n\t\n\t    return function(x) {\n\t      var i = bisectRight(domain, x, 1, j) - 1;\n\t      return r[i](d[i](x));\n\t    };\n\t  }\n\t\n\t  function copy(source, target) {\n\t    return target\n\t        .domain(source.domain())\n\t        .range(source.range())\n\t        .interpolate(source.interpolate())\n\t        .clamp(source.clamp());\n\t  }\n\t\n\t  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n\t  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n\t  function continuous(deinterpolate$$, reinterpolate) {\n\t    var domain = unit,\n\t        range = unit,\n\t        interpolate$$ = interpolate,\n\t        clamp = false,\n\t        piecewise,\n\t        output,\n\t        input;\n\t\n\t    function rescale() {\n\t      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n\t      output = input = null;\n\t      return scale;\n\t    }\n\t\n\t    function scale(x) {\n\t      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);\n\t    }\n\t\n\t    scale.invert = function(y) {\n\t      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n\t    };\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n\t    };\n\t\n\t    scale.rangeRound = function(_) {\n\t      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();\n\t    };\n\t\n\t    scale.clamp = function(_) {\n\t      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n\t    };\n\t\n\t    scale.interpolate = function(_) {\n\t      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;\n\t    };\n\t\n\t    return rescale();\n\t  }\n\t\n\t  function tickFormat(domain, count, specifier) {\n\t    var start = domain[0],\n\t        stop = domain[domain.length - 1],\n\t        step = tickStep(start, stop, count == null ? 10 : count),\n\t        precision;\n\t    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n\t    switch (specifier.type) {\n\t      case \"s\": {\n\t        var value = Math.max(Math.abs(start), Math.abs(stop));\n\t        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n\t        return formatPrefix(specifier, value);\n\t      }\n\t      case \"\":\n\t      case \"e\":\n\t      case \"g\":\n\t      case \"p\":\n\t      case \"r\": {\n\t        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n\t        break;\n\t      }\n\t      case \"f\":\n\t      case \"%\": {\n\t        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n\t        break;\n\t      }\n\t    }\n\t    return format(specifier);\n\t  }\n\t\n\t  function linearish(scale) {\n\t    var domain = scale.domain;\n\t\n\t    scale.ticks = function(count) {\n\t      var d = domain();\n\t      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n\t    };\n\t\n\t    scale.tickFormat = function(count, specifier) {\n\t      return tickFormat(domain(), count, specifier);\n\t    };\n\t\n\t    scale.nice = function(count) {\n\t      var d = domain(),\n\t          i = d.length - 1,\n\t          n = count == null ? 10 : count,\n\t          start = d[0],\n\t          stop = d[i],\n\t          step = tickStep(start, stop, n);\n\t\n\t      if (step) {\n\t        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n\t        d[0] = Math.floor(start / step) * step;\n\t        d[i] = Math.ceil(stop / step) * step;\n\t        domain(d);\n\t      }\n\t\n\t      return scale;\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function linear$2() {\n\t    var scale = continuous(deinterpolate, interpolateNumber);\n\t\n\t    scale.copy = function() {\n\t      return copy(scale, linear$2());\n\t    };\n\t\n\t    return linearish(scale);\n\t  }\n\t\n\t  function identity$4() {\n\t    var domain = [0, 1];\n\t\n\t    function scale(x) {\n\t      return +x;\n\t    }\n\t\n\t    scale.invert = scale;\n\t\n\t    scale.domain = scale.range = function(_) {\n\t      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return identity$4().domain(domain);\n\t    };\n\t\n\t    return linearish(scale);\n\t  }\n\t\n\t  function nice(domain, interval) {\n\t    domain = domain.slice();\n\t\n\t    var i0 = 0,\n\t        i1 = domain.length - 1,\n\t        x0 = domain[i0],\n\t        x1 = domain[i1],\n\t        t;\n\t\n\t    if (x1 < x0) {\n\t      t = i0, i0 = i1, i1 = t;\n\t      t = x0, x0 = x1, x1 = t;\n\t    }\n\t\n\t    domain[i0] = interval.floor(x0);\n\t    domain[i1] = interval.ceil(x1);\n\t    return domain;\n\t  }\n\t\n\t  function deinterpolate$1(a, b) {\n\t    return (b = Math.log(b / a))\n\t        ? function(x) { return Math.log(x / a) / b; }\n\t        : constant$3(b);\n\t  }\n\t\n\t  function reinterpolate(a, b) {\n\t    return a < 0\n\t        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n\t        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n\t  }\n\t\n\t  function pow10(x) {\n\t    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n\t  }\n\t\n\t  function powp(base) {\n\t    return base === 10 ? pow10\n\t        : base === Math.E ? Math.exp\n\t        : function(x) { return Math.pow(base, x); };\n\t  }\n\t\n\t  function logp(base) {\n\t    return base === Math.E ? Math.log\n\t        : base === 10 && Math.log10\n\t        || base === 2 && Math.log2\n\t        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n\t  }\n\t\n\t  function reflect(f) {\n\t    return function(x) {\n\t      return -f(-x);\n\t    };\n\t  }\n\t\n\t  function log() {\n\t    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),\n\t        domain = scale.domain,\n\t        base = 10,\n\t        logs = logp(10),\n\t        pows = powp(10);\n\t\n\t    function rescale() {\n\t      logs = logp(base), pows = powp(base);\n\t      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n\t      return scale;\n\t    }\n\t\n\t    scale.base = function(_) {\n\t      return arguments.length ? (base = +_, rescale()) : base;\n\t    };\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (domain(_), rescale()) : domain();\n\t    };\n\t\n\t    scale.ticks = function(count) {\n\t      var d = domain(),\n\t          u = d[0],\n\t          v = d[d.length - 1],\n\t          r;\n\t\n\t      if (r = v < u) i = u, u = v, v = i;\n\t\n\t      var i = logs(u),\n\t          j = logs(v),\n\t          p,\n\t          k,\n\t          t,\n\t          n = count == null ? 10 : +count,\n\t          z = [];\n\t\n\t      if (!(base % 1) && j - i < n) {\n\t        i = Math.round(i) - 1, j = Math.round(j) + 1;\n\t        if (u > 0) for (; i < j; ++i) {\n\t          for (k = 1, p = pows(i); k < base; ++k) {\n\t            t = p * k;\n\t            if (t < u) continue;\n\t            if (t > v) break;\n\t            z.push(t);\n\t          }\n\t        } else for (; i < j; ++i) {\n\t          for (k = base - 1, p = pows(i); k >= 1; --k) {\n\t            t = p * k;\n\t            if (t < u) continue;\n\t            if (t > v) break;\n\t            z.push(t);\n\t          }\n\t        }\n\t        if (r) z.reverse();\n\t      } else {\n\t        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n\t      }\n\t\n\t      return z;\n\t    };\n\t\n\t    scale.tickFormat = function(count, specifier) {\n\t      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n\t      if (typeof specifier !== \"function\") specifier = format(specifier);\n\t      if (count === Infinity) return specifier;\n\t      if (count == null) count = 10;\n\t      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n\t      return function(d) {\n\t        var i = d / pows(Math.round(logs(d)));\n\t        if (i * base < base - 0.5) i *= base;\n\t        return i <= k ? specifier(d) : \"\";\n\t      };\n\t    };\n\t\n\t    scale.nice = function() {\n\t      return domain(nice(domain(), {\n\t        floor: function(x) { return pows(Math.floor(logs(x))); },\n\t        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n\t      }));\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return copy(scale, log().base(base));\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function raise(x, exponent) {\n\t    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n\t  }\n\t\n\t  function pow() {\n\t    var exponent = 1,\n\t        scale = continuous(deinterpolate, reinterpolate),\n\t        domain = scale.domain;\n\t\n\t    function deinterpolate(a, b) {\n\t      return (b = raise(b, exponent) - (a = raise(a, exponent)))\n\t          ? function(x) { return (raise(x, exponent) - a) / b; }\n\t          : constant$3(b);\n\t    }\n\t\n\t    function reinterpolate(a, b) {\n\t      b = raise(b, exponent) - (a = raise(a, exponent));\n\t      return function(t) { return raise(a + b * t, 1 / exponent); };\n\t    }\n\t\n\t    scale.exponent = function(_) {\n\t      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return copy(scale, pow().exponent(exponent));\n\t    };\n\t\n\t    return linearish(scale);\n\t  }\n\t\n\t  function sqrt() {\n\t    return pow().exponent(0.5);\n\t  }\n\t\n\t  function quantile() {\n\t    var domain = [],\n\t        range = [],\n\t        thresholds = [];\n\t\n\t    function rescale() {\n\t      var i = 0, n = Math.max(1, range.length);\n\t      thresholds = new Array(n - 1);\n\t      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n\t      return scale;\n\t    }\n\t\n\t    function scale(x) {\n\t      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];\n\t    }\n\t\n\t    scale.invertExtent = function(y) {\n\t      var i = range.indexOf(y);\n\t      return i < 0 ? [NaN, NaN] : [\n\t        i > 0 ? thresholds[i - 1] : domain[0],\n\t        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n\t      ];\n\t    };\n\t\n\t    scale.domain = function(_) {\n\t      if (!arguments.length) return domain.slice();\n\t      domain = [];\n\t      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n\t      domain.sort(ascending);\n\t      return rescale();\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n\t    };\n\t\n\t    scale.quantiles = function() {\n\t      return thresholds.slice();\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return quantile()\n\t          .domain(domain)\n\t          .range(range);\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function quantize$1() {\n\t    var x0 = 0,\n\t        x1 = 1,\n\t        n = 1,\n\t        domain = [0.5],\n\t        range = [0, 1];\n\t\n\t    function scale(x) {\n\t      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n\t    }\n\t\n\t    function rescale() {\n\t      var i = -1;\n\t      domain = new Array(n);\n\t      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n\t      return scale;\n\t    }\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();\n\t    };\n\t\n\t    scale.invertExtent = function(y) {\n\t      var i = range.indexOf(y);\n\t      return i < 0 ? [NaN, NaN]\n\t          : i < 1 ? [x0, domain[0]]\n\t          : i >= n ? [domain[n - 1], x1]\n\t          : [domain[i - 1], domain[i]];\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return quantize$1()\n\t          .domain([x0, x1])\n\t          .range(range);\n\t    };\n\t\n\t    return linearish(scale);\n\t  }\n\t\n\t  function threshold$1() {\n\t    var domain = [0.5],\n\t        range = [0, 1],\n\t        n = 1;\n\t\n\t    function scale(x) {\n\t      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n\t    }\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n\t    };\n\t\n\t    scale.range = function(_) {\n\t      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n\t    };\n\t\n\t    scale.invertExtent = function(y) {\n\t      var i = range.indexOf(y);\n\t      return [domain[i - 1], domain[i]];\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return threshold$1()\n\t          .domain(domain)\n\t          .range(range);\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\tvar   durationSecond$1 = 1000;\n\tvar   durationMinute$1 = durationSecond$1 * 60;\n\tvar   durationHour$1 = durationMinute$1 * 60;\n\tvar   durationDay$1 = durationHour$1 * 24;\n\tvar   durationWeek$1 = durationDay$1 * 7;\n\t  var durationMonth = durationDay$1 * 30;\n\t  var durationYear = durationDay$1 * 365;\n\t  function date(t) {\n\t    return new Date(t);\n\t  }\n\t\n\t  function number$2(t) {\n\t    return t instanceof Date ? +t : +new Date(+t);\n\t  }\n\t\n\t  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n\t    var scale = continuous(deinterpolate, interpolateNumber),\n\t        invert = scale.invert,\n\t        domain = scale.domain;\n\t\n\t    var formatMillisecond = format(\".%L\"),\n\t        formatSecond = format(\":%S\"),\n\t        formatMinute = format(\"%I:%M\"),\n\t        formatHour = format(\"%I %p\"),\n\t        formatDay = format(\"%a %d\"),\n\t        formatWeek = format(\"%b %d\"),\n\t        formatMonth = format(\"%B\"),\n\t        formatYear = format(\"%Y\");\n\t\n\t    var tickIntervals = [\n\t      [second,  1,      durationSecond$1],\n\t      [second,  5,  5 * durationSecond$1],\n\t      [second, 15, 15 * durationSecond$1],\n\t      [second, 30, 30 * durationSecond$1],\n\t      [minute,  1,      durationMinute$1],\n\t      [minute,  5,  5 * durationMinute$1],\n\t      [minute, 15, 15 * durationMinute$1],\n\t      [minute, 30, 30 * durationMinute$1],\n\t      [  hour,  1,      durationHour$1  ],\n\t      [  hour,  3,  3 * durationHour$1  ],\n\t      [  hour,  6,  6 * durationHour$1  ],\n\t      [  hour, 12, 12 * durationHour$1  ],\n\t      [   day,  1,      durationDay$1   ],\n\t      [   day,  2,  2 * durationDay$1   ],\n\t      [  week,  1,      durationWeek$1  ],\n\t      [ month,  1,      durationMonth ],\n\t      [ month,  3,  3 * durationMonth ],\n\t      [  year,  1,      durationYear  ]\n\t    ];\n\t\n\t    function tickFormat(date) {\n\t      return (second(date) < date ? formatMillisecond\n\t          : minute(date) < date ? formatSecond\n\t          : hour(date) < date ? formatMinute\n\t          : day(date) < date ? formatHour\n\t          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n\t          : year(date) < date ? formatMonth\n\t          : formatYear)(date);\n\t    }\n\t\n\t    function tickInterval(interval, start, stop, step) {\n\t      if (interval == null) interval = 10;\n\t\n\t      // If a desired tick count is specified, pick a reasonable tick interval\n\t      // based on the extent of the domain and a rough estimate of tick size.\n\t      // Otherwise, assume interval is already a time interval and use it.\n\t      if (typeof interval === \"number\") {\n\t        var target = Math.abs(stop - start) / interval,\n\t            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n\t        if (i === tickIntervals.length) {\n\t          step = tickStep(start / durationYear, stop / durationYear, interval);\n\t          interval = year;\n\t        } else if (i) {\n\t          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n\t          step = i[1];\n\t          interval = i[0];\n\t        } else {\n\t          step = tickStep(start, stop, interval);\n\t          interval = millisecond;\n\t        }\n\t      }\n\t\n\t      return step == null ? interval : interval.every(step);\n\t    }\n\t\n\t    scale.invert = function(y) {\n\t      return new Date(invert(y));\n\t    };\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date);\n\t    };\n\t\n\t    scale.ticks = function(interval, step) {\n\t      var d = domain(),\n\t          t0 = d[0],\n\t          t1 = d[d.length - 1],\n\t          r = t1 < t0,\n\t          t;\n\t      if (r) t = t0, t0 = t1, t1 = t;\n\t      t = tickInterval(interval, t0, t1, step);\n\t      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n\t      return r ? t.reverse() : t;\n\t    };\n\t\n\t    scale.tickFormat = function(count, specifier) {\n\t      return specifier == null ? tickFormat : format(specifier);\n\t    };\n\t\n\t    scale.nice = function(interval, step) {\n\t      var d = domain();\n\t      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n\t          ? domain(nice(d, interval))\n\t          : scale;\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n\t    };\n\t\n\t    return scale;\n\t  }\n\t\n\t  function time() {\n\t    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n\t  }\n\t\n\t  function utcTime() {\n\t    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n\t  }\n\t\n\t  function colors(s) {\n\t    return s.match(/.{6}/g).map(function(x) {\n\t      return \"#\" + x;\n\t    });\n\t  }\n\t\n\t  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\t\n\t  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\t\n\t  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\t\n\t  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\t\n\t  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n\t\n\t  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\t\n\t  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\t\n\t  var rainbow = cubehelix();\n\t\n\t  function rainbow$1(t) {\n\t    if (t < 0 || t > 1) t -= Math.floor(t);\n\t    var ts = Math.abs(t - 0.5);\n\t    rainbow.h = 360 * t - 100;\n\t    rainbow.s = 1.5 - 1.5 * ts;\n\t    rainbow.l = 0.8 - 0.9 * ts;\n\t    return rainbow + \"\";\n\t  }\n\t\n\t  function ramp(range) {\n\t    var n = range.length;\n\t    return function(t) {\n\t      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n\t    };\n\t  }\n\t\n\t  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\t\n\t  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\t\n\t  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\t\n\t  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\t\n\t  function sequential(interpolate) {\n\t    var x0 = 0,\n\t        x1 = 1,\n\t        clamp = false;\n\t\n\t    function scale(x) {\n\t      var t = (x - x0) / (x1 - x0);\n\t      return interpolate(clamp ? Math.max(0, Math.min(1, t)) : t);\n\t    }\n\t\n\t    scale.domain = function(_) {\n\t      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n\t    };\n\t\n\t    scale.clamp = function(_) {\n\t      return arguments.length ? (clamp = !!_, scale) : clamp;\n\t    };\n\t\n\t    scale.copy = function() {\n\t      return sequential(interpolate).domain([x0, x1]).clamp(clamp);\n\t    };\n\t\n\t    return linearish(scale);\n\t  }\n\t\n\t  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\t\n\t  var namespaces = {\n\t    svg: \"http://www.w3.org/2000/svg\",\n\t    xhtml: xhtml,\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    xml: \"http://www.w3.org/XML/1998/namespace\",\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\"\n\t  };\n\t\n\t  function namespace(name) {\n\t    var prefix = name += \"\", i = prefix.indexOf(\":\");\n\t    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n\t    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n\t  }\n\t\n\t  function creatorInherit(name) {\n\t    return function() {\n\t      var document = this.ownerDocument,\n\t          uri = this.namespaceURI;\n\t      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n\t          ? document.createElement(name)\n\t          : document.createElementNS(uri, name);\n\t    };\n\t  }\n\t\n\t  function creatorFixed(fullname) {\n\t    return function() {\n\t      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n\t    };\n\t  }\n\t\n\t  function creator(name) {\n\t    var fullname = namespace(name);\n\t    return (fullname.local\n\t        ? creatorFixed\n\t        : creatorInherit)(fullname);\n\t  }\n\t\n\t  var nextId = 0;\n\t\n\t  function local() {\n\t    return new Local;\n\t  }\n\t\n\t  function Local() {\n\t    this._ = \"@\" + (++nextId).toString(36);\n\t  }\n\t\n\t  Local.prototype = local.prototype = {\n\t    constructor: Local,\n\t    get: function(node) {\n\t      var id = this._;\n\t      while (!(id in node)) if (!(node = node.parentNode)) return;\n\t      return node[id];\n\t    },\n\t    set: function(node, value) {\n\t      return node[this._] = value;\n\t    },\n\t    remove: function(node) {\n\t      return this._ in node && delete node[this._];\n\t    },\n\t    toString: function() {\n\t      return this._;\n\t    }\n\t  };\n\t\n\t  var matcher = function(selector) {\n\t    return function() {\n\t      return this.matches(selector);\n\t    };\n\t  };\n\t\n\t  if (typeof document !== \"undefined\") {\n\t    var element = document.documentElement;\n\t    if (!element.matches) {\n\t      var vendorMatches = element.webkitMatchesSelector\n\t          || element.msMatchesSelector\n\t          || element.mozMatchesSelector\n\t          || element.oMatchesSelector;\n\t      matcher = function(selector) {\n\t        return function() {\n\t          return vendorMatches.call(this, selector);\n\t        };\n\t      };\n\t    }\n\t  }\n\t\n\t  var matcher$1 = matcher;\n\t\n\t  var filterEvents = {};\n\t\n\t  exports.event = null;\n\t\n\t  if (typeof document !== \"undefined\") {\n\t    var element$1 = document.documentElement;\n\t    if (!(\"onmouseenter\" in element$1)) {\n\t      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n\t    }\n\t  }\n\t\n\t  function filterContextListener(listener, index, group) {\n\t    listener = contextListener(listener, index, group);\n\t    return function(event) {\n\t      var related = event.relatedTarget;\n\t      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n\t        listener.call(this, event);\n\t      }\n\t    };\n\t  }\n\t\n\t  function contextListener(listener, index, group) {\n\t    return function(event1) {\n\t      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n\t      exports.event = event1;\n\t      try {\n\t        listener.call(this, this.__data__, index, group);\n\t      } finally {\n\t        exports.event = event0;\n\t      }\n\t    };\n\t  }\n\t\n\t  function parseTypenames$1(typenames) {\n\t    return typenames.trim().split(/^|\\s+/).map(function(t) {\n\t      var name = \"\", i = t.indexOf(\".\");\n\t      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n\t      return {type: t, name: name};\n\t    });\n\t  }\n\t\n\t  function onRemove(typename) {\n\t    return function() {\n\t      var on = this.__on;\n\t      if (!on) return;\n\t      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n\t        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n\t          this.removeEventListener(o.type, o.listener, o.capture);\n\t        } else {\n\t          on[++i] = o;\n\t        }\n\t      }\n\t      if (++i) on.length = i;\n\t      else delete this.__on;\n\t    };\n\t  }\n\t\n\t  function onAdd(typename, value, capture) {\n\t    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n\t    return function(d, i, group) {\n\t      var on = this.__on, o, listener = wrap(value, i, group);\n\t      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n\t        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n\t          this.removeEventListener(o.type, o.listener, o.capture);\n\t          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n\t          o.value = value;\n\t          return;\n\t        }\n\t      }\n\t      this.addEventListener(typename.type, listener, capture);\n\t      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n\t      if (!on) this.__on = [o];\n\t      else on.push(o);\n\t    };\n\t  }\n\t\n\t  function selection_on(typename, value, capture) {\n\t    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\n\t\n\t    if (arguments.length < 2) {\n\t      var on = this.node().__on;\n\t      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n\t        for (i = 0, o = on[j]; i < n; ++i) {\n\t          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n\t            return o.value;\n\t          }\n\t        }\n\t      }\n\t      return;\n\t    }\n\t\n\t    on = value ? onAdd : onRemove;\n\t    if (capture == null) capture = false;\n\t    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n\t    return this;\n\t  }\n\t\n\t  function customEvent(event1, listener, that, args) {\n\t    var event0 = exports.event;\n\t    event1.sourceEvent = exports.event;\n\t    exports.event = event1;\n\t    try {\n\t      return listener.apply(that, args);\n\t    } finally {\n\t      exports.event = event0;\n\t    }\n\t  }\n\t\n\t  function sourceEvent() {\n\t    var current = exports.event, source;\n\t    while (source = current.sourceEvent) current = source;\n\t    return current;\n\t  }\n\t\n\t  function point$5(node, event) {\n\t    var svg = node.ownerSVGElement || node;\n\t\n\t    if (svg.createSVGPoint) {\n\t      var point = svg.createSVGPoint();\n\t      point.x = event.clientX, point.y = event.clientY;\n\t      point = point.matrixTransform(node.getScreenCTM().inverse());\n\t      return [point.x, point.y];\n\t    }\n\t\n\t    var rect = node.getBoundingClientRect();\n\t    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n\t  }\n\t\n\t  function mouse(node) {\n\t    var event = sourceEvent();\n\t    if (event.changedTouches) event = event.changedTouches[0];\n\t    return point$5(node, event);\n\t  }\n\t\n\t  function selector(selector) {\n\t    return function() {\n\t      return this.querySelector(selector);\n\t    };\n\t  }\n\t\n\t  function selection_select(select) {\n\t    if (typeof select !== \"function\") select = selector(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n\t          subgroup[i] = subnode;\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, this._parents);\n\t  }\n\t\n\t  function selectorAll(selector) {\n\t    return function() {\n\t      return this.querySelectorAll(selector);\n\t    };\n\t  }\n\t\n\t  function selection_selectAll(select) {\n\t    if (typeof select !== \"function\") select = selectorAll(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          subgroups.push(select.call(node, node.__data__, i, group));\n\t          parents.push(node);\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, parents);\n\t  }\n\t\n\t  function selection_filter(match) {\n\t    if (typeof match !== \"function\") match = matcher$1(match);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n\t          subgroup.push(node);\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Selection(subgroups, this._parents);\n\t  }\n\t\n\t  function constant$4(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\t\n\t  function bindIndex(parent, group, enter, update, exit, data) {\n\t    var i = 0,\n\t        node,\n\t        groupLength = group.length,\n\t        dataLength = data.length;\n\t\n\t    // Put any non-null nodes that fit into update.\n\t    // Put any null nodes into enter.\n\t    // Put any remaining data into enter.\n\t    for (; i < dataLength; ++i) {\n\t      if (node = group[i]) {\n\t        node.__data__ = data[i];\n\t        update[i] = node;\n\t      } else {\n\t        enter[i] = new EnterNode(parent, data[i]);\n\t      }\n\t    }\n\t\n\t    // Put any non-null nodes that don’t fit into exit.\n\t    for (; i < groupLength; ++i) {\n\t      if (node = group[i]) {\n\t        exit[i] = node;\n\t      }\n\t    }\n\t  }\n\t\n\t  function bindKey(parent, group, enter, update, exit, data, key) {\n\t    var i,\n\t        node,\n\t        nodeByKeyValue = {},\n\t        groupLength = group.length,\n\t        dataLength = data.length,\n\t        keyValues = new Array(groupLength),\n\t        keyValue;\n\t\n\t    // Compute the key for each node.\n\t    // If multiple nodes have the same key, the duplicates are added to exit.\n\t    for (i = 0; i < groupLength; ++i) {\n\t      if (node = group[i]) {\n\t        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n\t        if (keyValue in nodeByKeyValue) {\n\t          exit[i] = node;\n\t        } else {\n\t          nodeByKeyValue[keyValue] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    // Compute the key for each datum.\n\t    // If there a node associated with this key, join and add it to update.\n\t    // If there is not (or the key is a duplicate), add it to enter.\n\t    for (i = 0; i < dataLength; ++i) {\n\t      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n\t      if (node = nodeByKeyValue[keyValue]) {\n\t        update[i] = node;\n\t        node.__data__ = data[i];\n\t        nodeByKeyValue[keyValue] = null;\n\t      } else {\n\t        enter[i] = new EnterNode(parent, data[i]);\n\t      }\n\t    }\n\t\n\t    // Add any remaining nodes that were not bound to data to exit.\n\t    for (i = 0; i < groupLength; ++i) {\n\t      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n\t        exit[i] = node;\n\t      }\n\t    }\n\t  }\n\t\n\t  function selection_data(value, key) {\n\t    if (!value) {\n\t      data = new Array(this.size()), j = -1;\n\t      this.each(function(d) { data[++j] = d; });\n\t      return data;\n\t    }\n\t\n\t    var bind = key ? bindKey : bindIndex,\n\t        parents = this._parents,\n\t        groups = this._groups;\n\t\n\t    if (typeof value !== \"function\") value = constant$4(value);\n\t\n\t    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n\t      var parent = parents[j],\n\t          group = groups[j],\n\t          groupLength = group.length,\n\t          data = value.call(parent, parent && parent.__data__, j, parents),\n\t          dataLength = data.length,\n\t          enterGroup = enter[j] = new Array(dataLength),\n\t          updateGroup = update[j] = new Array(dataLength),\n\t          exitGroup = exit[j] = new Array(groupLength);\n\t\n\t      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\t\n\t      // Now connect the enter nodes to their following update node, such that\n\t      // appendChild can insert the materialized enter node before this node,\n\t      // rather than at the end of the parent node.\n\t      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n\t        if (previous = enterGroup[i0]) {\n\t          if (i0 >= i1) i1 = i0 + 1;\n\t          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n\t          previous._next = next || null;\n\t        }\n\t      }\n\t    }\n\t\n\t    update = new Selection(update, parents);\n\t    update._enter = enter;\n\t    update._exit = exit;\n\t    return update;\n\t  }\n\t\n\t  function EnterNode(parent, datum) {\n\t    this.ownerDocument = parent.ownerDocument;\n\t    this.namespaceURI = parent.namespaceURI;\n\t    this._next = null;\n\t    this._parent = parent;\n\t    this.__data__ = datum;\n\t  }\n\t\n\t  EnterNode.prototype = {\n\t    constructor: EnterNode,\n\t    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n\t    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n\t    querySelector: function(selector) { return this._parent.querySelector(selector); },\n\t    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n\t  };\n\t\n\t  function sparse(update) {\n\t    return new Array(update.length);\n\t  }\n\t\n\t  function selection_enter() {\n\t    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n\t  }\n\t\n\t  function selection_exit() {\n\t    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n\t  }\n\t\n\t  function selection_merge(selection) {\n\t\n\t    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n\t      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if (node = group0[i] || group1[i]) {\n\t          merge[i] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    for (; j < m0; ++j) {\n\t      merges[j] = groups0[j];\n\t    }\n\t\n\t    return new Selection(merges, this._parents);\n\t  }\n\t\n\t  function selection_order() {\n\t\n\t    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n\t      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n\t        if (node = group[i]) {\n\t          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n\t          next = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function selection_sort(compare) {\n\t    if (!compare) compare = ascending$2;\n\t\n\t    function compareNode(a, b) {\n\t      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n\t    }\n\t\n\t    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          sortgroup[i] = node;\n\t        }\n\t      }\n\t      sortgroup.sort(compareNode);\n\t    }\n\t\n\t    return new Selection(sortgroups, this._parents).order();\n\t  }\n\t\n\t  function ascending$2(a, b) {\n\t    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\t  }\n\t\n\t  function selection_call() {\n\t    var callback = arguments[0];\n\t    arguments[0] = this;\n\t    callback.apply(null, arguments);\n\t    return this;\n\t  }\n\t\n\t  function selection_nodes() {\n\t    var nodes = new Array(this.size()), i = -1;\n\t    this.each(function() { nodes[++i] = this; });\n\t    return nodes;\n\t  }\n\t\n\t  function selection_node() {\n\t\n\t    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n\t      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n\t        var node = group[i];\n\t        if (node) return node;\n\t      }\n\t    }\n\t\n\t    return null;\n\t  }\n\t\n\t  function selection_size() {\n\t    var size = 0;\n\t    this.each(function() { ++size; });\n\t    return size;\n\t  }\n\t\n\t  function selection_empty() {\n\t    return !this.node();\n\t  }\n\t\n\t  function selection_each(callback) {\n\t\n\t    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n\t      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n\t        if (node = group[i]) callback.call(node, node.__data__, i, group);\n\t      }\n\t    }\n\t\n\t    return this;\n\t  }\n\t\n\t  function attrRemove(name) {\n\t    return function() {\n\t      this.removeAttribute(name);\n\t    };\n\t  }\n\t\n\t  function attrRemoveNS(fullname) {\n\t    return function() {\n\t      this.removeAttributeNS(fullname.space, fullname.local);\n\t    };\n\t  }\n\t\n\t  function attrConstant(name, value) {\n\t    return function() {\n\t      this.setAttribute(name, value);\n\t    };\n\t  }\n\t\n\t  function attrConstantNS(fullname, value) {\n\t    return function() {\n\t      this.setAttributeNS(fullname.space, fullname.local, value);\n\t    };\n\t  }\n\t\n\t  function attrFunction(name, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.removeAttribute(name);\n\t      else this.setAttribute(name, v);\n\t    };\n\t  }\n\t\n\t  function attrFunctionNS(fullname, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n\t      else this.setAttributeNS(fullname.space, fullname.local, v);\n\t    };\n\t  }\n\t\n\t  function selection_attr(name, value) {\n\t    var fullname = namespace(name);\n\t\n\t    if (arguments.length < 2) {\n\t      var node = this.node();\n\t      return fullname.local\n\t          ? node.getAttributeNS(fullname.space, fullname.local)\n\t          : node.getAttribute(fullname);\n\t    }\n\t\n\t    return this.each((value == null\n\t        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n\t        ? (fullname.local ? attrFunctionNS : attrFunction)\n\t        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n\t  }\n\t\n\t  function window(node) {\n\t    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n\t        || (node.document && node) // node is a Window\n\t        || node.defaultView; // node is a Document\n\t  }\n\t\n\t  function styleRemove(name) {\n\t    return function() {\n\t      this.style.removeProperty(name);\n\t    };\n\t  }\n\t\n\t  function styleConstant(name, value, priority) {\n\t    return function() {\n\t      this.style.setProperty(name, value, priority);\n\t    };\n\t  }\n\t\n\t  function styleFunction(name, value, priority) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) this.style.removeProperty(name);\n\t      else this.style.setProperty(name, v, priority);\n\t    };\n\t  }\n\t\n\t  function selection_style(name, value, priority) {\n\t    var node;\n\t    return arguments.length > 1\n\t        ? this.each((value == null\n\t              ? styleRemove : typeof value === \"function\"\n\t              ? styleFunction\n\t              : styleConstant)(name, value, priority == null ? \"\" : priority))\n\t        : window(node = this.node())\n\t            .getComputedStyle(node, null)\n\t            .getPropertyValue(name);\n\t  }\n\t\n\t  function propertyRemove(name) {\n\t    return function() {\n\t      delete this[name];\n\t    };\n\t  }\n\t\n\t  function propertyConstant(name, value) {\n\t    return function() {\n\t      this[name] = value;\n\t    };\n\t  }\n\t\n\t  function propertyFunction(name, value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      if (v == null) delete this[name];\n\t      else this[name] = v;\n\t    };\n\t  }\n\t\n\t  function selection_property(name, value) {\n\t    return arguments.length > 1\n\t        ? this.each((value == null\n\t            ? propertyRemove : typeof value === \"function\"\n\t            ? propertyFunction\n\t            : propertyConstant)(name, value))\n\t        : this.node()[name];\n\t  }\n\t\n\t  function classArray(string) {\n\t    return string.trim().split(/^|\\s+/);\n\t  }\n\t\n\t  function classList(node) {\n\t    return node.classList || new ClassList(node);\n\t  }\n\t\n\t  function ClassList(node) {\n\t    this._node = node;\n\t    this._names = classArray(node.getAttribute(\"class\") || \"\");\n\t  }\n\t\n\t  ClassList.prototype = {\n\t    add: function(name) {\n\t      var i = this._names.indexOf(name);\n\t      if (i < 0) {\n\t        this._names.push(name);\n\t        this._node.setAttribute(\"class\", this._names.join(\" \"));\n\t      }\n\t    },\n\t    remove: function(name) {\n\t      var i = this._names.indexOf(name);\n\t      if (i >= 0) {\n\t        this._names.splice(i, 1);\n\t        this._node.setAttribute(\"class\", this._names.join(\" \"));\n\t      }\n\t    },\n\t    contains: function(name) {\n\t      return this._names.indexOf(name) >= 0;\n\t    }\n\t  };\n\t\n\t  function classedAdd(node, names) {\n\t    var list = classList(node), i = -1, n = names.length;\n\t    while (++i < n) list.add(names[i]);\n\t  }\n\t\n\t  function classedRemove(node, names) {\n\t    var list = classList(node), i = -1, n = names.length;\n\t    while (++i < n) list.remove(names[i]);\n\t  }\n\t\n\t  function classedTrue(names) {\n\t    return function() {\n\t      classedAdd(this, names);\n\t    };\n\t  }\n\t\n\t  function classedFalse(names) {\n\t    return function() {\n\t      classedRemove(this, names);\n\t    };\n\t  }\n\t\n\t  function classedFunction(names, value) {\n\t    return function() {\n\t      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n\t    };\n\t  }\n\t\n\t  function selection_classed(name, value) {\n\t    var names = classArray(name + \"\");\n\t\n\t    if (arguments.length < 2) {\n\t      var list = classList(this.node()), i = -1, n = names.length;\n\t      while (++i < n) if (!list.contains(names[i])) return false;\n\t      return true;\n\t    }\n\t\n\t    return this.each((typeof value === \"function\"\n\t        ? classedFunction : value\n\t        ? classedTrue\n\t        : classedFalse)(names, value));\n\t  }\n\t\n\t  function textRemove() {\n\t    this.textContent = \"\";\n\t  }\n\t\n\t  function textConstant(value) {\n\t    return function() {\n\t      this.textContent = value;\n\t    };\n\t  }\n\t\n\t  function textFunction(value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      this.textContent = v == null ? \"\" : v;\n\t    };\n\t  }\n\t\n\t  function selection_text(value) {\n\t    return arguments.length\n\t        ? this.each(value == null\n\t            ? textRemove : (typeof value === \"function\"\n\t            ? textFunction\n\t            : textConstant)(value))\n\t        : this.node().textContent;\n\t  }\n\t\n\t  function htmlRemove() {\n\t    this.innerHTML = \"\";\n\t  }\n\t\n\t  function htmlConstant(value) {\n\t    return function() {\n\t      this.innerHTML = value;\n\t    };\n\t  }\n\t\n\t  function htmlFunction(value) {\n\t    return function() {\n\t      var v = value.apply(this, arguments);\n\t      this.innerHTML = v == null ? \"\" : v;\n\t    };\n\t  }\n\t\n\t  function selection_html(value) {\n\t    return arguments.length\n\t        ? this.each(value == null\n\t            ? htmlRemove : (typeof value === \"function\"\n\t            ? htmlFunction\n\t            : htmlConstant)(value))\n\t        : this.node().innerHTML;\n\t  }\n\t\n\t  function raise$1() {\n\t    if (this.nextSibling) this.parentNode.appendChild(this);\n\t  }\n\t\n\t  function selection_raise() {\n\t    return this.each(raise$1);\n\t  }\n\t\n\t  function lower() {\n\t    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n\t  }\n\t\n\t  function selection_lower() {\n\t    return this.each(lower);\n\t  }\n\t\n\t  function selection_append(name) {\n\t    var create = typeof name === \"function\" ? name : creator(name);\n\t    return this.select(function() {\n\t      return this.appendChild(create.apply(this, arguments));\n\t    });\n\t  }\n\t\n\t  function constantNull() {\n\t    return null;\n\t  }\n\t\n\t  function selection_insert(name, before) {\n\t    var create = typeof name === \"function\" ? name : creator(name),\n\t        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n\t    return this.select(function() {\n\t      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n\t    });\n\t  }\n\t\n\t  function remove() {\n\t    var parent = this.parentNode;\n\t    if (parent) parent.removeChild(this);\n\t  }\n\t\n\t  function selection_remove() {\n\t    return this.each(remove);\n\t  }\n\t\n\t  function selection_datum(value) {\n\t    return arguments.length\n\t        ? this.property(\"__data__\", value)\n\t        : this.node().__data__;\n\t  }\n\t\n\t  function dispatchEvent(node, type, params) {\n\t    var window$$ = window(node),\n\t        event = window$$.CustomEvent;\n\t\n\t    if (event) {\n\t      event = new event(type, params);\n\t    } else {\n\t      event = window$$.document.createEvent(\"Event\");\n\t      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n\t      else event.initEvent(type, false, false);\n\t    }\n\t\n\t    node.dispatchEvent(event);\n\t  }\n\t\n\t  function dispatchConstant(type, params) {\n\t    return function() {\n\t      return dispatchEvent(this, type, params);\n\t    };\n\t  }\n\t\n\t  function dispatchFunction(type, params) {\n\t    return function() {\n\t      return dispatchEvent(this, type, params.apply(this, arguments));\n\t    };\n\t  }\n\t\n\t  function selection_dispatch(type, params) {\n\t    return this.each((typeof params === \"function\"\n\t        ? dispatchFunction\n\t        : dispatchConstant)(type, params));\n\t  }\n\t\n\t  var root = [null];\n\t\n\t  function Selection(groups, parents) {\n\t    this._groups = groups;\n\t    this._parents = parents;\n\t  }\n\t\n\t  function selection() {\n\t    return new Selection([[document.documentElement]], root);\n\t  }\n\t\n\t  Selection.prototype = selection.prototype = {\n\t    constructor: Selection,\n\t    select: selection_select,\n\t    selectAll: selection_selectAll,\n\t    filter: selection_filter,\n\t    data: selection_data,\n\t    enter: selection_enter,\n\t    exit: selection_exit,\n\t    merge: selection_merge,\n\t    order: selection_order,\n\t    sort: selection_sort,\n\t    call: selection_call,\n\t    nodes: selection_nodes,\n\t    node: selection_node,\n\t    size: selection_size,\n\t    empty: selection_empty,\n\t    each: selection_each,\n\t    attr: selection_attr,\n\t    style: selection_style,\n\t    property: selection_property,\n\t    classed: selection_classed,\n\t    text: selection_text,\n\t    html: selection_html,\n\t    raise: selection_raise,\n\t    lower: selection_lower,\n\t    append: selection_append,\n\t    insert: selection_insert,\n\t    remove: selection_remove,\n\t    datum: selection_datum,\n\t    on: selection_on,\n\t    dispatch: selection_dispatch\n\t  };\n\t\n\t  function select(selector) {\n\t    return typeof selector === \"string\"\n\t        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n\t        : new Selection([[selector]], root);\n\t  }\n\t\n\t  function selectAll(selector) {\n\t    return typeof selector === \"string\"\n\t        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n\t        : new Selection([selector], root);\n\t  }\n\t\n\t  function touch(node, touches, identifier) {\n\t    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\t\n\t    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n\t      if ((touch = touches[i]).identifier === identifier) {\n\t        return point$5(node, touch);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  }\n\t\n\t  function touches(node, touches) {\n\t    if (touches == null) touches = sourceEvent().touches;\n\t\n\t    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n\t      points[i] = point$5(node, touches[i]);\n\t    }\n\t\n\t    return points;\n\t  }\n\t\n\t  var emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\n\t  var emptyTween = [];\n\t\n\t  var CREATED = 0;\n\t  var SCHEDULED = 1;\n\t  var STARTING = 2;\n\t  var STARTED = 3;\n\t  var ENDING = 4;\n\t  var ENDED = 5;\n\t\n\t  function schedule(node, name, id, index, group, timing) {\n\t    var schedules = node.__transition;\n\t    if (!schedules) node.__transition = {};\n\t    else if (id in schedules) return;\n\t    create(node, id, {\n\t      name: name,\n\t      index: index, // For context during callback.\n\t      group: group, // For context during callback.\n\t      on: emptyOn,\n\t      tween: emptyTween,\n\t      time: timing.time,\n\t      delay: timing.delay,\n\t      duration: timing.duration,\n\t      ease: timing.ease,\n\t      timer: null,\n\t      state: CREATED\n\t    });\n\t  }\n\t\n\t  function init(node, id) {\n\t    var schedule = node.__transition;\n\t    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n\t    return schedule;\n\t  }\n\t\n\t  function set$2(node, id) {\n\t    var schedule = node.__transition;\n\t    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n\t    return schedule;\n\t  }\n\t\n\t  function get$1(node, id) {\n\t    var schedule = node.__transition;\n\t    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n\t    return schedule;\n\t  }\n\t\n\t  function create(node, id, self) {\n\t    var schedules = node.__transition,\n\t        tween;\n\t\n\t    // Initialize the self timer when the transition is created.\n\t    // Note the actual delay is not known until the first callback!\n\t    schedules[id] = self;\n\t    self.timer = timer(schedule, 0, self.time);\n\t\n\t    // If the delay is greater than this first sleep, sleep some more;\n\t    // otherwise, start immediately.\n\t    function schedule(elapsed) {\n\t      self.state = SCHEDULED;\n\t      if (self.delay <= elapsed) start(elapsed - self.delay);\n\t      else self.timer.restart(start, self.delay, self.time);\n\t    }\n\t\n\t    function start(elapsed) {\n\t      var i, j, n, o;\n\t\n\t      for (i in schedules) {\n\t        o = schedules[i];\n\t        if (o.name !== self.name) continue;\n\t\n\t        // Interrupt the active transition, if any.\n\t        // Dispatch the interrupt event.\n\t        if (o.state === STARTED) {\n\t          o.state = ENDED;\n\t          o.timer.stop();\n\t          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n\t          delete schedules[i];\n\t        }\n\t\n\t        // Cancel any pre-empted transitions. No interrupt event is dispatched\n\t        // because the cancelled transitions never started. Note that this also\n\t        // removes this transition from the pending list!\n\t        else if (+i < id) {\n\t          o.state = ENDED;\n\t          o.timer.stop();\n\t          delete schedules[i];\n\t        }\n\t      }\n\t\n\t      // Defer the first tick to end of the current frame; see mbostock/d3#1576.\n\t      // Note the transition may be canceled after start and before the first tick!\n\t      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n\t      // Assuming this is successful, subsequent callbacks go straight to tick.\n\t      timeout$1(function() {\n\t        if (self.state === STARTED) {\n\t          self.timer.restart(tick, self.delay, self.time);\n\t          tick(elapsed);\n\t        }\n\t      });\n\t\n\t      // Dispatch the start event.\n\t      // Note this must be done before the tween are initialized.\n\t      self.state = STARTING;\n\t      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n\t      if (self.state !== STARTING) return; // interrupted\n\t      self.state = STARTED;\n\t\n\t      // Initialize the tween, deleting null tween.\n\t      tween = new Array(n = self.tween.length);\n\t      for (i = 0, j = -1; i < n; ++i) {\n\t        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n\t          tween[++j] = o;\n\t        }\n\t      }\n\t      tween.length = j + 1;\n\t    }\n\t\n\t    function tick(elapsed) {\n\t      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),\n\t          i = -1,\n\t          n = tween.length;\n\t\n\t      while (++i < n) {\n\t        tween[i].call(null, t);\n\t      }\n\t\n\t      // Dispatch the end event.\n\t      if (self.state === ENDING) {\n\t        self.state = ENDED;\n\t        self.timer.stop();\n\t        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n\t        for (i in schedules) if (+i !== id) return void delete schedules[id];\n\t        delete node.__transition;\n\t      }\n\t    }\n\t  }\n\t\n\t  function interrupt(node, name) {\n\t    var schedules = node.__transition,\n\t        schedule,\n\t        active,\n\t        empty = true,\n\t        i;\n\t\n\t    if (!schedules) return;\n\t\n\t    name = name == null ? null : name + \"\";\n\t\n\t    for (i in schedules) {\n\t      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n\t      active = schedule.state === STARTED;\n\t      schedule.state = ENDED;\n\t      schedule.timer.stop();\n\t      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n\t      delete schedules[i];\n\t    }\n\t\n\t    if (empty) delete node.__transition;\n\t  }\n\t\n\t  function selection_interrupt(name) {\n\t    return this.each(function() {\n\t      interrupt(this, name);\n\t    });\n\t  }\n\t\n\t  function tweenRemove(id, name) {\n\t    var tween0, tween1;\n\t    return function() {\n\t      var schedule = set$2(this, id),\n\t          tween = schedule.tween;\n\t\n\t      // If this node shared tween with the previous node,\n\t      // just assign the updated shared tween and we’re done!\n\t      // Otherwise, copy-on-write.\n\t      if (tween !== tween0) {\n\t        tween1 = tween0 = tween;\n\t        for (var i = 0, n = tween1.length; i < n; ++i) {\n\t          if (tween1[i].name === name) {\n\t            tween1 = tween1.slice();\n\t            tween1.splice(i, 1);\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      schedule.tween = tween1;\n\t    };\n\t  }\n\t\n\t  function tweenFunction(id, name, value) {\n\t    var tween0, tween1;\n\t    if (typeof value !== \"function\") throw new Error;\n\t    return function() {\n\t      var schedule = set$2(this, id),\n\t          tween = schedule.tween;\n\t\n\t      // If this node shared tween with the previous node,\n\t      // just assign the updated shared tween and we’re done!\n\t      // Otherwise, copy-on-write.\n\t      if (tween !== tween0) {\n\t        tween1 = (tween0 = tween).slice();\n\t        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n\t          if (tween1[i].name === name) {\n\t            tween1[i] = t;\n\t            break;\n\t          }\n\t        }\n\t        if (i === n) tween1.push(t);\n\t      }\n\t\n\t      schedule.tween = tween1;\n\t    };\n\t  }\n\t\n\t  function transition_tween(name, value) {\n\t    var id = this._id;\n\t\n\t    name += \"\";\n\t\n\t    if (arguments.length < 2) {\n\t      var tween = get$1(this.node(), id).tween;\n\t      for (var i = 0, n = tween.length, t; i < n; ++i) {\n\t        if ((t = tween[i]).name === name) {\n\t          return t.value;\n\t        }\n\t      }\n\t      return null;\n\t    }\n\t\n\t    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n\t  }\n\t\n\t  function tweenValue(transition, name, value) {\n\t    var id = transition._id;\n\t\n\t    transition.each(function() {\n\t      var schedule = set$2(this, id);\n\t      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n\t    });\n\t\n\t    return function(node) {\n\t      return get$1(node, id).value[name];\n\t    };\n\t  }\n\t\n\t  function interpolate$1(a, b) {\n\t    var c;\n\t    return (typeof b === \"number\" ? interpolateNumber\n\t        : b instanceof color ? interpolateRgb\n\t        : (c = color(b)) ? (b = c, interpolateRgb)\n\t        : interpolateString)(a, b);\n\t  }\n\t\n\t  function attrRemove$1(name) {\n\t    return function() {\n\t      this.removeAttribute(name);\n\t    };\n\t  }\n\t\n\t  function attrRemoveNS$1(fullname) {\n\t    return function() {\n\t      this.removeAttributeNS(fullname.space, fullname.local);\n\t    };\n\t  }\n\t\n\t  function attrConstant$1(name, interpolate, value1) {\n\t    var value00,\n\t        interpolate0;\n\t    return function() {\n\t      var value0 = this.getAttribute(name);\n\t      return value0 === value1 ? null\n\t          : value0 === value00 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value1);\n\t    };\n\t  }\n\t\n\t  function attrConstantNS$1(fullname, interpolate, value1) {\n\t    var value00,\n\t        interpolate0;\n\t    return function() {\n\t      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n\t      return value0 === value1 ? null\n\t          : value0 === value00 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value1);\n\t    };\n\t  }\n\t\n\t  function attrFunction$1(name, interpolate, value) {\n\t    var value00,\n\t        value10,\n\t        interpolate0;\n\t    return function() {\n\t      var value0, value1 = value(this);\n\t      if (value1 == null) return void this.removeAttribute(name);\n\t      value0 = this.getAttribute(name);\n\t      return value0 === value1 ? null\n\t          : value0 === value00 && value1 === value10 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n\t    };\n\t  }\n\t\n\t  function attrFunctionNS$1(fullname, interpolate, value) {\n\t    var value00,\n\t        value10,\n\t        interpolate0;\n\t    return function() {\n\t      var value0, value1 = value(this);\n\t      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n\t      value0 = this.getAttributeNS(fullname.space, fullname.local);\n\t      return value0 === value1 ? null\n\t          : value0 === value00 && value1 === value10 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n\t    };\n\t  }\n\t\n\t  function transition_attr(name, value) {\n\t    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform$2 : interpolate$1;\n\t    return this.attrTween(name, typeof value === \"function\"\n\t        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n\t        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\n\t        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n\t  }\n\t\n\t  function attrTweenNS(fullname, value) {\n\t    function tween() {\n\t      var node = this, i = value.apply(node, arguments);\n\t      return i && function(t) {\n\t        node.setAttributeNS(fullname.space, fullname.local, i(t));\n\t      };\n\t    }\n\t    tween._value = value;\n\t    return tween;\n\t  }\n\t\n\t  function attrTween(name, value) {\n\t    function tween() {\n\t      var node = this, i = value.apply(node, arguments);\n\t      return i && function(t) {\n\t        node.setAttribute(name, i(t));\n\t      };\n\t    }\n\t    tween._value = value;\n\t    return tween;\n\t  }\n\t\n\t  function transition_attrTween(name, value) {\n\t    var key = \"attr.\" + name;\n\t    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n\t    if (value == null) return this.tween(key, null);\n\t    if (typeof value !== \"function\") throw new Error;\n\t    var fullname = namespace(name);\n\t    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n\t  }\n\t\n\t  function delayFunction(id, value) {\n\t    return function() {\n\t      init(this, id).delay = +value.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  function delayConstant(id, value) {\n\t    return value = +value, function() {\n\t      init(this, id).delay = value;\n\t    };\n\t  }\n\t\n\t  function transition_delay(value) {\n\t    var id = this._id;\n\t\n\t    return arguments.length\n\t        ? this.each((typeof value === \"function\"\n\t            ? delayFunction\n\t            : delayConstant)(id, value))\n\t        : get$1(this.node(), id).delay;\n\t  }\n\t\n\t  function durationFunction(id, value) {\n\t    return function() {\n\t      set$2(this, id).duration = +value.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  function durationConstant(id, value) {\n\t    return value = +value, function() {\n\t      set$2(this, id).duration = value;\n\t    };\n\t  }\n\t\n\t  function transition_duration(value) {\n\t    var id = this._id;\n\t\n\t    return arguments.length\n\t        ? this.each((typeof value === \"function\"\n\t            ? durationFunction\n\t            : durationConstant)(id, value))\n\t        : get$1(this.node(), id).duration;\n\t  }\n\t\n\t  function easeConstant(id, value) {\n\t    if (typeof value !== \"function\") throw new Error;\n\t    return function() {\n\t      set$2(this, id).ease = value;\n\t    };\n\t  }\n\t\n\t  function transition_ease(value) {\n\t    var id = this._id;\n\t\n\t    return arguments.length\n\t        ? this.each(easeConstant(id, value))\n\t        : get$1(this.node(), id).ease;\n\t  }\n\t\n\t  function transition_filter(match) {\n\t    if (typeof match !== \"function\") match = matcher$1(match);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n\t          subgroup[i] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Transition(subgroups, this._parents, this._name, this._id);\n\t  }\n\t\n\t  function transition_merge(transition) {\n\t    if (transition._id !== this._id) throw new Error;\n\t\n\t    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n\t      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n\t        if (node = group0[i] || group1[i]) {\n\t          merge[i] = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    for (; j < m0; ++j) {\n\t      merges[j] = groups0[j];\n\t    }\n\t\n\t    return new Transition(merges, this._parents, this._name, this._id);\n\t  }\n\t\n\t  function start$1(name) {\n\t    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n\t      var i = t.indexOf(\".\");\n\t      if (i >= 0) t = t.slice(0, i);\n\t      return !t || t === \"start\";\n\t    });\n\t  }\n\t\n\t  function onFunction(id, name, listener) {\n\t    var on0, on1, sit = start$1(name) ? init : set$2;\n\t    return function() {\n\t      var schedule = sit(this, id),\n\t          on = schedule.on;\n\t\n\t      // If this node shared a dispatch with the previous node,\n\t      // just assign the updated shared dispatch and we’re done!\n\t      // Otherwise, copy-on-write.\n\t      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\t\n\t      schedule.on = on1;\n\t    };\n\t  }\n\t\n\t  function transition_on(name, listener) {\n\t    var id = this._id;\n\t\n\t    return arguments.length < 2\n\t        ? get$1(this.node(), id).on.on(name)\n\t        : this.each(onFunction(id, name, listener));\n\t  }\n\t\n\t  function removeFunction(id) {\n\t    return function() {\n\t      var parent = this.parentNode;\n\t      for (var i in this.__transition) if (+i !== id) return;\n\t      if (parent) parent.removeChild(this);\n\t    };\n\t  }\n\t\n\t  function transition_remove() {\n\t    return this.on(\"end.remove\", removeFunction(this._id));\n\t  }\n\t\n\t  function transition_select(select) {\n\t    var name = this._name,\n\t        id = this._id;\n\t\n\t    if (typeof select !== \"function\") select = selector(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n\t        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n\t          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n\t          subgroup[i] = subnode;\n\t          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Transition(subgroups, this._parents, name, id);\n\t  }\n\t\n\t  function transition_selectAll(select) {\n\t    var name = this._name,\n\t        id = this._id;\n\t\n\t    if (typeof select !== \"function\") select = selectorAll(select);\n\t\n\t    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n\t            if (child = children[k]) {\n\t              schedule(child, name, id, k, children, inherit);\n\t            }\n\t          }\n\t          subgroups.push(children);\n\t          parents.push(node);\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Transition(subgroups, parents, name, id);\n\t  }\n\t\n\t  var Selection$1 = selection.prototype.constructor;\n\t\n\t  function transition_selection() {\n\t    return new Selection$1(this._groups, this._parents);\n\t  }\n\t\n\t  function styleRemove$1(name, interpolate) {\n\t    var value00,\n\t        value10,\n\t        interpolate0;\n\t    return function() {\n\t      var style = window(this).getComputedStyle(this, null),\n\t          value0 = style.getPropertyValue(name),\n\t          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n\t      return value0 === value1 ? null\n\t          : value0 === value00 && value1 === value10 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n\t    };\n\t  }\n\t\n\t  function styleRemoveEnd(name) {\n\t    return function() {\n\t      this.style.removeProperty(name);\n\t    };\n\t  }\n\t\n\t  function styleConstant$1(name, interpolate, value1) {\n\t    var value00,\n\t        interpolate0;\n\t    return function() {\n\t      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);\n\t      return value0 === value1 ? null\n\t          : value0 === value00 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value1);\n\t    };\n\t  }\n\t\n\t  function styleFunction$1(name, interpolate, value) {\n\t    var value00,\n\t        value10,\n\t        interpolate0;\n\t    return function() {\n\t      var style = window(this).getComputedStyle(this, null),\n\t          value0 = style.getPropertyValue(name),\n\t          value1 = value(this);\n\t      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n\t      return value0 === value1 ? null\n\t          : value0 === value00 && value1 === value10 ? interpolate0\n\t          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n\t    };\n\t  }\n\t\n\t  function transition_style(name, value, priority) {\n\t    var i = (name += \"\") === \"transform\" ? interpolateTransform$1 : interpolate$1;\n\t    return value == null ? this\n\t            .styleTween(name, styleRemove$1(name, i))\n\t            .on(\"end.style.\" + name, styleRemoveEnd(name))\n\t        : this.styleTween(name, typeof value === \"function\"\n\t            ? styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))\n\t            : styleConstant$1(name, i, value), priority);\n\t  }\n\t\n\t  function styleTween(name, value, priority) {\n\t    function tween() {\n\t      var node = this, i = value.apply(node, arguments);\n\t      return i && function(t) {\n\t        node.style.setProperty(name, i(t), priority);\n\t      };\n\t    }\n\t    tween._value = value;\n\t    return tween;\n\t  }\n\t\n\t  function transition_styleTween(name, value, priority) {\n\t    var key = \"style.\" + (name += \"\");\n\t    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n\t    if (value == null) return this.tween(key, null);\n\t    if (typeof value !== \"function\") throw new Error;\n\t    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n\t  }\n\t\n\t  function textConstant$1(value) {\n\t    return function() {\n\t      this.textContent = value;\n\t    };\n\t  }\n\t\n\t  function textFunction$1(value) {\n\t    return function() {\n\t      var value1 = value(this);\n\t      this.textContent = value1 == null ? \"\" : value1;\n\t    };\n\t  }\n\t\n\t  function transition_text(value) {\n\t    return this.tween(\"text\", typeof value === \"function\"\n\t        ? textFunction$1(tweenValue(this, \"text\", value))\n\t        : textConstant$1(value == null ? \"\" : value + \"\"));\n\t  }\n\t\n\t  function transition_transition() {\n\t    var name = this._name,\n\t        id0 = this._id,\n\t        id1 = newId();\n\t\n\t    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          var inherit = get$1(node, id0);\n\t          schedule(node, name, id1, i, group, {\n\t            time: inherit.time + inherit.delay + inherit.duration,\n\t            delay: 0,\n\t            duration: inherit.duration,\n\t            ease: inherit.ease\n\t          });\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Transition(groups, this._parents, name, id1);\n\t  }\n\t\n\t  var id = 0;\n\t\n\t  function Transition(groups, parents, name, id) {\n\t    this._groups = groups;\n\t    this._parents = parents;\n\t    this._name = name;\n\t    this._id = id;\n\t  }\n\t\n\t  function transition(name) {\n\t    return selection().transition(name);\n\t  }\n\t\n\t  function newId() {\n\t    return ++id;\n\t  }\n\t\n\t  var selection_prototype = selection.prototype;\n\t\n\t  Transition.prototype = transition.prototype = {\n\t    constructor: Transition,\n\t    select: transition_select,\n\t    selectAll: transition_selectAll,\n\t    filter: transition_filter,\n\t    merge: transition_merge,\n\t    selection: transition_selection,\n\t    transition: transition_transition,\n\t    call: selection_prototype.call,\n\t    nodes: selection_prototype.nodes,\n\t    node: selection_prototype.node,\n\t    size: selection_prototype.size,\n\t    empty: selection_prototype.empty,\n\t    each: selection_prototype.each,\n\t    on: transition_on,\n\t    attr: transition_attr,\n\t    attrTween: transition_attrTween,\n\t    style: transition_style,\n\t    styleTween: transition_styleTween,\n\t    text: transition_text,\n\t    remove: transition_remove,\n\t    tween: transition_tween,\n\t    delay: transition_delay,\n\t    duration: transition_duration,\n\t    ease: transition_ease\n\t  };\n\t\n\t  var defaultTiming = {\n\t    time: null, // Set on use.\n\t    delay: 0,\n\t    duration: 250,\n\t    ease: easeCubicInOut\n\t  };\n\t\n\t  function inherit(node, id) {\n\t    var timing;\n\t    while (!(timing = node.__transition) || !(timing = timing[id])) {\n\t      if (!(node = node.parentNode)) {\n\t        return defaultTiming.time = now(), defaultTiming;\n\t      }\n\t    }\n\t    return timing;\n\t  }\n\t\n\t  function selection_transition(name) {\n\t    var id,\n\t        timing;\n\t\n\t    if (name instanceof Transition) {\n\t      id = name._id, name = name._name;\n\t    } else {\n\t      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n\t    }\n\t\n\t    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n\t      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n\t        if (node = group[i]) {\n\t          schedule(node, name, id, i, group, timing || inherit(node, id));\n\t        }\n\t      }\n\t    }\n\t\n\t    return new Transition(groups, this._parents, name, id);\n\t  }\n\t\n\t  selection.prototype.interrupt = selection_interrupt;\n\t  selection.prototype.transition = selection_transition;\n\t\n\t  var root$1 = [null];\n\t\n\t  function active(node, name) {\n\t    var schedules = node.__transition,\n\t        schedule,\n\t        i;\n\t\n\t    if (schedules) {\n\t      name = name == null ? null : name + \"\";\n\t      for (i in schedules) {\n\t        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n\t          return new Transition([[node]], root$1, name, +i);\n\t        }\n\t      }\n\t    }\n\t\n\t    return null;\n\t  }\n\t\n\t  var slice$4 = Array.prototype.slice;\n\t\n\t  function identity$5(x) {\n\t    return x;\n\t  }\n\t\n\t  var top = 1;\n\t  var right = 2;\n\t  var bottom = 3;\n\t  var left = 4;\n\tvar   epsilon$2 = 1e-6;\n\t  function translateX(scale0, scale1, d) {\n\t    var x = scale0(d);\n\t    return \"translate(\" + (isFinite(x) ? x : scale1(d)) + \",0)\";\n\t  }\n\t\n\t  function translateY(scale0, scale1, d) {\n\t    var y = scale0(d);\n\t    return \"translate(0,\" + (isFinite(y) ? y : scale1(d)) + \")\";\n\t  }\n\t\n\t  function center(scale) {\n\t    var width = scale.bandwidth() / 2;\n\t    return function(d) {\n\t      return scale(d) + width;\n\t    };\n\t  }\n\t\n\t  function entering() {\n\t    return !this.__axis;\n\t  }\n\t\n\t  function axis(orient, scale) {\n\t    var tickArguments = [],\n\t        tickValues = null,\n\t        tickFormat = null,\n\t        tickSizeInner = 6,\n\t        tickSizeOuter = 6,\n\t        tickPadding = 3;\n\t\n\t    function axis(context) {\n\t      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n\t          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,\n\t          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n\t          transform = orient === top || orient === bottom ? translateX : translateY,\n\t          range = scale.range(),\n\t          range0 = range[0] + 0.5,\n\t          range1 = range[range.length - 1] + 0.5,\n\t          position = (scale.bandwidth ? center : identity$5)(scale.copy()),\n\t          selection = context.selection ? context.selection() : context,\n\t          path = selection.selectAll(\".domain\").data([null]),\n\t          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n\t          tickExit = tick.exit(),\n\t          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n\t          line = tick.select(\"line\"),\n\t          text = tick.select(\"text\"),\n\t          k = orient === top || orient === left ? -1 : 1,\n\t          x, y = orient === left || orient === right ? (x = \"x\", \"y\") : (x = \"y\", \"x\");\n\t\n\t      path = path.merge(path.enter().insert(\"path\", \".tick\")\n\t          .attr(\"class\", \"domain\")\n\t          .attr(\"stroke\", \"#000\"));\n\t\n\t      tick = tick.merge(tickEnter);\n\t\n\t      line = line.merge(tickEnter.append(\"line\")\n\t          .attr(\"stroke\", \"#000\")\n\t          .attr(x + \"2\", k * tickSizeInner)\n\t          .attr(y + \"1\", 0.5)\n\t          .attr(y + \"2\", 0.5));\n\t\n\t      text = text.merge(tickEnter.append(\"text\")\n\t          .attr(\"fill\", \"#000\")\n\t          .attr(x, k * spacing)\n\t          .attr(y, 0.5)\n\t          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \".71em\" : \".32em\"));\n\t\n\t      if (context !== selection) {\n\t        path = path.transition(context);\n\t        tick = tick.transition(context);\n\t        line = line.transition(context);\n\t        text = text.transition(context);\n\t\n\t        tickExit = tickExit.transition(context)\n\t            .attr(\"opacity\", epsilon$2)\n\t            .attr(\"transform\", function(d) { return transform(position, this.parentNode.__axis || position, d); });\n\t\n\t        tickEnter\n\t            .attr(\"opacity\", epsilon$2)\n\t            .attr(\"transform\", function(d) { return transform(this.parentNode.__axis || position, position, d); });\n\t      }\n\t\n\t      tickExit.remove();\n\t\n\t      path\n\t          .attr(\"d\", orient === left || orient == right\n\t              ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\n\t              : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\t\n\t      tick\n\t          .attr(\"opacity\", 1)\n\t          .attr(\"transform\", function(d) { return transform(position, position, d); });\n\t\n\t      line\n\t          .attr(x + \"2\", k * tickSizeInner);\n\t\n\t      text\n\t          .attr(x, k * spacing)\n\t          .text(format);\n\t\n\t      selection.filter(entering)\n\t          .attr(\"fill\", \"none\")\n\t          .attr(\"font-size\", 10)\n\t          .attr(\"font-family\", \"sans-serif\")\n\t          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\t\n\t      selection\n\t          .each(function() { this.__axis = position; });\n\t    }\n\t\n\t    axis.scale = function(_) {\n\t      return arguments.length ? (scale = _, axis) : scale;\n\t    };\n\t\n\t    axis.ticks = function() {\n\t      return tickArguments = slice$4.call(arguments), axis;\n\t    };\n\t\n\t    axis.tickArguments = function(_) {\n\t      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();\n\t    };\n\t\n\t    axis.tickValues = function(_) {\n\t      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();\n\t    };\n\t\n\t    axis.tickFormat = function(_) {\n\t      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n\t    };\n\t\n\t    axis.tickSize = function(_) {\n\t      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n\t    };\n\t\n\t    axis.tickSizeInner = function(_) {\n\t      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n\t    };\n\t\n\t    axis.tickSizeOuter = function(_) {\n\t      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n\t    };\n\t\n\t    axis.tickPadding = function(_) {\n\t      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n\t    };\n\t\n\t    return axis;\n\t  }\n\t\n\t  function axisTop(scale) {\n\t    return axis(top, scale);\n\t  }\n\t\n\t  function axisRight(scale) {\n\t    return axis(right, scale);\n\t  }\n\t\n\t  function axisBottom(scale) {\n\t    return axis(bottom, scale);\n\t  }\n\t\n\t  function axisLeft(scale) {\n\t    return axis(left, scale);\n\t  }\n\t\n\t  function defaultSeparation(a, b) {\n\t    return a.parent === b.parent ? 1 : 2;\n\t  }\n\t\n\t  function meanX(children) {\n\t    return children.reduce(meanXReduce, 0) / children.length;\n\t  }\n\t\n\t  function meanXReduce(x, c) {\n\t    return x + c.x;\n\t  }\n\t\n\t  function maxY(children) {\n\t    return 1 + children.reduce(maxYReduce, 0);\n\t  }\n\t\n\t  function maxYReduce(y, c) {\n\t    return Math.max(y, c.y);\n\t  }\n\t\n\t  function leafLeft(node) {\n\t    var children;\n\t    while (children = node.children) node = children[0];\n\t    return node;\n\t  }\n\t\n\t  function leafRight(node) {\n\t    var children;\n\t    while (children = node.children) node = children[children.length - 1];\n\t    return node;\n\t  }\n\t\n\t  function cluster() {\n\t    var separation = defaultSeparation,\n\t        dx = 1,\n\t        dy = 1,\n\t        nodeSize = false;\n\t\n\t    function cluster(root) {\n\t      var previousNode,\n\t          x = 0;\n\t\n\t      // First walk, computing the initial x & y values.\n\t      root.eachAfter(function(node) {\n\t        var children = node.children;\n\t        if (children) {\n\t          node.x = meanX(children);\n\t          node.y = maxY(children);\n\t        } else {\n\t          node.x = previousNode ? x += separation(node, previousNode) : 0;\n\t          node.y = 0;\n\t          previousNode = node;\n\t        }\n\t      });\n\t\n\t      var left = leafLeft(root),\n\t          right = leafRight(root),\n\t          x0 = left.x - separation(left, right) / 2,\n\t          x1 = right.x + separation(right, left) / 2;\n\t\n\t      // Second walk, normalizing x & y to the desired size.\n\t      return root.eachAfter(nodeSize ? function(node) {\n\t        node.x = (node.x - root.x) * dx;\n\t        node.y = (root.y - node.y) * dy;\n\t      } : function(node) {\n\t        node.x = (node.x - x0) / (x1 - x0) * dx;\n\t        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n\t      });\n\t    }\n\t\n\t    cluster.separation = function(x) {\n\t      return arguments.length ? (separation = x, cluster) : separation;\n\t    };\n\t\n\t    cluster.size = function(x) {\n\t      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n\t    };\n\t\n\t    cluster.nodeSize = function(x) {\n\t      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n\t    };\n\t\n\t    return cluster;\n\t  }\n\t\n\t  function node_each(callback) {\n\t    var node = this, current, next = [node], children, i, n;\n\t    do {\n\t      current = next.reverse(), next = [];\n\t      while (node = current.pop()) {\n\t        callback(node), children = node.children;\n\t        if (children) for (i = 0, n = children.length; i < n; ++i) {\n\t          next.push(children[i]);\n\t        }\n\t      }\n\t    } while (next.length);\n\t    return this;\n\t  }\n\t\n\t  function node_eachBefore(callback) {\n\t    var node = this, nodes = [node], children, i;\n\t    while (node = nodes.pop()) {\n\t      callback(node), children = node.children;\n\t      if (children) for (i = children.length - 1; i >= 0; --i) {\n\t        nodes.push(children[i]);\n\t      }\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function node_eachAfter(callback) {\n\t    var node = this, nodes = [node], next = [], children, i, n;\n\t    while (node = nodes.pop()) {\n\t      next.push(node), children = node.children;\n\t      if (children) for (i = 0, n = children.length; i < n; ++i) {\n\t        nodes.push(children[i]);\n\t      }\n\t    }\n\t    while (node = next.pop()) {\n\t      callback(node);\n\t    }\n\t    return this;\n\t  }\n\t\n\t  function node_sum(value) {\n\t    return this.eachAfter(function(node) {\n\t      var sum = +value(node.data) || 0,\n\t          children = node.children,\n\t          i = children && children.length;\n\t      while (--i >= 0) sum += children[i].value;\n\t      node.value = sum;\n\t    });\n\t  }\n\t\n\t  function node_sort(compare) {\n\t    return this.eachBefore(function(node) {\n\t      if (node.children) {\n\t        node.children.sort(compare);\n\t      }\n\t    });\n\t  }\n\t\n\t  function node_path(end) {\n\t    var start = this,\n\t        ancestor = leastCommonAncestor(start, end),\n\t        nodes = [start];\n\t    while (start !== ancestor) {\n\t      start = start.parent;\n\t      nodes.push(start);\n\t    }\n\t    var k = nodes.length;\n\t    while (end !== ancestor) {\n\t      nodes.splice(k, 0, end);\n\t      end = end.parent;\n\t    }\n\t    return nodes;\n\t  }\n\t\n\t  function leastCommonAncestor(a, b) {\n\t    if (a === b) return a;\n\t    var aNodes = a.ancestors(),\n\t        bNodes = b.ancestors(),\n\t        c = null;\n\t    a = aNodes.pop();\n\t    b = bNodes.pop();\n\t    while (a === b) {\n\t      c = a;\n\t      a = aNodes.pop();\n\t      b = bNodes.pop();\n\t    }\n\t    return c;\n\t  }\n\t\n\t  function node_ancestors() {\n\t    var node = this, nodes = [node];\n\t    while (node = node.parent) {\n\t      nodes.push(node);\n\t    }\n\t    return nodes;\n\t  }\n\t\n\t  function node_descendants() {\n\t    var nodes = [];\n\t    this.each(function(node) {\n\t      nodes.push(node);\n\t    });\n\t    return nodes;\n\t  }\n\t\n\t  function node_leaves() {\n\t    var leaves = [];\n\t    this.eachBefore(function(node) {\n\t      if (!node.children) {\n\t        leaves.push(node);\n\t      }\n\t    });\n\t    return leaves;\n\t  }\n\t\n\t  function node_links() {\n\t    var root = this, links = [];\n\t    root.each(function(node) {\n\t      if (node !== root) { // Don’t include the root’s parent, if any.\n\t        links.push({source: node.parent, target: node});\n\t      }\n\t    });\n\t    return links;\n\t  }\n\t\n\t  function hierarchy(data, children) {\n\t    var root = new Node(data),\n\t        valued = +data.value && (root.value = data.value),\n\t        node,\n\t        nodes = [root],\n\t        child,\n\t        childs,\n\t        i,\n\t        n;\n\t\n\t    if (children == null) children = defaultChildren;\n\t\n\t    while (node = nodes.pop()) {\n\t      if (valued) node.value = +node.data.value;\n\t      if ((childs = children(node.data)) && (n = childs.length)) {\n\t        node.children = new Array(n);\n\t        for (i = n - 1; i >= 0; --i) {\n\t          nodes.push(child = node.children[i] = new Node(childs[i]));\n\t          child.parent = node;\n\t          child.depth = node.depth + 1;\n\t        }\n\t      }\n\t    }\n\t\n\t    return root.eachBefore(computeHeight);\n\t  }\n\t\n\t  function node_copy() {\n\t    return hierarchy(this).eachBefore(copyData);\n\t  }\n\t\n\t  function defaultChildren(d) {\n\t    return d.children;\n\t  }\n\t\n\t  function copyData(node) {\n\t    node.data = node.data.data;\n\t  }\n\t\n\t  function computeHeight(node) {\n\t    var height = 0;\n\t    do node.height = height;\n\t    while ((node = node.parent) && (node.height < ++height));\n\t  }\n\t\n\t  function Node(data) {\n\t    this.data = data;\n\t    this.depth =\n\t    this.height = 0;\n\t    this.parent = null;\n\t  }\n\t\n\t  Node.prototype = hierarchy.prototype = {\n\t    constructor: Node,\n\t    each: node_each,\n\t    eachAfter: node_eachAfter,\n\t    eachBefore: node_eachBefore,\n\t    sum: node_sum,\n\t    sort: node_sort,\n\t    path: node_path,\n\t    ancestors: node_ancestors,\n\t    descendants: node_descendants,\n\t    leaves: node_leaves,\n\t    links: node_links,\n\t    copy: node_copy\n\t  };\n\t\n\t  function Node$2(value) {\n\t    this._ = value;\n\t    this.next = null;\n\t  }\n\t\n\t  function shuffle$1(array) {\n\t    var i,\n\t        n = (array = array.slice()).length,\n\t        head = null,\n\t        node = head;\n\t\n\t    while (n) {\n\t      var next = new Node$2(array[n - 1]);\n\t      if (node) node = node.next = next;\n\t      else node = head = next;\n\t      array[i] = array[--n];\n\t    }\n\t\n\t    return {\n\t      head: head,\n\t      tail: node\n\t    };\n\t  }\n\t\n\t  function enclose(circles) {\n\t    return encloseN(shuffle$1(circles), []);\n\t  }\n\t\n\t  function encloses(a, b) {\n\t    var dx = b.x - a.x,\n\t        dy = b.y - a.y,\n\t        dr = a.r - b.r;\n\t    return dr * dr + 1e-6 > dx * dx + dy * dy;\n\t  }\n\t\n\t  // Returns the smallest circle that contains circles L and intersects circles B.\n\t  function encloseN(L, B) {\n\t    var circle,\n\t        l0 = null,\n\t        l1 = L.head,\n\t        l2,\n\t        p1;\n\t\n\t    switch (B.length) {\n\t      case 1: circle = enclose1(B[0]); break;\n\t      case 2: circle = enclose2(B[0], B[1]); break;\n\t      case 3: circle = enclose3(B[0], B[1], B[2]); break;\n\t    }\n\t\n\t    while (l1) {\n\t      p1 = l1._, l2 = l1.next;\n\t      if (!circle || !encloses(circle, p1)) {\n\t\n\t        // Temporarily truncate L before l1.\n\t        if (l0) L.tail = l0, l0.next = null;\n\t        else L.head = L.tail = null;\n\t\n\t        B.push(p1);\n\t        circle = encloseN(L, B); // Note: reorders L!\n\t        B.pop();\n\t\n\t        // Move l1 to the front of L and reconnect the truncated list L.\n\t        if (L.head) l1.next = L.head, L.head = l1;\n\t        else l1.next = null, L.head = L.tail = l1;\n\t        l0 = L.tail, l0.next = l2;\n\t\n\t      } else {\n\t        l0 = l1;\n\t      }\n\t      l1 = l2;\n\t    }\n\t\n\t    L.tail = l0;\n\t    return circle;\n\t  }\n\t\n\t  function enclose1(a) {\n\t    return {\n\t      x: a.x,\n\t      y: a.y,\n\t      r: a.r\n\t    };\n\t  }\n\t\n\t  function enclose2(a, b) {\n\t    var x1 = a.x, y1 = a.y, r1 = a.r,\n\t        x2 = b.x, y2 = b.y, r2 = b.r,\n\t        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n\t        l = Math.sqrt(x21 * x21 + y21 * y21);\n\t    return {\n\t      x: (x1 + x2 + x21 / l * r21) / 2,\n\t      y: (y1 + y2 + y21 / l * r21) / 2,\n\t      r: (l + r1 + r2) / 2\n\t    };\n\t  }\n\t\n\t  function enclose3(a, b, c) {\n\t    var x1 = a.x, y1 = a.y, r1 = a.r,\n\t        x2 = b.x, y2 = b.y, r2 = b.r,\n\t        x3 = c.x, y3 = c.y, r3 = c.r,\n\t        a2 = 2 * (x1 - x2),\n\t        b2 = 2 * (y1 - y2),\n\t        c2 = 2 * (r2 - r1),\n\t        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,\n\t        a3 = 2 * (x1 - x3),\n\t        b3 = 2 * (y1 - y3),\n\t        c3 = 2 * (r3 - r1),\n\t        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,\n\t        ab = a3 * b2 - a2 * b3,\n\t        xa = (b2 * d3 - b3 * d2) / ab - x1,\n\t        xb = (b3 * c2 - b2 * c3) / ab,\n\t        ya = (a3 * d2 - a2 * d3) / ab - y1,\n\t        yb = (a2 * c3 - a3 * c2) / ab,\n\t        A = xb * xb + yb * yb - 1,\n\t        B = 2 * (xa * xb + ya * yb + r1),\n\t        C = xa * xa + ya * ya - r1 * r1,\n\t        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);\n\t    return {\n\t      x: xa + xb * r + x1,\n\t      y: ya + yb * r + y1,\n\t      r: r\n\t    };\n\t  }\n\t\n\t  function place(a, b, c) {\n\t    var ax = a.x,\n\t        ay = a.y,\n\t        da = b.r + c.r,\n\t        db = a.r + c.r,\n\t        dx = b.x - ax,\n\t        dy = b.y - ay,\n\t        dc = dx * dx + dy * dy;\n\t    if (dc) {\n\t      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n\t          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n\t      c.x = ax + x * dx + y * dy;\n\t      c.y = ay + x * dy - y * dx;\n\t    } else {\n\t      c.x = ax + db;\n\t      c.y = ay;\n\t    }\n\t  }\n\t\n\t  function intersects(a, b) {\n\t    var dx = b.x - a.x,\n\t        dy = b.y - a.y,\n\t        dr = a.r + b.r;\n\t    return dr * dr > dx * dx + dy * dy;\n\t  }\n\t\n\t  function distance2(circle, x, y) {\n\t    var dx = circle.x - x,\n\t        dy = circle.y - y;\n\t    return dx * dx + dy * dy;\n\t  }\n\t\n\t  function Node$1(circle) {\n\t    this._ = circle;\n\t    this.next = null;\n\t    this.previous = null;\n\t  }\n\t\n\t  function packEnclose(circles) {\n\t    if (!(n = circles.length)) return 0;\n\t\n\t    var a, b, c, n;\n\t\n\t    // Place the first circle.\n\t    a = circles[0], a.x = 0, a.y = 0;\n\t    if (!(n > 1)) return a.r;\n\t\n\t    // Place the second circle.\n\t    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n\t    if (!(n > 2)) return a.r + b.r;\n\t\n\t    // Place the third circle.\n\t    place(b, a, c = circles[2]);\n\t\n\t    // Initialize the weighted centroid.\n\t    var aa = a.r * a.r,\n\t        ba = b.r * b.r,\n\t        ca = c.r * c.r,\n\t        oa = aa + ba + ca,\n\t        ox = aa * a.x + ba * b.x + ca * c.x,\n\t        oy = aa * a.y + ba * b.y + ca * c.y,\n\t        cx, cy, i, j, k, sj, sk;\n\t\n\t    // Initialize the front-chain using the first three circles a, b and c.\n\t    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n\t    a.next = c.previous = b;\n\t    b.next = a.previous = c;\n\t    c.next = b.previous = a;\n\t\n\t    // Attempt to place each remaining circle…\n\t    pack: for (i = 3; i < n; ++i) {\n\t      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\t\n\t      // If there are only three elements in the front-chain…\n\t      if ((k = a.previous) === (j = b.next)) {\n\t        // If the new circle intersects the third circle,\n\t        // rotate the front chain to try the next position.\n\t        if (intersects(j._, c._)) {\n\t          a = b, b = j, --i;\n\t          continue pack;\n\t        }\n\t      }\n\t\n\t      // Find the closest intersecting circle on the front-chain, if any.\n\t      else {\n\t        sj = j._.r, sk = k._.r;\n\t        do {\n\t          if (sj <= sk) {\n\t            if (intersects(j._, c._)) {\n\t              b = j, a.next = b, b.previous = a, --i;\n\t              continue pack;\n\t            }\n\t            j = j.next, sj += j._.r;\n\t          } else {\n\t            if (intersects(k._, c._)) {\n\t              a = k, a.next = b, b.previous = a, --i;\n\t              continue pack;\n\t            }\n\t            k = k.previous, sk += k._.r;\n\t          }\n\t        } while (j !== k.next);\n\t      }\n\t\n\t      // Success! Insert the new circle c between a and b.\n\t      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\t\n\t      // Update the weighted centroid.\n\t      oa += ca = c._.r * c._.r;\n\t      ox += ca * c._.x;\n\t      oy += ca * c._.y;\n\t\n\t      // Compute the new closest circle a to centroid.\n\t      aa = distance2(a._, cx = ox / oa, cy = oy / oa);\n\t      while ((c = c.next) !== b) {\n\t        if ((ca = distance2(c._, cx, cy)) < aa) {\n\t          a = c, aa = ca;\n\t        }\n\t      }\n\t      b = a.next;\n\t    }\n\t\n\t    // Compute the enclosing circle of the front chain.\n\t    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\t\n\t    // Translate the circles to put the enclosing circle around the origin.\n\t    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\t\n\t    return c.r;\n\t  }\n\t\n\t  function siblings(circles) {\n\t    packEnclose(circles);\n\t    return circles;\n\t  }\n\t\n\t  function optional(f) {\n\t    return f == null ? null : required(f);\n\t  }\n\t\n\t  function required(f) {\n\t    if (typeof f !== \"function\") throw new Error;\n\t    return f;\n\t  }\n\t\n\t  function constantZero() {\n\t    return 0;\n\t  }\n\t\n\t  function constant$5(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function defaultRadius(d) {\n\t    return Math.sqrt(d.value);\n\t  }\n\t\n\t  function index() {\n\t    var radius = null,\n\t        dx = 1,\n\t        dy = 1,\n\t        padding = constantZero;\n\t\n\t    function pack(root) {\n\t      root.x = dx / 2, root.y = dy / 2;\n\t      if (radius) {\n\t        root.eachBefore(radiusLeaf(radius))\n\t            .eachAfter(packChildren(padding, 0.5))\n\t            .eachBefore(translateChild(1));\n\t      } else {\n\t        root.eachBefore(radiusLeaf(defaultRadius))\n\t            .eachAfter(packChildren(constantZero, 1))\n\t            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n\t            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n\t      }\n\t      return root;\n\t    }\n\t\n\t    pack.radius = function(x) {\n\t      return arguments.length ? (radius = optional(x), pack) : radius;\n\t    };\n\t\n\t    pack.size = function(x) {\n\t      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n\t    };\n\t\n\t    pack.padding = function(x) {\n\t      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n\t    };\n\t\n\t    return pack;\n\t  }\n\t\n\t  function radiusLeaf(radius) {\n\t    return function(node) {\n\t      if (!node.children) {\n\t        node.r = Math.max(0, +radius(node) || 0);\n\t      }\n\t    };\n\t  }\n\t\n\t  function packChildren(padding, k) {\n\t    return function(node) {\n\t      if (children = node.children) {\n\t        var children,\n\t            i,\n\t            n = children.length,\n\t            r = padding(node) * k || 0,\n\t            e;\n\t\n\t        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n\t        e = packEnclose(children);\n\t        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n\t        node.r = e + r;\n\t      }\n\t    };\n\t  }\n\t\n\t  function translateChild(k) {\n\t    return function(node) {\n\t      var parent = node.parent;\n\t      node.r *= k;\n\t      if (parent) {\n\t        node.x = parent.x + k * node.x;\n\t        node.y = parent.y + k * node.y;\n\t      }\n\t    };\n\t  }\n\t\n\t  function roundNode(node) {\n\t    node.x0 = Math.round(node.x0);\n\t    node.y0 = Math.round(node.y0);\n\t    node.x1 = Math.round(node.x1);\n\t    node.y1 = Math.round(node.y1);\n\t  }\n\t\n\t  function treemapDice(parent, x0, y0, x1, y1) {\n\t    var nodes = parent.children,\n\t        node,\n\t        i = -1,\n\t        n = nodes.length,\n\t        k = parent.value && (x1 - x0) / parent.value;\n\t\n\t    while (++i < n) {\n\t      node = nodes[i], node.y0 = y0, node.y1 = y1;\n\t      node.x0 = x0, node.x1 = x0 += node.value * k;\n\t    }\n\t  }\n\t\n\t  function partition() {\n\t    var dx = 1,\n\t        dy = 1,\n\t        padding = 0,\n\t        round = false;\n\t\n\t    function partition(root) {\n\t      var n = root.height + 1;\n\t      root.x0 =\n\t      root.y0 = padding;\n\t      root.x1 = dx;\n\t      root.y1 = dy / n;\n\t      root.eachBefore(positionNode(dy, n));\n\t      if (round) root.eachBefore(roundNode);\n\t      return root;\n\t    }\n\t\n\t    function positionNode(dy, n) {\n\t      return function(node) {\n\t        if (node.children) {\n\t          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n\t        }\n\t        var x0 = node.x0,\n\t            y0 = node.y0,\n\t            x1 = node.x1 - padding,\n\t            y1 = node.y1 - padding;\n\t        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n\t        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n\t        node.x0 = x0;\n\t        node.y0 = y0;\n\t        node.x1 = x1;\n\t        node.y1 = y1;\n\t      };\n\t    }\n\t\n\t    partition.round = function(x) {\n\t      return arguments.length ? (round = !!x, partition) : round;\n\t    };\n\t\n\t    partition.size = function(x) {\n\t      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n\t    };\n\t\n\t    partition.padding = function(x) {\n\t      return arguments.length ? (padding = +x, partition) : padding;\n\t    };\n\t\n\t    return partition;\n\t  }\n\t\n\tvar   keyPrefix$1 = \"$\";\n\t  var preroot = {depth: -1};\n\t  var ambiguous = {};\n\t  function defaultId(d) {\n\t    return d.id;\n\t  }\n\t\n\t  function defaultParentId(d) {\n\t    return d.parentId;\n\t  }\n\t\n\t  function stratify() {\n\t    var id = defaultId,\n\t        parentId = defaultParentId;\n\t\n\t    function stratify(data) {\n\t      var d,\n\t          i,\n\t          n = data.length,\n\t          root,\n\t          parent,\n\t          node,\n\t          nodes = new Array(n),\n\t          nodeId,\n\t          nodeKey,\n\t          nodeByKey = {};\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        d = data[i], node = nodes[i] = new Node(d);\n\t        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n\t          nodeKey = keyPrefix$1 + (node.id = nodeId);\n\t          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n\t        }\n\t      }\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i], nodeId = parentId(data[i], i, data);\n\t        if (nodeId == null || !(nodeId += \"\")) {\n\t          if (root) throw new Error(\"multiple roots\");\n\t          root = node;\n\t        } else {\n\t          parent = nodeByKey[keyPrefix$1 + nodeId];\n\t          if (!parent) throw new Error(\"missing: \" + nodeId);\n\t          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n\t          if (parent.children) parent.children.push(node);\n\t          else parent.children = [node];\n\t          node.parent = parent;\n\t        }\n\t      }\n\t\n\t      if (!root) throw new Error(\"no root\");\n\t      root.parent = preroot;\n\t      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n\t      root.parent = null;\n\t      if (n > 0) throw new Error(\"cycle\");\n\t\n\t      return root;\n\t    }\n\t\n\t    stratify.id = function(x) {\n\t      return arguments.length ? (id = required(x), stratify) : id;\n\t    };\n\t\n\t    stratify.parentId = function(x) {\n\t      return arguments.length ? (parentId = required(x), stratify) : parentId;\n\t    };\n\t\n\t    return stratify;\n\t  }\n\t\n\t  function defaultSeparation$1(a, b) {\n\t    return a.parent === b.parent ? 1 : 2;\n\t  }\n\t\n\t  // function radialSeparation(a, b) {\n\t  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n\t  // }\n\t\n\t  // This function is used to traverse the left contour of a subtree (or\n\t  // subforest). It returns the successor of v on this contour. This successor is\n\t  // either given by the leftmost child of v or by the thread of v. The function\n\t  // returns null if and only if v is on the highest level of its subtree.\n\t  function nextLeft(v) {\n\t    var children = v.children;\n\t    return children ? children[0] : v.t;\n\t  }\n\t\n\t  // This function works analogously to nextLeft.\n\t  function nextRight(v) {\n\t    var children = v.children;\n\t    return children ? children[children.length - 1] : v.t;\n\t  }\n\t\n\t  // Shifts the current subtree rooted at w+. This is done by increasing\n\t  // prelim(w+) and mod(w+) by shift.\n\t  function moveSubtree(wm, wp, shift) {\n\t    var change = shift / (wp.i - wm.i);\n\t    wp.c -= change;\n\t    wp.s += shift;\n\t    wm.c += change;\n\t    wp.z += shift;\n\t    wp.m += shift;\n\t  }\n\t\n\t  // All other shifts, applied to the smaller subtrees between w- and w+, are\n\t  // performed by this function. To prepare the shifts, we have to adjust\n\t  // change(w+), shift(w+), and change(w-).\n\t  function executeShifts(v) {\n\t    var shift = 0,\n\t        change = 0,\n\t        children = v.children,\n\t        i = children.length,\n\t        w;\n\t    while (--i >= 0) {\n\t      w = children[i];\n\t      w.z += shift;\n\t      w.m += shift;\n\t      shift += w.s + (change += w.c);\n\t    }\n\t  }\n\t\n\t  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n\t  // returns the specified (default) ancestor.\n\t  function nextAncestor(vim, v, ancestor) {\n\t    return vim.a.parent === v.parent ? vim.a : ancestor;\n\t  }\n\t\n\t  function TreeNode(node, i) {\n\t    this._ = node;\n\t    this.parent = null;\n\t    this.children = null;\n\t    this.A = null; // default ancestor\n\t    this.a = this; // ancestor\n\t    this.z = 0; // prelim\n\t    this.m = 0; // mod\n\t    this.c = 0; // change\n\t    this.s = 0; // shift\n\t    this.t = null; // thread\n\t    this.i = i; // number\n\t  }\n\t\n\t  TreeNode.prototype = Object.create(Node.prototype);\n\t\n\t  function treeRoot(root) {\n\t    var tree = new TreeNode(root, 0),\n\t        node,\n\t        nodes = [tree],\n\t        child,\n\t        children,\n\t        i,\n\t        n;\n\t\n\t    while (node = nodes.pop()) {\n\t      if (children = node._.children) {\n\t        node.children = new Array(n = children.length);\n\t        for (i = n - 1; i >= 0; --i) {\n\t          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n\t          child.parent = node;\n\t        }\n\t      }\n\t    }\n\t\n\t    (tree.parent = new TreeNode(null, 0)).children = [tree];\n\t    return tree;\n\t  }\n\t\n\t  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n\t  function tree() {\n\t    var separation = defaultSeparation$1,\n\t        dx = 1,\n\t        dy = 1,\n\t        nodeSize = null;\n\t\n\t    function tree(root) {\n\t      var t = treeRoot(root);\n\t\n\t      // Compute the layout using Buchheim et al.’s algorithm.\n\t      t.eachAfter(firstWalk), t.parent.m = -t.z;\n\t      t.eachBefore(secondWalk);\n\t\n\t      // If a fixed node size is specified, scale x and y.\n\t      if (nodeSize) root.eachBefore(sizeNode);\n\t\n\t      // If a fixed tree size is specified, scale x and y based on the extent.\n\t      // Compute the left-most, right-most, and depth-most nodes for extents.\n\t      else {\n\t        var left = root,\n\t            right = root,\n\t            bottom = root;\n\t        root.eachBefore(function(node) {\n\t          if (node.x < left.x) left = node;\n\t          if (node.x > right.x) right = node;\n\t          if (node.depth > bottom.depth) bottom = node;\n\t        });\n\t        var s = left === right ? 1 : separation(left, right) / 2,\n\t            tx = s - left.x,\n\t            kx = dx / (right.x + s + tx),\n\t            ky = dy / (bottom.depth || 1);\n\t        root.eachBefore(function(node) {\n\t          node.x = (node.x + tx) * kx;\n\t          node.y = node.depth * ky;\n\t        });\n\t      }\n\t\n\t      return root;\n\t    }\n\t\n\t    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n\t    // applied recursively to the children of v, as well as the function\n\t    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n\t    // node v is placed to the midpoint of its outermost children.\n\t    function firstWalk(v) {\n\t      var children = v.children,\n\t          siblings = v.parent.children,\n\t          w = v.i ? siblings[v.i - 1] : null;\n\t      if (children) {\n\t        executeShifts(v);\n\t        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n\t        if (w) {\n\t          v.z = w.z + separation(v._, w._);\n\t          v.m = v.z - midpoint;\n\t        } else {\n\t          v.z = midpoint;\n\t        }\n\t      } else if (w) {\n\t        v.z = w.z + separation(v._, w._);\n\t      }\n\t      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n\t    }\n\t\n\t    // Computes all real x-coordinates by summing up the modifiers recursively.\n\t    function secondWalk(v) {\n\t      v._.x = v.z + v.parent.m;\n\t      v.m += v.parent.m;\n\t    }\n\t\n\t    // The core of the algorithm. Here, a new subtree is combined with the\n\t    // previous subtrees. Threads are used to traverse the inside and outside\n\t    // contours of the left and right subtree up to the highest common level. The\n\t    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n\t    // superscript o means outside and i means inside, the subscript - means left\n\t    // subtree and + means right subtree. For summing up the modifiers along the\n\t    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n\t    // nodes of the inside contours conflict, we compute the left one of the\n\t    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n\t    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n\t    // Finally, we add a new thread (if necessary).\n\t    function apportion(v, w, ancestor) {\n\t      if (w) {\n\t        var vip = v,\n\t            vop = v,\n\t            vim = w,\n\t            vom = vip.parent.children[0],\n\t            sip = vip.m,\n\t            sop = vop.m,\n\t            sim = vim.m,\n\t            som = vom.m,\n\t            shift;\n\t        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n\t          vom = nextLeft(vom);\n\t          vop = nextRight(vop);\n\t          vop.a = v;\n\t          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n\t          if (shift > 0) {\n\t            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n\t            sip += shift;\n\t            sop += shift;\n\t          }\n\t          sim += vim.m;\n\t          sip += vip.m;\n\t          som += vom.m;\n\t          sop += vop.m;\n\t        }\n\t        if (vim && !nextRight(vop)) {\n\t          vop.t = vim;\n\t          vop.m += sim - sop;\n\t        }\n\t        if (vip && !nextLeft(vom)) {\n\t          vom.t = vip;\n\t          vom.m += sip - som;\n\t          ancestor = v;\n\t        }\n\t      }\n\t      return ancestor;\n\t    }\n\t\n\t    function sizeNode(node) {\n\t      node.x *= dx;\n\t      node.y = node.depth * dy;\n\t    }\n\t\n\t    tree.separation = function(x) {\n\t      return arguments.length ? (separation = x, tree) : separation;\n\t    };\n\t\n\t    tree.size = function(x) {\n\t      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n\t    };\n\t\n\t    tree.nodeSize = function(x) {\n\t      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n\t    };\n\t\n\t    return tree;\n\t  }\n\t\n\t  function treemapSlice(parent, x0, y0, x1, y1) {\n\t    var nodes = parent.children,\n\t        node,\n\t        i = -1,\n\t        n = nodes.length,\n\t        k = parent.value && (y1 - y0) / parent.value;\n\t\n\t    while (++i < n) {\n\t      node = nodes[i], node.x0 = x0, node.x1 = x1;\n\t      node.y0 = y0, node.y1 = y0 += node.value * k;\n\t    }\n\t  }\n\t\n\t  var phi = (1 + Math.sqrt(5)) / 2;\n\t\n\t  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n\t    var rows = [],\n\t        nodes = parent.children,\n\t        row,\n\t        nodeValue,\n\t        i0 = 0,\n\t        i1,\n\t        n = nodes.length,\n\t        dx, dy,\n\t        value = parent.value,\n\t        sumValue,\n\t        minValue,\n\t        maxValue,\n\t        newRatio,\n\t        minRatio,\n\t        alpha,\n\t        beta;\n\t\n\t    while (i0 < n) {\n\t      dx = x1 - x0, dy = y1 - y0;\n\t      minValue = maxValue = sumValue = nodes[i0].value;\n\t      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n\t      beta = sumValue * sumValue * alpha;\n\t      minRatio = Math.max(maxValue / beta, beta / minValue);\n\t\n\t      // Keep adding nodes while the aspect ratio maintains or improves.\n\t      for (i1 = i0 + 1; i1 < n; ++i1) {\n\t        sumValue += nodeValue = nodes[i1].value;\n\t        if (nodeValue < minValue) minValue = nodeValue;\n\t        if (nodeValue > maxValue) maxValue = nodeValue;\n\t        beta = sumValue * sumValue * alpha;\n\t        newRatio = Math.max(maxValue / beta, beta / minValue);\n\t        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n\t        minRatio = newRatio;\n\t      }\n\t\n\t      // Position and record the row orientation.\n\t      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n\t      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n\t      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n\t      value -= sumValue, i0 = i1;\n\t    }\n\t\n\t    return rows;\n\t  }\n\t\n\t  var squarify = (function custom(ratio) {\n\t\n\t    function squarify(parent, x0, y0, x1, y1) {\n\t      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n\t    }\n\t\n\t    squarify.ratio = function(x) {\n\t      return custom((x = +x) > 1 ? x : 1);\n\t    };\n\t\n\t    return squarify;\n\t  })(phi);\n\t\n\t  function index$1() {\n\t    var tile = squarify,\n\t        round = false,\n\t        dx = 1,\n\t        dy = 1,\n\t        paddingStack = [0],\n\t        paddingInner = constantZero,\n\t        paddingTop = constantZero,\n\t        paddingRight = constantZero,\n\t        paddingBottom = constantZero,\n\t        paddingLeft = constantZero;\n\t\n\t    function treemap(root) {\n\t      root.x0 =\n\t      root.y0 = 0;\n\t      root.x1 = dx;\n\t      root.y1 = dy;\n\t      root.eachBefore(positionNode);\n\t      paddingStack = [0];\n\t      if (round) root.eachBefore(roundNode);\n\t      return root;\n\t    }\n\t\n\t    function positionNode(node) {\n\t      var p = paddingStack[node.depth],\n\t          x0 = node.x0 + p,\n\t          y0 = node.y0 + p,\n\t          x1 = node.x1 - p,\n\t          y1 = node.y1 - p;\n\t      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n\t      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n\t      node.x0 = x0;\n\t      node.y0 = y0;\n\t      node.x1 = x1;\n\t      node.y1 = y1;\n\t      if (node.children) {\n\t        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n\t        x0 += paddingLeft(node) - p;\n\t        y0 += paddingTop(node) - p;\n\t        x1 -= paddingRight(node) - p;\n\t        y1 -= paddingBottom(node) - p;\n\t        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n\t        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n\t        tile(node, x0, y0, x1, y1);\n\t      }\n\t    }\n\t\n\t    treemap.round = function(x) {\n\t      return arguments.length ? (round = !!x, treemap) : round;\n\t    };\n\t\n\t    treemap.size = function(x) {\n\t      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n\t    };\n\t\n\t    treemap.tile = function(x) {\n\t      return arguments.length ? (tile = required(x), treemap) : tile;\n\t    };\n\t\n\t    treemap.padding = function(x) {\n\t      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n\t    };\n\t\n\t    treemap.paddingInner = function(x) {\n\t      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n\t    };\n\t\n\t    treemap.paddingOuter = function(x) {\n\t      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n\t    };\n\t\n\t    treemap.paddingTop = function(x) {\n\t      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n\t    };\n\t\n\t    treemap.paddingRight = function(x) {\n\t      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n\t    };\n\t\n\t    treemap.paddingBottom = function(x) {\n\t      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n\t    };\n\t\n\t    treemap.paddingLeft = function(x) {\n\t      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n\t    };\n\t\n\t    return treemap;\n\t  }\n\t\n\t  function binary(parent, x0, y0, x1, y1) {\n\t    var nodes = parent.children,\n\t        i, n = nodes.length,\n\t        sum, sums = new Array(n + 1);\n\t\n\t    for (sums[0] = sum = i = 0; i < n; ++i) {\n\t      sums[i + 1] = sum += nodes[i].value;\n\t    }\n\t\n\t    partition(0, n, parent.value, x0, y0, x1, y1);\n\t\n\t    function partition(i, j, value, x0, y0, x1, y1) {\n\t      if (i >= j - 1) {\n\t        var node = nodes[i];\n\t        node.x0 = x0, node.y0 = y0;\n\t        node.x1 = x1, node.y1 = y1;\n\t        return;\n\t      }\n\t\n\t      var valueOffset = sums[i],\n\t          valueTarget = (value / 2) + valueOffset,\n\t          k = i + 1,\n\t          hi = j - 1;\n\t\n\t      while (k < hi) {\n\t        var mid = k + hi >>> 1;\n\t        if (sums[mid] < valueTarget) k = mid + 1;\n\t        else hi = mid;\n\t      }\n\t\n\t      var valueLeft = sums[k] - valueOffset,\n\t          valueRight = value - valueLeft;\n\t\n\t      if ((y1 - y0) > (x1 - x0)) {\n\t        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n\t        partition(i, k, valueLeft, x0, y0, x1, yk);\n\t        partition(k, j, valueRight, x0, yk, x1, y1);\n\t      } else {\n\t        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n\t        partition(i, k, valueLeft, x0, y0, xk, y1);\n\t        partition(k, j, valueRight, xk, y0, x1, y1);\n\t      }\n\t    }\n\t  }\n\t\n\t  function sliceDice(parent, x0, y0, x1, y1) {\n\t    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n\t  }\n\t\n\t  var resquarify = (function custom(ratio) {\n\t\n\t    function resquarify(parent, x0, y0, x1, y1) {\n\t      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n\t        var rows,\n\t            row,\n\t            nodes,\n\t            i,\n\t            j = -1,\n\t            n,\n\t            m = rows.length,\n\t            value = parent.value;\n\t\n\t        while (++j < m) {\n\t          row = rows[j], nodes = row.children;\n\t          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n\t          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n\t          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n\t          value -= row.value;\n\t        }\n\t      } else {\n\t        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n\t        rows.ratio = ratio;\n\t      }\n\t    }\n\t\n\t    resquarify.ratio = function(x) {\n\t      return custom((x = +x) > 1 ? x : 1);\n\t    };\n\t\n\t    return resquarify;\n\t  })(phi);\n\t\n\t  function center$1(x, y) {\n\t    var nodes;\n\t\n\t    if (x == null) x = 0;\n\t    if (y == null) y = 0;\n\t\n\t    function force() {\n\t      var i,\n\t          n = nodes.length,\n\t          node,\n\t          sx = 0,\n\t          sy = 0;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i], sx += node.x, sy += node.y;\n\t      }\n\t\n\t      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n\t        node = nodes[i], node.x -= sx, node.y -= sy;\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = +_, force) : x;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = +_, force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function constant$6(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function jiggle() {\n\t    return (Math.random() - 0.5) * 1e-6;\n\t  }\n\t\n\t  function x$1(d) {\n\t    return d.x + d.vx;\n\t  }\n\t\n\t  function y$1(d) {\n\t    return d.y + d.vy;\n\t  }\n\t\n\t  function collide(radius) {\n\t    var nodes,\n\t        radii,\n\t        strength = 1,\n\t        iterations = 1;\n\t\n\t    if (typeof radius !== \"function\") radius = constant$6(radius == null ? 1 : +radius);\n\t\n\t    function force() {\n\t      var i, n = nodes.length,\n\t          tree,\n\t          node,\n\t          xi,\n\t          yi,\n\t          ri,\n\t          ri2;\n\t\n\t      for (var k = 0; k < iterations; ++k) {\n\t        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          ri = radii[i], ri2 = ri * ri;\n\t          xi = node.x + node.vx;\n\t          yi = node.y + node.vy;\n\t          tree.visit(apply);\n\t        }\n\t      }\n\t\n\t      function apply(quad, x0, y0, x1, y1) {\n\t        var data = quad.data, rj = quad.r, r = ri + rj;\n\t        if (data) {\n\t          if (data.index > i) {\n\t            var x = xi - data.x - data.vx,\n\t                y = yi - data.y - data.vy,\n\t                l = x * x + y * y;\n\t            if (l < r * r) {\n\t              if (x === 0) x = jiggle(), l += x * x;\n\t              if (y === 0) y = jiggle(), l += y * y;\n\t              l = (r - (l = Math.sqrt(l))) / l * strength;\n\t              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n\t              node.vy += (y *= l) * r;\n\t              data.vx -= x * (r = 1 - r);\n\t              data.vy -= y * r;\n\t            }\n\t          }\n\t          return;\n\t        }\n\t        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n\t      }\n\t    }\n\t\n\t    function prepare(quad) {\n\t      if (quad.data) return quad.r = radii[quad.data.index];\n\t      for (var i = quad.r = 0; i < 4; ++i) {\n\t        if (quad[i] && quad[i].r > quad.r) {\n\t          quad.r = quad[i].r;\n\t        }\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      var i, n = (nodes = _).length; radii = new Array(n);\n\t      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = +_, force) : strength;\n\t    };\n\t\n\t    force.radius = function(_) {\n\t      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$6(+_), force) : radius;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function index$2(d, i) {\n\t    return i;\n\t  }\n\t\n\t  function link(links) {\n\t    var id = index$2,\n\t        strength = defaultStrength,\n\t        strengths,\n\t        distance = constant$6(30),\n\t        distances,\n\t        nodes,\n\t        count,\n\t        bias,\n\t        iterations = 1;\n\t\n\t    if (links == null) links = [];\n\t\n\t    function defaultStrength(link) {\n\t      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n\t    }\n\t\n\t    function force(alpha) {\n\t      for (var k = 0, n = links.length; k < iterations; ++k) {\n\t        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n\t          link = links[i], source = link.source, target = link.target;\n\t          x = target.x + target.vx - source.x - source.vx || jiggle();\n\t          y = target.y + target.vy - source.y - source.vy || jiggle();\n\t          l = Math.sqrt(x * x + y * y);\n\t          l = (l - distances[i]) / l * alpha * strengths[i];\n\t          x *= l, y *= l;\n\t          target.vx -= x * (b = bias[i]);\n\t          target.vy -= y * b;\n\t          source.vx += x * (b = 1 - b);\n\t          source.vy += y * b;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t\n\t      var i,\n\t          n = nodes.length,\n\t          m = links.length,\n\t          nodeById = map$1(nodes, id),\n\t          link;\n\t\n\t      for (i = 0, count = new Array(n); i < n; ++i) {\n\t        count[i] = 0;\n\t      }\n\t\n\t      for (i = 0; i < m; ++i) {\n\t        link = links[i], link.index = i;\n\t        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n\t        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n\t        ++count[link.source.index], ++count[link.target.index];\n\t      }\n\t\n\t      for (i = 0, bias = new Array(m); i < m; ++i) {\n\t        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n\t      }\n\t\n\t      strengths = new Array(m), initializeStrength();\n\t      distances = new Array(m), initializeDistance();\n\t    }\n\t\n\t    function initializeStrength() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        strengths[i] = +strength(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    function initializeDistance() {\n\t      if (!nodes) return;\n\t\n\t      for (var i = 0, n = links.length; i < n; ++i) {\n\t        distances[i] = +distance(links[i], i, links);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.links = function(_) {\n\t      return arguments.length ? (links = _, initialize(), force) : links;\n\t    };\n\t\n\t    force.id = function(_) {\n\t      return arguments.length ? (id = _, force) : id;\n\t    };\n\t\n\t    force.iterations = function(_) {\n\t      return arguments.length ? (iterations = +_, force) : iterations;\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initializeStrength(), force) : strength;\n\t    };\n\t\n\t    force.distance = function(_) {\n\t      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$6(+_), initializeDistance(), force) : distance;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$2(d) {\n\t    return d.x;\n\t  }\n\t\n\t  function y$2(d) {\n\t    return d.y;\n\t  }\n\t\n\t  var initialRadius = 10;\n\t  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n\t  function simulation(nodes) {\n\t    var simulation,\n\t        alpha = 1,\n\t        alphaMin = 0.001,\n\t        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n\t        alphaTarget = 0,\n\t        drag = 0.6,\n\t        forces = map$1(),\n\t        fixes = {},\n\t        stepper = timer(step),\n\t        event = dispatch(\"tick\", \"end\");\n\t\n\t    if (nodes == null) nodes = [];\n\t\n\t    function step() {\n\t      tick();\n\t      event.call(\"tick\", simulation);\n\t      if (alpha < alphaMin) {\n\t        stepper.stop();\n\t        event.call(\"end\", simulation);\n\t      }\n\t    }\n\t\n\t    function tick() {\n\t      var i, n = nodes.length, node, fix;\n\t\n\t      alpha += (alphaTarget - alpha) * alphaDecay;\n\t\n\t      forces.each(function(force) {\n\t        force(alpha);\n\t      });\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        node = nodes[i];\n\t        node.x += node.vx *= drag;\n\t        node.y += node.vy *= drag;\n\t      }\n\t\n\t      for (i in fixes) {\n\t        fix = fixes[i], node = nodes[i];\n\t        node.x = fix.x;\n\t        node.y = fix.y;\n\t        node.vx =\n\t        node.vy = 0;\n\t      }\n\t    }\n\t\n\t    function initializeNodes() {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.index = i;\n\t        if (isNaN(node.x) || isNaN(node.y)) {\n\t          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n\t          node.x = radius * Math.cos(angle);\n\t          node.y = radius * Math.sin(angle);\n\t        }\n\t        if (isNaN(node.vx) || isNaN(node.vy)) {\n\t          node.vx = node.vy = 0;\n\t        }\n\t      }\n\t    }\n\t\n\t    function initializeForce(force) {\n\t      if (force.initialize) force.initialize(nodes);\n\t      return force;\n\t    }\n\t\n\t    initializeNodes();\n\t\n\t    return simulation = {\n\t      tick: tick,\n\t\n\t      restart: function() {\n\t        return stepper.restart(step), simulation;\n\t      },\n\t\n\t      stop: function() {\n\t        return stepper.stop(), simulation;\n\t      },\n\t\n\t      nodes: function(_) {\n\t        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n\t      },\n\t\n\t      alpha: function(_) {\n\t        return arguments.length ? (alpha = +_, simulation) : alpha;\n\t      },\n\t\n\t      alphaMin: function(_) {\n\t        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n\t      },\n\t\n\t      alphaDecay: function(_) {\n\t        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n\t      },\n\t\n\t      alphaTarget: function(_) {\n\t        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n\t      },\n\t\n\t      drag: function(_) {\n\t        return arguments.length ? (drag = 1 - _, simulation) : 1 - drag;\n\t      },\n\t\n\t      force: function(name, _) {\n\t        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n\t      },\n\t\n\t      fix: function(node, x, y) {\n\t        return fixes[node.index] = {x: x == null ? node.x : +x, y: y == null ? node.y : +y}, simulation;\n\t      },\n\t\n\t      unfix: function(node) {\n\t        return delete fixes[node.index], simulation;\n\t      },\n\t\n\t      unfixAll: function() {\n\t        return fixes = {}, simulation;\n\t      },\n\t\n\t      find: function(x, y, radius) {\n\t        var i = 0,\n\t            n = nodes.length,\n\t            dx,\n\t            dy,\n\t            d2,\n\t            node,\n\t            closest;\n\t\n\t        if (radius == null) radius = Infinity;\n\t        else radius *= radius;\n\t\n\t        for (i = 0; i < n; ++i) {\n\t          node = nodes[i];\n\t          dx = x - node.x;\n\t          dy = y - node.y;\n\t          d2 = dx * dx + dy * dy;\n\t          if (d2 < radius) closest = node, radius = d2;\n\t        }\n\t\n\t        return closest;\n\t      },\n\t\n\t      on: function(name, _) {\n\t        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n\t      }\n\t    };\n\t  }\n\t\n\t  function manyBody() {\n\t    var nodes,\n\t        node,\n\t        alpha,\n\t        strength = constant$6(-30),\n\t        strengths,\n\t        distanceMin2 = 1,\n\t        distanceMax2 = Infinity,\n\t        theta2 = 0.81;\n\t\n\t    function force(_) {\n\t      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);\n\t      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n\t    }\n\t\n\t    function accumulate(quad) {\n\t      var strength = 0, q, c, x, y, i;\n\t\n\t      // For internal nodes, accumulate forces from child quadrants.\n\t      if (quad.length) {\n\t        for (x = y = i = 0; i < 4; ++i) {\n\t          if ((q = quad[i]) && (c = q.value)) {\n\t            strength += c, x += c * q.x, y += c * q.y;\n\t          }\n\t        }\n\t        quad.x = x / strength;\n\t        quad.y = y / strength;\n\t      }\n\t\n\t      // For leaf nodes, accumulate forces from coincident quadrants.\n\t      else {\n\t        q = quad;\n\t        q.x = q.data.x;\n\t        q.y = q.data.y;\n\t        do strength += strengths[q.data.index];\n\t        while (q = q.next);\n\t      }\n\t\n\t      quad.value = strength;\n\t    }\n\t\n\t    function apply(quad, x1, _, x2) {\n\t      if (!quad.value) return true;\n\t\n\t      var x = quad.x - node.x,\n\t          y = quad.y - node.y,\n\t          w = x2 - x1,\n\t          l = x * x + y * y;\n\t\n\t      // Apply the Barnes-Hut approximation if possible.\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (w * w / theta2 < l) {\n\t        if (l < distanceMax2) {\n\t          if (x === 0) x = jiggle(), l += x * x;\n\t          if (y === 0) y = jiggle(), l += y * y;\n\t          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t          node.vx += x * quad.value * alpha / l;\n\t          node.vy += y * quad.value * alpha / l;\n\t        }\n\t        return true;\n\t      }\n\t\n\t      // Otherwise, process points directly.\n\t      else if (quad.length || l >= distanceMax2) return;\n\t\n\t      // Limit forces for very close nodes; randomize direction if coincident.\n\t      if (quad.data !== node || quad.next) {\n\t        if (x === 0) x = jiggle(), l += x * x;\n\t        if (y === 0) y = jiggle(), l += y * y;\n\t        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n\t      }\n\t\n\t      do if (quad.data !== node) {\n\t        w = strengths[quad.data.index] * alpha / l;\n\t        node.vx += x * w;\n\t        node.vy += y * w;\n\t      } while (quad = quad.next);\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.distanceMin = function(_) {\n\t      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n\t    };\n\t\n\t    force.distanceMax = function(_) {\n\t      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n\t    };\n\t\n\t    force.theta = function(_) {\n\t      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function x$3(x) {\n\t    var strength = constant$6(0.1),\n\t        nodes,\n\t        strengths,\n\t        xz;\n\t\n\t    if (typeof x !== \"function\") x = constant$6(x == null ? 0 : +x);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      xz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.x = function(_) {\n\t      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : x;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function y$3(y) {\n\t    var strength = constant$6(0.1),\n\t        nodes,\n\t        strengths,\n\t        yz;\n\t\n\t    if (typeof y !== \"function\") y = constant$6(y == null ? 0 : +y);\n\t\n\t    function force(alpha) {\n\t      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n\t        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      if (!nodes) return;\n\t      var i, n = nodes.length;\n\t      strengths = new Array(n);\n\t      yz = new Array(n);\n\t      for (i = 0; i < n; ++i) {\n\t        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n\t      }\n\t    }\n\t\n\t    force.initialize = function(_) {\n\t      nodes = _;\n\t      initialize();\n\t    };\n\t\n\t    force.strength = function(_) {\n\t      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n\t    };\n\t\n\t    force.y = function(_) {\n\t      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : y;\n\t    };\n\t\n\t    return force;\n\t  }\n\t\n\t  function nopropagation() {\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  function noevent() {\n\t    exports.event.preventDefault();\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  function dragDisable(view) {\n\t    var root = view.document.documentElement,\n\t        selection = select(view).on(\"dragstart.drag\", noevent, true);\n\t    if (\"onselectstart\" in root) {\n\t      selection.on(\"selectstart.drag\", noevent, true);\n\t    } else {\n\t      root.__noselect = root.style.MozUserSelect;\n\t      root.style.MozUserSelect = \"none\";\n\t    }\n\t  }\n\t\n\t  function dragEnable(view, noclick) {\n\t    var root = view.document.documentElement,\n\t        selection = select(view).on(\"dragstart.drag\", null);\n\t    if (noclick) {\n\t      selection.on(\"click.drag\", noevent, true);\n\t      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n\t    }\n\t    if (\"onselectstart\" in root) {\n\t      selection.on(\"selectstart.drag\", null);\n\t    } else {\n\t      root.style.MozUserSelect = root.__noselect;\n\t      delete root.__noselect;\n\t    }\n\t  }\n\t\n\t  function constant$7(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n\t    this.target = target;\n\t    this.type = type;\n\t    this.subject = subject;\n\t    this.identifier = id;\n\t    this.active = active;\n\t    this.x = x;\n\t    this.y = y;\n\t    this.dx = dx;\n\t    this.dy = dy;\n\t    this._ = dispatch;\n\t  }\n\t\n\t  DragEvent.prototype.on = function() {\n\t    var value = this._.on.apply(this._, arguments);\n\t    return value === this._ ? this : value;\n\t  };\n\t\n\t  // Ignore right-click, since that should open the context menu.\n\t  function defaultFilter() {\n\t    return !exports.event.button;\n\t  }\n\t\n\t  function defaultContainer() {\n\t    return this.parentNode;\n\t  }\n\t\n\t  function defaultSubject(d) {\n\t    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\n\t  }\n\t\n\t  function drag() {\n\t    var filter = defaultFilter,\n\t        container = defaultContainer,\n\t        subject = defaultSubject,\n\t        gestures = {},\n\t        listeners = dispatch(\"start\", \"drag\", \"end\"),\n\t        active = 0,\n\t        mousemoving,\n\t        touchending;\n\t\n\t    function drag(selection) {\n\t      selection\n\t          .on(\"mousedown.drag\", mousedowned)\n\t          .on(\"touchstart.drag\", touchstarted)\n\t          .on(\"touchmove.drag\", touchmoved)\n\t          .on(\"touchend.drag touchcancel.drag\", touchended)\n\t          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n\t    }\n\t\n\t    function mousedowned() {\n\t      if (touchending || !filter.apply(this, arguments)) return;\n\t      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n\t      if (!gesture) return;\n\t      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n\t      dragDisable(exports.event.view);\n\t      nopropagation();\n\t      mousemoving = false;\n\t      gesture(\"start\");\n\t    }\n\t\n\t    function mousemoved() {\n\t      noevent();\n\t      mousemoving = true;\n\t      gestures.mouse(\"drag\");\n\t    }\n\t\n\t    function mouseupped() {\n\t      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\n\t      dragEnable(exports.event.view, mousemoving);\n\t      noevent();\n\t      gestures.mouse(\"end\");\n\t    }\n\t\n\t    function touchstarted() {\n\t      if (!filter.apply(this, arguments)) return;\n\t      var touches = exports.event.changedTouches,\n\t          c = container.apply(this, arguments),\n\t          n = touches.length, i, gesture;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n\t          nopropagation();\n\t          gesture(\"start\");\n\t        }\n\t      }\n\t    }\n\t\n\t    function touchmoved() {\n\t      var touches = exports.event.changedTouches,\n\t          n = touches.length, i, gesture;\n\t\n\t      for (i = 0; i < n; ++i) {\n\t        if (gesture = gestures[touches[i].identifier]) {\n\t          noevent();\n\t          gesture(\"drag\");\n\t        }\n\t      }\n\t    }\n\t\n\t    function touchended() {\n\t      var touches = exports.event.changedTouches,\n\t          n = touches.length, i, gesture;\n\t\n\t      if (touchending) clearTimeout(touchending);\n\t      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n\t      for (i = 0; i < n; ++i) {\n\t        if (gesture = gestures[touches[i].identifier]) {\n\t          nopropagation();\n\t          gesture(\"end\");\n\t        }\n\t      }\n\t    }\n\t\n\t    function beforestart(id, container, point, that, args) {\n\t      var p = point(container, id), s, dx, dy,\n\t          sublisteners = listeners.copy();\n\t\n\t      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n\t        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\n\t        dx = s.x - p[0] || 0;\n\t        dy = s.y - p[1] || 0;\n\t        return true;\n\t      })) return;\n\t\n\t      return function gesture(type) {\n\t        var p0 = p, n;\n\t        switch (type) {\n\t          case \"start\": gestures[id] = gesture, n = active++; break;\n\t          case \"end\": delete gestures[id], --active; // nobreak\n\t          case \"drag\": p = point(container, id), n = active; break;\n\t        }\n\t        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n\t      };\n\t    }\n\t\n\t    drag.filter = function(_) {\n\t      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$7(!!_), drag) : filter;\n\t    };\n\t\n\t    drag.container = function(_) {\n\t      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$7(_), drag) : container;\n\t    };\n\t\n\t    drag.subject = function(_) {\n\t      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$7(_), drag) : subject;\n\t    };\n\t\n\t    drag.on = function() {\n\t      var value = listeners.on.apply(listeners, arguments);\n\t      return value === listeners ? drag : value;\n\t    };\n\t\n\t    return drag;\n\t  }\n\t\n\t  function constant$8(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function x$4(d) {\n\t    return d[0];\n\t  }\n\t\n\t  function y$4(d) {\n\t    return d[1];\n\t  }\n\t\n\t  function RedBlackTree() {\n\t    this._ = null; // root node\n\t  }\n\t\n\t  function RedBlackNode(node) {\n\t    node.U = // parent node\n\t    node.C = // color - true for red, false for black\n\t    node.L = // left node\n\t    node.R = // right node\n\t    node.P = // previous node\n\t    node.N = null; // next node\n\t  }\n\t\n\t  RedBlackTree.prototype = {\n\t    constructor: RedBlackTree,\n\t\n\t    insert: function(after, node) {\n\t      var parent, grandpa, uncle;\n\t\n\t      if (after) {\n\t        node.P = after;\n\t        node.N = after.N;\n\t        if (after.N) after.N.P = node;\n\t        after.N = node;\n\t        if (after.R) {\n\t          after = after.R;\n\t          while (after.L) after = after.L;\n\t          after.L = node;\n\t        } else {\n\t          after.R = node;\n\t        }\n\t        parent = after;\n\t      } else if (this._) {\n\t        after = RedBlackFirst(this._);\n\t        node.P = null;\n\t        node.N = after;\n\t        after.P = after.L = node;\n\t        parent = after;\n\t      } else {\n\t        node.P = node.N = null;\n\t        this._ = node;\n\t        parent = null;\n\t      }\n\t      node.L = node.R = null;\n\t      node.U = parent;\n\t      node.C = true;\n\t\n\t      after = node;\n\t      while (parent && parent.C) {\n\t        grandpa = parent.U;\n\t        if (parent === grandpa.L) {\n\t          uncle = grandpa.R;\n\t          if (uncle && uncle.C) {\n\t            parent.C = uncle.C = false;\n\t            grandpa.C = true;\n\t            after = grandpa;\n\t          } else {\n\t            if (after === parent.R) {\n\t              RedBlackRotateLeft(this, parent);\n\t              after = parent;\n\t              parent = after.U;\n\t            }\n\t            parent.C = false;\n\t            grandpa.C = true;\n\t            RedBlackRotateRight(this, grandpa);\n\t          }\n\t        } else {\n\t          uncle = grandpa.L;\n\t          if (uncle && uncle.C) {\n\t            parent.C = uncle.C = false;\n\t            grandpa.C = true;\n\t            after = grandpa;\n\t          } else {\n\t            if (after === parent.L) {\n\t              RedBlackRotateRight(this, parent);\n\t              after = parent;\n\t              parent = after.U;\n\t            }\n\t            parent.C = false;\n\t            grandpa.C = true;\n\t            RedBlackRotateLeft(this, grandpa);\n\t          }\n\t        }\n\t        parent = after.U;\n\t      }\n\t      this._.C = false;\n\t    },\n\t\n\t    remove: function(node) {\n\t      if (node.N) node.N.P = node.P;\n\t      if (node.P) node.P.N = node.N;\n\t      node.N = node.P = null;\n\t\n\t      var parent = node.U,\n\t          sibling,\n\t          left = node.L,\n\t          right = node.R,\n\t          next,\n\t          red;\n\t\n\t      if (!left) next = right;\n\t      else if (!right) next = left;\n\t      else next = RedBlackFirst(right);\n\t\n\t      if (parent) {\n\t        if (parent.L === node) parent.L = next;\n\t        else parent.R = next;\n\t      } else {\n\t        this._ = next;\n\t      }\n\t\n\t      if (left && right) {\n\t        red = next.C;\n\t        next.C = node.C;\n\t        next.L = left;\n\t        left.U = next;\n\t        if (next !== right) {\n\t          parent = next.U;\n\t          next.U = node.U;\n\t          node = next.R;\n\t          parent.L = node;\n\t          next.R = right;\n\t          right.U = next;\n\t        } else {\n\t          next.U = parent;\n\t          parent = next;\n\t          node = next.R;\n\t        }\n\t      } else {\n\t        red = node.C;\n\t        node = next;\n\t      }\n\t\n\t      if (node) node.U = parent;\n\t      if (red) return;\n\t      if (node && node.C) { node.C = false; return; }\n\t\n\t      do {\n\t        if (node === this._) break;\n\t        if (node === parent.L) {\n\t          sibling = parent.R;\n\t          if (sibling.C) {\n\t            sibling.C = false;\n\t            parent.C = true;\n\t            RedBlackRotateLeft(this, parent);\n\t            sibling = parent.R;\n\t          }\n\t          if ((sibling.L && sibling.L.C)\n\t              || (sibling.R && sibling.R.C)) {\n\t            if (!sibling.R || !sibling.R.C) {\n\t              sibling.L.C = false;\n\t              sibling.C = true;\n\t              RedBlackRotateRight(this, sibling);\n\t              sibling = parent.R;\n\t            }\n\t            sibling.C = parent.C;\n\t            parent.C = sibling.R.C = false;\n\t            RedBlackRotateLeft(this, parent);\n\t            node = this._;\n\t            break;\n\t          }\n\t        } else {\n\t          sibling = parent.L;\n\t          if (sibling.C) {\n\t            sibling.C = false;\n\t            parent.C = true;\n\t            RedBlackRotateRight(this, parent);\n\t            sibling = parent.L;\n\t          }\n\t          if ((sibling.L && sibling.L.C)\n\t            || (sibling.R && sibling.R.C)) {\n\t            if (!sibling.L || !sibling.L.C) {\n\t              sibling.R.C = false;\n\t              sibling.C = true;\n\t              RedBlackRotateLeft(this, sibling);\n\t              sibling = parent.L;\n\t            }\n\t            sibling.C = parent.C;\n\t            parent.C = sibling.L.C = false;\n\t            RedBlackRotateRight(this, parent);\n\t            node = this._;\n\t            break;\n\t          }\n\t        }\n\t        sibling.C = true;\n\t        node = parent;\n\t        parent = parent.U;\n\t      } while (!node.C);\n\t\n\t      if (node) node.C = false;\n\t    }\n\t  };\n\t\n\t  function RedBlackRotateLeft(tree, node) {\n\t    var p = node,\n\t        q = node.R,\n\t        parent = p.U;\n\t\n\t    if (parent) {\n\t      if (parent.L === p) parent.L = q;\n\t      else parent.R = q;\n\t    } else {\n\t      tree._ = q;\n\t    }\n\t\n\t    q.U = parent;\n\t    p.U = q;\n\t    p.R = q.L;\n\t    if (p.R) p.R.U = p;\n\t    q.L = p;\n\t  }\n\t\n\t  function RedBlackRotateRight(tree, node) {\n\t    var p = node,\n\t        q = node.L,\n\t        parent = p.U;\n\t\n\t    if (parent) {\n\t      if (parent.L === p) parent.L = q;\n\t      else parent.R = q;\n\t    } else {\n\t      tree._ = q;\n\t    }\n\t\n\t    q.U = parent;\n\t    p.U = q;\n\t    p.L = q.R;\n\t    if (p.L) p.L.U = p;\n\t    q.R = p;\n\t  }\n\t\n\t  function RedBlackFirst(node) {\n\t    while (node.L) node = node.L;\n\t    return node;\n\t  }\n\t\n\t  function createEdge(left, right, v0, v1) {\n\t    var edge = [null, null],\n\t        index = edges.push(edge) - 1;\n\t    edge.left = left;\n\t    edge.right = right;\n\t    if (v0) setEdgeEnd(edge, left, right, v0);\n\t    if (v1) setEdgeEnd(edge, right, left, v1);\n\t    cells[left.index].halfedges.push(index);\n\t    cells[right.index].halfedges.push(index);\n\t    return edge;\n\t  }\n\t\n\t  function createBorderEdge(left, v0, v1) {\n\t    var edge = [v0, v1];\n\t    edge.left = left;\n\t    return edge;\n\t  }\n\t\n\t  function setEdgeEnd(edge, left, right, vertex) {\n\t    if (!edge[0] && !edge[1]) {\n\t      edge[0] = vertex;\n\t      edge.left = left;\n\t      edge.right = right;\n\t    } else if (edge.left === right) {\n\t      edge[1] = vertex;\n\t    } else {\n\t      edge[0] = vertex;\n\t    }\n\t  }\n\t\n\t  // Liang–Barsky line clipping.\n\t  function clipEdge(edge, x0, y0, x1, y1) {\n\t    var a = edge[0],\n\t        b = edge[1],\n\t        ax = a[0],\n\t        ay = a[1],\n\t        bx = b[0],\n\t        by = b[1],\n\t        t0 = 0,\n\t        t1 = 1,\n\t        dx = bx - ax,\n\t        dy = by - ay,\n\t        r;\n\t\n\t    r = x0 - ax;\n\t    if (!dx && r > 0) return;\n\t    r /= dx;\n\t    if (dx < 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    } else if (dx > 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    }\n\t\n\t    r = x1 - ax;\n\t    if (!dx && r < 0) return;\n\t    r /= dx;\n\t    if (dx < 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    } else if (dx > 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    }\n\t\n\t    r = y0 - ay;\n\t    if (!dy && r > 0) return;\n\t    r /= dy;\n\t    if (dy < 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    } else if (dy > 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    }\n\t\n\t    r = y1 - ay;\n\t    if (!dy && r < 0) return;\n\t    r /= dy;\n\t    if (dy < 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    } else if (dy > 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    }\n\t\n\t    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\t\n\t    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n\t    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n\t    return true;\n\t  }\n\t\n\t  function connectEdge(edge, x0, y0, x1, y1) {\n\t    var v1 = edge[1];\n\t    if (v1) return true;\n\t\n\t    var v0 = edge[0],\n\t        left = edge.left,\n\t        right = edge.right,\n\t        lx = left[0],\n\t        ly = left[1],\n\t        rx = right[0],\n\t        ry = right[1],\n\t        fx = (lx + rx) / 2,\n\t        fy = (ly + ry) / 2,\n\t        fm,\n\t        fb;\n\t\n\t    if (ry === ly) {\n\t      if (fx < x0 || fx >= x1) return;\n\t      if (lx > rx) {\n\t        if (!v0) v0 = [fx, y0];\n\t        else if (v0[1] >= y1) return;\n\t        v1 = [fx, y1];\n\t      } else {\n\t        if (!v0) v0 = [fx, y1];\n\t        else if (v0[1] < y0) return;\n\t        v1 = [fx, y0];\n\t      }\n\t    } else {\n\t      fm = (lx - rx) / (ry - ly);\n\t      fb = fy - fm * fx;\n\t      if (fm < -1 || fm > 1) {\n\t        if (lx > rx) {\n\t          if (!v0) v0 = [(y0 - fb) / fm, y0];\n\t          else if (v0[1] >= y1) return;\n\t          v1 = [(y1 - fb) / fm, y1];\n\t        } else {\n\t          if (!v0) v0 = [(y1 - fb) / fm, y1];\n\t          else if (v0[1] < y0) return;\n\t          v1 = [(y0 - fb) / fm, y0];\n\t        }\n\t      } else {\n\t        if (ly < ry) {\n\t          if (!v0) v0 = [x0, fm * x0 + fb];\n\t          else if (v0[0] >= x1) return;\n\t          v1 = [x1, fm * x1 + fb];\n\t        } else {\n\t          if (!v0) v0 = [x1, fm * x1 + fb];\n\t          else if (v0[0] < x0) return;\n\t          v1 = [x0, fm * x0 + fb];\n\t        }\n\t      }\n\t    }\n\t\n\t    edge[0] = v0;\n\t    edge[1] = v1;\n\t    return true;\n\t  }\n\t\n\t  function clipEdges(x0, y0, x1, y1) {\n\t    var i = edges.length,\n\t        edge;\n\t\n\t    while (i--) {\n\t      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n\t          || !clipEdge(edge, x0, y0, x1, y1)\n\t          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3\n\t              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {\n\t        delete edges[i];\n\t      }\n\t    }\n\t  }\n\t\n\t  function createCell(site) {\n\t    return cells[site.index] = {\n\t      site: site,\n\t      halfedges: []\n\t    };\n\t  }\n\t\n\t  function cellHalfedgeAngle(cell, edge) {\n\t    var site = cell.site,\n\t        va = edge.left,\n\t        vb = edge.right;\n\t    if (site === vb) vb = va, va = site;\n\t    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n\t    if (site === va) va = edge[1], vb = edge[0];\n\t    else va = edge[0], vb = edge[1];\n\t    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n\t  }\n\t\n\t  function cellHalfedgeStart(cell, edge) {\n\t    return edge[+(edge.left !== cell.site)];\n\t  }\n\t\n\t  function cellHalfedgeEnd(cell, edge) {\n\t    return edge[+(edge.left === cell.site)];\n\t  }\n\t\n\t  function sortCellHalfedges() {\n\t    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n\t      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n\t        var index = new Array(m),\n\t            array = new Array(m);\n\t        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n\t        index.sort(function(i, j) { return array[j] - array[i]; });\n\t        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n\t        for (j = 0; j < m; ++j) halfedges[j] = array[j];\n\t      }\n\t    }\n\t  }\n\t\n\t  function clipCells(x0, y0, x1, y1) {\n\t    var nCells = cells.length,\n\t        iCell,\n\t        cell,\n\t        site,\n\t        iHalfedge,\n\t        halfedges,\n\t        nHalfedges,\n\t        start,\n\t        startX,\n\t        startY,\n\t        end,\n\t        endX,\n\t        endY,\n\t        cover = true;\n\t\n\t    for (iCell = 0; iCell < nCells; ++iCell) {\n\t      if (cell = cells[iCell]) {\n\t        site = cell.site;\n\t        halfedges = cell.halfedges;\n\t        iHalfedge = halfedges.length;\n\t\n\t        // Remove any dangling clipped edges.\n\t        while (iHalfedge--) {\n\t          if (!edges[halfedges[iHalfedge]]) {\n\t            halfedges.splice(iHalfedge, 1);\n\t          }\n\t        }\n\t\n\t        // Insert any border edges as necessary.\n\t        iHalfedge = 0, nHalfedges = halfedges.length;\n\t        while (iHalfedge < nHalfedges) {\n\t          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n\t          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n\t          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {\n\t            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n\t                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]\n\t                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]\n\t                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]\n\t                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]\n\t                : null)) - 1);\n\t            ++nHalfedges;\n\t          }\n\t        }\n\t\n\t        if (nHalfedges) cover = false;\n\t      }\n\t    }\n\t\n\t    // If there weren’t any edges, have the closest site cover the extent.\n\t    // It doesn’t matter which corner of the extent we measure!\n\t    if (cover) {\n\t      var dx, dy, d2, dc = Infinity;\n\t\n\t      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n\t        if (cell = cells[iCell]) {\n\t          site = cell.site;\n\t          dx = site[0] - x0;\n\t          dy = site[1] - y0;\n\t          d2 = dx * dx + dy * dy;\n\t          if (d2 < dc) dc = d2, cover = cell;\n\t        }\n\t      }\n\t\n\t      if (cover) {\n\t        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n\t        cover.halfedges.push(\n\t          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n\t          edges.push(createBorderEdge(site, v01, v11)) - 1,\n\t          edges.push(createBorderEdge(site, v11, v10)) - 1,\n\t          edges.push(createBorderEdge(site, v10, v00)) - 1\n\t        );\n\t      }\n\t    }\n\t\n\t    // Lastly delete any cells with no edges; these were entirely clipped.\n\t    for (iCell = 0; iCell < nCells; ++iCell) {\n\t      if (cell = cells[iCell]) {\n\t        if (!cell.halfedges.length) {\n\t          delete cells[iCell];\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  var circlePool = [];\n\t\n\t  var firstCircle;\n\t\n\t  function Circle() {\n\t    RedBlackNode(this);\n\t    this.x =\n\t    this.y =\n\t    this.arc =\n\t    this.site =\n\t    this.cy = null;\n\t  }\n\t\n\t  function attachCircle(arc) {\n\t    var lArc = arc.P,\n\t        rArc = arc.N;\n\t\n\t    if (!lArc || !rArc) return;\n\t\n\t    var lSite = lArc.site,\n\t        cSite = arc.site,\n\t        rSite = rArc.site;\n\t\n\t    if (lSite === rSite) return;\n\t\n\t    var bx = cSite[0],\n\t        by = cSite[1],\n\t        ax = lSite[0] - bx,\n\t        ay = lSite[1] - by,\n\t        cx = rSite[0] - bx,\n\t        cy = rSite[1] - by;\n\t\n\t    var d = 2 * (ax * cy - ay * cx);\n\t    if (d >= -epsilon2$1) return;\n\t\n\t    var ha = ax * ax + ay * ay,\n\t        hc = cx * cx + cy * cy,\n\t        x = (cy * ha - ay * hc) / d,\n\t        y = (ax * hc - cx * ha) / d;\n\t\n\t    var circle = circlePool.pop() || new Circle;\n\t    circle.arc = arc;\n\t    circle.site = cSite;\n\t    circle.x = x + bx;\n\t    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\t\n\t    arc.circle = circle;\n\t\n\t    var before = null,\n\t        node = circles._;\n\t\n\t    while (node) {\n\t      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n\t        if (node.L) node = node.L;\n\t        else { before = node.P; break; }\n\t      } else {\n\t        if (node.R) node = node.R;\n\t        else { before = node; break; }\n\t      }\n\t    }\n\t\n\t    circles.insert(before, circle);\n\t    if (!before) firstCircle = circle;\n\t  }\n\t\n\t  function detachCircle(arc) {\n\t    var circle = arc.circle;\n\t    if (circle) {\n\t      if (!circle.P) firstCircle = circle.N;\n\t      circles.remove(circle);\n\t      circlePool.push(circle);\n\t      RedBlackNode(circle);\n\t      arc.circle = null;\n\t    }\n\t  }\n\t\n\t  var beachPool = [];\n\t\n\t  function Beach() {\n\t    RedBlackNode(this);\n\t    this.edge =\n\t    this.site =\n\t    this.circle = null;\n\t  }\n\t\n\t  function createBeach(site) {\n\t    var beach = beachPool.pop() || new Beach;\n\t    beach.site = site;\n\t    return beach;\n\t  }\n\t\n\t  function detachBeach(beach) {\n\t    detachCircle(beach);\n\t    beaches.remove(beach);\n\t    beachPool.push(beach);\n\t    RedBlackNode(beach);\n\t  }\n\t\n\t  function removeBeach(beach) {\n\t    var circle = beach.circle,\n\t        x = circle.x,\n\t        y = circle.cy,\n\t        vertex = [x, y],\n\t        previous = beach.P,\n\t        next = beach.N,\n\t        disappearing = [beach];\n\t\n\t    detachBeach(beach);\n\t\n\t    var lArc = previous;\n\t    while (lArc.circle\n\t        && Math.abs(x - lArc.circle.x) < epsilon$3\n\t        && Math.abs(y - lArc.circle.cy) < epsilon$3) {\n\t      previous = lArc.P;\n\t      disappearing.unshift(lArc);\n\t      detachBeach(lArc);\n\t      lArc = previous;\n\t    }\n\t\n\t    disappearing.unshift(lArc);\n\t    detachCircle(lArc);\n\t\n\t    var rArc = next;\n\t    while (rArc.circle\n\t        && Math.abs(x - rArc.circle.x) < epsilon$3\n\t        && Math.abs(y - rArc.circle.cy) < epsilon$3) {\n\t      next = rArc.N;\n\t      disappearing.push(rArc);\n\t      detachBeach(rArc);\n\t      rArc = next;\n\t    }\n\t\n\t    disappearing.push(rArc);\n\t    detachCircle(rArc);\n\t\n\t    var nArcs = disappearing.length,\n\t        iArc;\n\t    for (iArc = 1; iArc < nArcs; ++iArc) {\n\t      rArc = disappearing[iArc];\n\t      lArc = disappearing[iArc - 1];\n\t      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n\t    }\n\t\n\t    lArc = disappearing[0];\n\t    rArc = disappearing[nArcs - 1];\n\t    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\t\n\t    attachCircle(lArc);\n\t    attachCircle(rArc);\n\t  }\n\t\n\t  function addBeach(site) {\n\t    var x = site[0],\n\t        directrix = site[1],\n\t        lArc,\n\t        rArc,\n\t        dxl,\n\t        dxr,\n\t        node = beaches._;\n\t\n\t    while (node) {\n\t      dxl = leftBreakPoint(node, directrix) - x;\n\t      if (dxl > epsilon$3) node = node.L; else {\n\t        dxr = x - rightBreakPoint(node, directrix);\n\t        if (dxr > epsilon$3) {\n\t          if (!node.R) {\n\t            lArc = node;\n\t            break;\n\t          }\n\t          node = node.R;\n\t        } else {\n\t          if (dxl > -epsilon$3) {\n\t            lArc = node.P;\n\t            rArc = node;\n\t          } else if (dxr > -epsilon$3) {\n\t            lArc = node;\n\t            rArc = node.N;\n\t          } else {\n\t            lArc = rArc = node;\n\t          }\n\t          break;\n\t        }\n\t      }\n\t    }\n\t\n\t    createCell(site);\n\t    var newArc = createBeach(site);\n\t    beaches.insert(lArc, newArc);\n\t\n\t    if (!lArc && !rArc) return;\n\t\n\t    if (lArc === rArc) {\n\t      detachCircle(lArc);\n\t      rArc = createBeach(lArc.site);\n\t      beaches.insert(newArc, rArc);\n\t      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n\t      attachCircle(lArc);\n\t      attachCircle(rArc);\n\t      return;\n\t    }\n\t\n\t    if (!rArc) { // && lArc\n\t      newArc.edge = createEdge(lArc.site, newArc.site);\n\t      return;\n\t    }\n\t\n\t    // else lArc !== rArc\n\t    detachCircle(lArc);\n\t    detachCircle(rArc);\n\t\n\t    var lSite = lArc.site,\n\t        ax = lSite[0],\n\t        ay = lSite[1],\n\t        bx = site[0] - ax,\n\t        by = site[1] - ay,\n\t        rSite = rArc.site,\n\t        cx = rSite[0] - ax,\n\t        cy = rSite[1] - ay,\n\t        d = 2 * (bx * cy - by * cx),\n\t        hb = bx * bx + by * by,\n\t        hc = cx * cx + cy * cy,\n\t        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\t\n\t    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n\t    newArc.edge = createEdge(lSite, site, null, vertex);\n\t    rArc.edge = createEdge(site, rSite, null, vertex);\n\t    attachCircle(lArc);\n\t    attachCircle(rArc);\n\t  }\n\t\n\t  function leftBreakPoint(arc, directrix) {\n\t    var site = arc.site,\n\t        rfocx = site[0],\n\t        rfocy = site[1],\n\t        pby2 = rfocy - directrix;\n\t\n\t    if (!pby2) return rfocx;\n\t\n\t    var lArc = arc.P;\n\t    if (!lArc) return -Infinity;\n\t\n\t    site = lArc.site;\n\t    var lfocx = site[0],\n\t        lfocy = site[1],\n\t        plby2 = lfocy - directrix;\n\t\n\t    if (!plby2) return lfocx;\n\t\n\t    var hl = lfocx - rfocx,\n\t        aby2 = 1 / pby2 - 1 / plby2,\n\t        b = hl / plby2;\n\t\n\t    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\t\n\t    return (rfocx + lfocx) / 2;\n\t  }\n\t\n\t  function rightBreakPoint(arc, directrix) {\n\t    var rArc = arc.N;\n\t    if (rArc) return leftBreakPoint(rArc, directrix);\n\t    var site = arc.site;\n\t    return site[1] === directrix ? site[0] : Infinity;\n\t  }\n\t\n\t  var epsilon$3 = 1e-6;\n\t  var epsilon2$1 = 1e-12;\n\t  var beaches;\n\t  var cells;\n\t  var circles;\n\t  var edges;\n\t\n\t  function triangleArea(a, b, c) {\n\t    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n\t  }\n\t\n\t  function lexicographic(a, b) {\n\t    return b[1] - a[1]\n\t        || b[0] - a[0];\n\t  }\n\t\n\t  function Diagram(sites, extent) {\n\t    var site = sites.sort(lexicographic).pop(),\n\t        x,\n\t        y,\n\t        circle;\n\t\n\t    edges = [];\n\t    cells = new Array(sites.length);\n\t    beaches = new RedBlackTree;\n\t    circles = new RedBlackTree;\n\t\n\t    while (true) {\n\t      circle = firstCircle;\n\t      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n\t        if (site[0] !== x || site[1] !== y) {\n\t          addBeach(site);\n\t          x = site[0], y = site[1];\n\t        }\n\t        site = sites.pop();\n\t      } else if (circle) {\n\t        removeBeach(circle.arc);\n\t      } else {\n\t        break;\n\t      }\n\t    }\n\t\n\t    sortCellHalfedges();\n\t\n\t    if (extent) {\n\t      var x0 = +extent[0][0],\n\t          y0 = +extent[0][1],\n\t          x1 = +extent[1][0],\n\t          y1 = +extent[1][1];\n\t      clipEdges(x0, y0, x1, y1);\n\t      clipCells(x0, y0, x1, y1);\n\t    }\n\t\n\t    this.edges = edges;\n\t    this.cells = cells;\n\t\n\t    beaches =\n\t    circles =\n\t    edges =\n\t    cells = null;\n\t  }\n\t\n\t  Diagram.prototype = {\n\t    constructor: Diagram,\n\t\n\t    polygons: function() {\n\t      var edges = this.edges;\n\t\n\t      return this.cells.map(function(cell) {\n\t        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n\t        polygon.data = cell.site.data;\n\t        return polygon;\n\t      });\n\t    },\n\t\n\t    triangles: function() {\n\t      var triangles = [],\n\t          edges = this.edges;\n\t\n\t      this.cells.forEach(function(cell, i) {\n\t        var site = cell.site,\n\t            halfedges = cell.halfedges,\n\t            j = -1,\n\t            m = halfedges.length,\n\t            s0,\n\t            e1 = edges[halfedges[m - 1]],\n\t            s1 = e1.left === site ? e1.right : e1.left;\n\t\n\t        while (++j < m) {\n\t          s0 = s1;\n\t          e1 = edges[halfedges[j]];\n\t          s1 = e1.left === site ? e1.right : e1.left;\n\t          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n\t            triangles.push([site.data, s0.data, s1.data]);\n\t          }\n\t        }\n\t      });\n\t\n\t      return triangles;\n\t    },\n\t\n\t    links: function() {\n\t      return this.edges.filter(function(edge) {\n\t        return edge.right;\n\t      }).map(function(edge) {\n\t        return {\n\t          source: edge.left.data,\n\t          target: edge.right.data\n\t        };\n\t      });\n\t    }\n\t  }\n\t\n\t  function voronoi() {\n\t    var x = x$4,\n\t        y = y$4,\n\t        extent = null;\n\t\n\t    function voronoi(data) {\n\t      return new Diagram(data.map(function(d, i) {\n\t        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];\n\t        s.index = i;\n\t        s.data = d;\n\t        return s;\n\t      }), extent);\n\t    }\n\t\n\t    voronoi.polygons = function(data) {\n\t      return voronoi(data).polygons();\n\t    };\n\t\n\t    voronoi.links = function(data) {\n\t      return voronoi(data).links();\n\t    };\n\t\n\t    voronoi.triangles = function(data) {\n\t      return voronoi(data).triangles();\n\t    };\n\t\n\t    voronoi.x = function(_) {\n\t      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : x;\n\t    };\n\t\n\t    voronoi.y = function(_) {\n\t      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : y;\n\t    };\n\t\n\t    voronoi.extent = function(_) {\n\t      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n\t    };\n\t\n\t    voronoi.size = function(_) {\n\t      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0], extent[1][1]];\n\t    };\n\t\n\t    return voronoi;\n\t  }\n\t\n\t  function constant$9(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function ZoomEvent(target, type, transform) {\n\t    this.target = target;\n\t    this.type = type;\n\t    this.transform = transform;\n\t  }\n\t\n\t  function Transform(k, x, y) {\n\t    this.k = k;\n\t    this.x = x;\n\t    this.y = y;\n\t  }\n\t\n\t  Transform.prototype = {\n\t    constructor: Transform,\n\t    scale: function(k) {\n\t      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n\t    },\n\t    translate: function(x, y) {\n\t      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n\t    },\n\t    apply: function(point) {\n\t      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n\t    },\n\t    applyX: function(x) {\n\t      return x * this.k + this.x;\n\t    },\n\t    applyY: function(y) {\n\t      return y * this.k + this.y;\n\t    },\n\t    invert: function(location) {\n\t      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n\t    },\n\t    invertX: function(x) {\n\t      return (x - this.x) / this.k;\n\t    },\n\t    invertY: function(y) {\n\t      return (y - this.y) / this.k;\n\t    },\n\t    rescaleX: function(x) {\n\t      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n\t    },\n\t    rescaleY: function(y) {\n\t      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n\t    },\n\t    toString: function() {\n\t      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n\t    }\n\t  };\n\t\n\t  var identity$6 = new Transform(1, 0, 0);\n\t\n\t  transform.prototype = Transform.prototype;\n\t\n\t  function transform(node) {\n\t    return node.__zoom || identity$6;\n\t  }\n\t\n\t  function nopropagation$1() {\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  function noevent$1() {\n\t    exports.event.preventDefault();\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  // Ignore right-click, since that should open the context menu.\n\t  function defaultFilter$1() {\n\t    return !exports.event.button;\n\t  }\n\t\n\t  function defaultExtent() {\n\t    var svg = this.ownerSVGElement;\n\t    return [[0, 0], svg\n\t        ? [svg.width.baseVal.value, svg.height.baseVal.value]\n\t        : [this.clientWidth, this.clientHeight]];\n\t  }\n\t\n\t  function defaultTransform() {\n\t    return this.__zoom || identity$6;\n\t  }\n\t\n\t  function zoom() {\n\t    var filter = defaultFilter$1,\n\t        extent = defaultExtent,\n\t        k0 = 0,\n\t        k1 = Infinity,\n\t        x0 = -k1,\n\t        x1 = k1,\n\t        y0 = x0,\n\t        y1 = x1,\n\t        duration = 250,\n\t        gestures = [],\n\t        listeners = dispatch(\"start\", \"zoom\", \"end\"),\n\t        mousemoving,\n\t        mousePoint,\n\t        mouseLocation,\n\t        touchstarting,\n\t        touchending,\n\t        touchDelay = 500,\n\t        wheelTimer,\n\t        wheelDelay = 150;\n\t\n\t    function zoom(selection) {\n\t      selection\n\t          .on(\"wheel.zoom\", wheeled)\n\t          .on(\"mousedown.zoom\", mousedowned)\n\t          .on(\"dblclick.zoom\", dblclicked)\n\t          .on(\"touchstart.zoom\", touchstarted)\n\t          .on(\"touchmove.zoom\", touchmoved)\n\t          .on(\"touchend.zoom touchcancel.zoom\", touchended)\n\t          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n\t          .property(\"__zoom\", defaultTransform);\n\t    }\n\t\n\t    zoom.transform = function(collection, transform) {\n\t      var selection = collection.selection ? collection.selection() : collection;\n\t      selection.property(\"__zoom\", defaultTransform);\n\t      if (collection !== selection) {\n\t        schedule(collection, transform);\n\t      } else {\n\t        selection.interrupt().each(function() {\n\t          gesture(this, arguments)\n\t              .start()\n\t              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n\t              .end();\n\t        });\n\t      }\n\t    };\n\t\n\t    zoom.scaleBy = function(selection, k) {\n\t      zoom.scaleTo(selection, function() {\n\t        var k0 = this.__zoom.k,\n\t            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n\t        return k0 * k1;\n\t      });\n\t    };\n\t\n\t    zoom.scaleTo = function(selection, k) {\n\t      zoom.transform(selection, function() {\n\t        var e = extent.apply(this, arguments),\n\t            t0 = this.__zoom,\n\t            p0 = centroid(e),\n\t            p1 = t0.invert(p0),\n\t            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n\t        return constrain(translate(scale(t0, k1), p0, p1), e);\n\t      });\n\t    };\n\t\n\t    zoom.translateBy = function(selection, x, y) {\n\t      zoom.transform(selection, function() {\n\t        return constrain(this.__zoom.translate(\n\t          typeof x === \"function\" ? x.apply(this, arguments) : x,\n\t          typeof y === \"function\" ? y.apply(this, arguments) : y\n\t        ), extent.apply(this, arguments));\n\t      });\n\t    };\n\t\n\t    function scale(transform, k) {\n\t      k = Math.max(k0, Math.min(k1, k));\n\t      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n\t    }\n\t\n\t    function translate(transform, p0, p1) {\n\t      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n\t      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n\t    }\n\t\n\t    function constrain(transform, extent) {\n\t      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),\n\t          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);\n\t      return dx || dy ? transform.translate(dx, dy) : transform;\n\t    }\n\t\n\t    function centroid(extent) {\n\t      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n\t    }\n\t\n\t    function schedule(transition, transform, center) {\n\t      transition\n\t          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n\t          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n\t          .tween(\"zoom\", function() {\n\t            var that = this,\n\t                args = arguments,\n\t                g = gesture(that, args),\n\t                e = extent.apply(that, args),\n\t                p = center || centroid(e),\n\t                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n\t                a = that.__zoom,\n\t                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n\t                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n\t            return function(t) {\n\t              if (t === 1) t = b; // Avoid rounding error on end.\n\t              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n\t              g.zoom(null, t);\n\t            };\n\t          });\n\t    }\n\t\n\t    function gesture(that, args) {\n\t      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n\t        if ((g = gestures[i]).that === that) {\n\t          return g;\n\t        }\n\t      }\n\t      return new Gesture(that, args);\n\t    }\n\t\n\t    function Gesture(that, args) {\n\t      this.that = that;\n\t      this.args = args;\n\t      this.index = -1;\n\t      this.active = 0;\n\t    }\n\t\n\t    Gesture.prototype = {\n\t      start: function() {\n\t        if (++this.active === 1) {\n\t          this.index = gestures.push(this) - 1;\n\t          this.emit(\"start\");\n\t        }\n\t        return this;\n\t      },\n\t      zoom: function(key, transform) {\n\t        if (mousePoint && key !== \"mouse\") mouseLocation = transform.invert(mousePoint);\n\t        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n\t        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n\t        this.that.__zoom = transform;\n\t        this.emit(\"zoom\");\n\t        return this;\n\t      },\n\t      end: function() {\n\t        if (--this.active === 0) {\n\t          gestures.splice(this.index, 1);\n\t          mousePoint = mouseLocation = null;\n\t          this.index = -1;\n\t          this.emit(\"end\");\n\t        }\n\t        return this;\n\t      },\n\t      emit: function(type) {\n\t        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n\t      }\n\t    };\n\t\n\t    function wheeled() {\n\t      if (!filter.apply(this, arguments)) return;\n\t      var g = gesture(this, arguments),\n\t          t = this.__zoom,\n\t          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500)));\n\t\n\t      // If the mouse is in the same location as before, reuse it.\n\t      // If there were recent wheel events, reset the wheel idle timeout.\n\t      if (wheelTimer) {\n\t        var point = mouse(this);\n\t        if (mousePoint[0] !== point[0] || mousePoint[1] !== point[1]) {\n\t          mouseLocation = t.invert(mousePoint = point);\n\t        }\n\t        clearTimeout(wheelTimer);\n\t      }\n\t\n\t      // If this wheel event won’t trigger a transform change, ignore it.\n\t      else if (t.k === k) return;\n\t\n\t      // Otherwise, capture the mouse point and location at the start.\n\t      else {\n\t        g.extent = extent.apply(this, arguments);\n\t        mouseLocation = t.invert(mousePoint = mouse(this));\n\t        interrupt(this);\n\t        g.start();\n\t      }\n\t\n\t      noevent$1();\n\t      wheelTimer = setTimeout(wheelidled, wheelDelay);\n\t      g.zoom(\"mouse\", constrain(translate(scale(t, k), mousePoint, mouseLocation), g.extent));\n\t\n\t      function wheelidled() {\n\t        wheelTimer = null;\n\t        g.end();\n\t      }\n\t    }\n\t\n\t    function mousedowned() {\n\t      if (touchending || !filter.apply(this, arguments)) return;\n\t      var g = gesture(this, arguments),\n\t          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true);\n\t\n\t      dragDisable(exports.event.view);\n\t      nopropagation$1();\n\t      mousemoving = false;\n\t      g.extent = extent.apply(this, arguments);\n\t      mouseLocation = this.__zoom.invert(mousePoint = mouse(this));\n\t      interrupt(this);\n\t      g.start();\n\t\n\t      function mousemoved() {\n\t        noevent$1();\n\t        mousemoving = true;\n\t        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, mousePoint = mouse(g.that), mouseLocation), g.extent));\n\t      }\n\t\n\t      function mouseupped() {\n\t        v.on(\"mousemove.zoom mouseup.zoom\", null);\n\t        dragEnable(exports.event.view, mousemoving);\n\t        noevent$1();\n\t        g.end();\n\t      }\n\t    }\n\t\n\t    function dblclicked() {\n\t      if (!filter.apply(this, arguments)) return;\n\t      var t0 = this.__zoom,\n\t          p0 = mouse(this),\n\t          p1 = t0.invert(p0),\n\t          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\n\t          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\t\n\t      noevent$1();\n\t      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n\t      else select(this).call(zoom.transform, t1);\n\t    }\n\t\n\t    function touchstarted() {\n\t      if (!filter.apply(this, arguments)) return;\n\t      var g = gesture(this, arguments),\n\t          touches = exports.event.changedTouches,\n\t          n = touches.length, i, t, p;\n\t\n\t      nopropagation$1();\n\t      for (i = 0; i < n; ++i) {\n\t        t = touches[i], p = touch(this, touches, t.identifier);\n\t        p = [p, this.__zoom.invert(p), t.identifier];\n\t        if (!g.touch0) g.touch0 = p;\n\t        else if (!g.touch1) g.touch1 = p;\n\t      }\n\t      if (touchstarting) {\n\t        touchstarting = clearTimeout(touchstarting);\n\t        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);\n\t      }\n\t      if (exports.event.touches.length === n) {\n\t        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n\t        interrupt(this);\n\t        g.extent = extent.apply(this, arguments);\n\t        g.start();\n\t      }\n\t    }\n\t\n\t    function touchmoved() {\n\t      var g = gesture(this, arguments),\n\t          touches = exports.event.changedTouches,\n\t          n = touches.length, i, t, p, l;\n\t\n\t      noevent$1();\n\t      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n\t      for (i = 0; i < n; ++i) {\n\t        t = touches[i], p = touch(this, touches, t.identifier);\n\t        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n\t        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n\t      }\n\t      t = g.that.__zoom;\n\t      if (g.touch1) {\n\t        var p0 = g.touch0[0], l0 = g.touch0[1],\n\t            p1 = g.touch1[0], l1 = g.touch1[1],\n\t            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n\t            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n\t        t = scale(t, Math.sqrt(dp / dl));\n\t        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n\t        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n\t      }\n\t      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n\t      else return;\n\t      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n\t    }\n\t\n\t    function touchended() {\n\t      var g = gesture(this, arguments),\n\t          touches = exports.event.changedTouches,\n\t          n = touches.length, i, t;\n\t\n\t      nopropagation$1();\n\t      if (touchending) clearTimeout(touchending);\n\t      touchending = setTimeout(function() { touchending = null; }, touchDelay);\n\t      for (i = 0; i < n; ++i) {\n\t        t = touches[i];\n\t        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n\t        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n\t      }\n\t      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n\t      if (!g.touch0) g.end();\n\t    }\n\t\n\t    zoom.filter = function(_) {\n\t      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$9(!!_), zoom) : filter;\n\t    };\n\t\n\t    zoom.extent = function(_) {\n\t      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n\t    };\n\t\n\t    zoom.scaleExtent = function(_) {\n\t      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n\t    };\n\t\n\t    zoom.translateExtent = function(_) {\n\t      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n\t    };\n\t\n\t    zoom.duration = function(_) {\n\t      return arguments.length ? (duration = +_, zoom) : duration;\n\t    };\n\t\n\t    zoom.on = function() {\n\t      var value = listeners.on.apply(listeners, arguments);\n\t      return value === listeners ? zoom : value;\n\t    };\n\t\n\t    return zoom;\n\t  }\n\t\n\t  function constant$10(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function BrushEvent(target, type, selection) {\n\t    this.target = target;\n\t    this.type = type;\n\t    this.selection = selection;\n\t  }\n\t\n\t  function nopropagation$2() {\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  function noevent$2() {\n\t    exports.event.preventDefault();\n\t    exports.event.stopImmediatePropagation();\n\t  }\n\t\n\t  var MODE_DRAG = {name: \"drag\"};\n\t  var MODE_SPACE = {name: \"space\"};\n\t  var MODE_HANDLE = {name: \"handle\"};\n\t  var MODE_CENTER = {name: \"center\"};\n\t  var X = {\n\t    name: \"x\",\n\t    handles: [\"e\", \"w\"].map(type$1),\n\t    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n\t    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n\t  };\n\t\n\t  var Y = {\n\t    name: \"y\",\n\t    handles: [\"n\", \"s\"].map(type$1),\n\t    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n\t    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n\t  };\n\t\n\t  var XY = {\n\t    name: \"xy\",\n\t    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type$1),\n\t    input: function(xy) { return xy; },\n\t    output: function(xy) { return xy; }\n\t  };\n\t\n\t  var cursors = {\n\t    overlay: \"crosshair\",\n\t    selection: \"move\",\n\t    n: \"ns-resize\",\n\t    e: \"ew-resize\",\n\t    s: \"ns-resize\",\n\t    w: \"ew-resize\",\n\t    nw: \"nwse-resize\",\n\t    ne: \"nesw-resize\",\n\t    se: \"nwse-resize\",\n\t    sw: \"nesw-resize\"\n\t  };\n\t\n\t  var flipX = {\n\t    e: \"w\",\n\t    w: \"e\",\n\t    nw: \"ne\",\n\t    ne: \"nw\",\n\t    se: \"sw\",\n\t    sw: \"se\"\n\t  };\n\t\n\t  var flipY = {\n\t    n: \"s\",\n\t    s: \"n\",\n\t    nw: \"sw\",\n\t    ne: \"se\",\n\t    se: \"ne\",\n\t    sw: \"nw\"\n\t  };\n\t\n\t  var signsX = {\n\t    overlay: +1,\n\t    selection: +1,\n\t    n: null,\n\t    e: +1,\n\t    s: null,\n\t    w: -1,\n\t    nw: -1,\n\t    ne: +1,\n\t    se: +1,\n\t    sw: -1\n\t  };\n\t\n\t  var signsY = {\n\t    overlay: +1,\n\t    selection: +1,\n\t    n: -1,\n\t    e: null,\n\t    s: +1,\n\t    w: null,\n\t    nw: -1,\n\t    ne: -1,\n\t    se: +1,\n\t    sw: +1\n\t  };\n\t\n\t  function type$1(t) {\n\t    return {type: t};\n\t  }\n\t\n\t  // Ignore right-click, since that should open the context menu.\n\t  function defaultFilter$2() {\n\t    return !exports.event.button;\n\t  }\n\t\n\t  function defaultExtent$1() {\n\t    var svg = this.ownerSVGElement;\n\t    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n\t  }\n\t\n\t  // Like d3.local, but with the name “__brush” rather than auto-generated.\n\t  function local$1(node) {\n\t    while (!node.__brush) if (!(node = node.parentNode)) return;\n\t    return node.__brush;\n\t  }\n\t\n\t  function empty(extent) {\n\t    return extent[0][0] === extent[1][0]\n\t        || extent[0][1] === extent[1][1];\n\t  }\n\t\n\t  function brushSelection(node) {\n\t    var state = node.__brush;\n\t    return state ? state.dim.output(state.selection) : null;\n\t  }\n\t\n\t  function brushX() {\n\t    return brush$1(X);\n\t  }\n\t\n\t  function brushY() {\n\t    return brush$1(Y);\n\t  }\n\t\n\t  function brush() {\n\t    return brush$1(XY);\n\t  }\n\t\n\t  function brush$1(dim) {\n\t    var extent = defaultExtent$1,\n\t        filter = defaultFilter$2,\n\t        listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n\t        handleSize = 6,\n\t        touchending;\n\t\n\t    function brush(group) {\n\t      var overlay = group\n\t          .property(\"__brush\", initialize)\n\t        .selectAll(\".overlay\")\n\t        .data([type$1(\"overlay\")]);\n\t\n\t      overlay.enter().append(\"rect\")\n\t          .attr(\"class\", \"overlay\")\n\t          .attr(\"pointer-events\", \"all\")\n\t          .attr(\"cursor\", cursors.overlay)\n\t        .merge(overlay)\n\t          .each(function() {\n\t            var extent = local$1(this).extent;\n\t            select(this)\n\t                .attr(\"x\", extent[0][0])\n\t                .attr(\"y\", extent[0][1])\n\t                .attr(\"width\", extent[1][0] - extent[0][0])\n\t                .attr(\"height\", extent[1][1] - extent[0][1]);\n\t          });\n\t\n\t      group.selectAll(\".selection\")\n\t        .data([type$1(\"selection\")])\n\t        .enter().append(\"rect\")\n\t          .attr(\"class\", \"selection\")\n\t          .attr(\"cursor\", cursors.selection)\n\t          .attr(\"fill\", \"#777\")\n\t          .attr(\"fill-opacity\", 0.3)\n\t          .attr(\"stroke\", \"#fff\")\n\t          .attr(\"shape-rendering\", \"crispEdges\");\n\t\n\t      var handle = group.selectAll(\".handle\")\n\t        .data(dim.handles, function(d) { return d.type; });\n\t\n\t      handle.exit().remove();\n\t\n\t      handle.enter().append(\"rect\")\n\t          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n\t          .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\t\n\t      group\n\t          .each(redraw)\n\t          .attr(\"fill\", \"none\")\n\t          .attr(\"pointer-events\", \"all\")\n\t          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n\t          .on(\"mousedown.brush touchstart.brush\", started);\n\t    }\n\t\n\t    brush.move = function(group, selection) {\n\t      if (group.selection) {\n\t        group\n\t            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n\t            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n\t            .tween(\"brush\", function() {\n\t              var that = this,\n\t                  state = that.__brush,\n\t                  emit = emitter(that, arguments),\n\t                  selection0 = state.selection,\n\t                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n\t                  i = interpolate(selection0, selection1);\n\t\n\t              function tween(t) {\n\t                state.selection = t === 1 && empty(selection1) ? null : i(t);\n\t                redraw.call(that);\n\t                emit.brush();\n\t              }\n\t\n\t              return selection0 && selection1 ? tween : tween(1);\n\t            });\n\t      } else {\n\t        group\n\t            .each(function() {\n\t              var that = this,\n\t                  args = arguments,\n\t                  state = that.__brush,\n\t                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n\t                  emit = emitter(that, args).beforestart();\n\t\n\t              interrupt(that);\n\t              state.selection = selection1 == null || empty(selection1) ? null : selection1;\n\t              redraw.call(that);\n\t              emit.start().brush().end();\n\t            });\n\t      }\n\t    };\n\t\n\t    function redraw() {\n\t      var group = select(this),\n\t          selection = local$1(this).selection;\n\t\n\t      if (selection) {\n\t        group.selectAll(\".selection\")\n\t            .style(\"display\", null)\n\t            .attr(\"x\", selection[0][0])\n\t            .attr(\"y\", selection[0][1])\n\t            .attr(\"width\", selection[1][0] - selection[0][0])\n\t            .attr(\"height\", selection[1][1] - selection[0][1]);\n\t\n\t        group.selectAll(\".handle\")\n\t            .style(\"display\", null)\n\t            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n\t            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n\t            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n\t            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n\t      }\n\t\n\t      else {\n\t        group.selectAll(\".selection,.handle\")\n\t            .style(\"display\", \"none\")\n\t            .attr(\"x\", null)\n\t            .attr(\"y\", null)\n\t            .attr(\"width\", null)\n\t            .attr(\"height\", null);\n\t      }\n\t    }\n\t\n\t    function emitter(that, args) {\n\t      return that.__brush.emitter || new Emitter(that, args);\n\t    }\n\t\n\t    function Emitter(that, args) {\n\t      this.that = that;\n\t      this.args = args;\n\t      this.state = that.__brush;\n\t      this.active = 0;\n\t    }\n\t\n\t    Emitter.prototype = {\n\t      beforestart: function() {\n\t        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n\t        return this;\n\t      },\n\t      start: function() {\n\t        if (this.starting) this.starting = false, this.emit(\"start\");\n\t        return this;\n\t      },\n\t      brush: function() {\n\t        this.emit(\"brush\");\n\t        return this;\n\t      },\n\t      end: function() {\n\t        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n\t        return this;\n\t      },\n\t      emit: function(type) {\n\t        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n\t      }\n\t    };\n\t\n\t    function started() {\n\t      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }\n\t      else if (touchending) return;\n\t      if (!filter.apply(this, arguments)) return;\n\t\n\t      var that = this,\n\t          type = exports.event.target.__data__.type,\n\t          mode = (exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\n\t          signX = dim === Y ? null : signsX[type],\n\t          signY = dim === X ? null : signsY[type],\n\t          state = local$1(that),\n\t          extent = state.extent,\n\t          selection = state.selection,\n\t          W = extent[0][0], w0, w1,\n\t          N = extent[0][1], n0, n1,\n\t          E = extent[1][0], e0, e1,\n\t          S = extent[1][1], s0, s1,\n\t          dx,\n\t          dy,\n\t          moving,\n\t          shifting = signX && signY && exports.event.shiftKey,\n\t          lockX,\n\t          lockY,\n\t          point0 = mouse(that),\n\t          point = point0,\n\t          emit = emitter(that, arguments).beforestart();\n\t\n\t      if (type === \"overlay\") {\n\t        state.selection = selection = [\n\t          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n\t          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n\t        ];\n\t      } else {\n\t        w0 = selection[0][0];\n\t        n0 = selection[0][1];\n\t        e0 = selection[1][0];\n\t        s0 = selection[1][1];\n\t      }\n\t\n\t      w1 = w0;\n\t      n1 = n0;\n\t      e1 = e0;\n\t      s1 = s0;\n\t\n\t      var group = select(that)\n\t          .attr(\"pointer-events\", \"none\");\n\t\n\t      var overlay = group.selectAll(\".overlay\")\n\t          .attr(\"cursor\", cursors[type]);\n\t\n\t      if (exports.event.touches) {\n\t        group\n\t            .on(\"touchmove.brush\", moved, true)\n\t            .on(\"touchend.brush touchcancel.brush\", ended, true);\n\t      } else {\n\t        var view = select(exports.event.view)\n\t            .on(\"keydown.brush\", keydowned, true)\n\t            .on(\"keyup.brush\", keyupped, true)\n\t            .on(\"mousemove.brush\", moved, true)\n\t            .on(\"mouseup.brush\", ended, true);\n\t\n\t        dragDisable(exports.event.view);\n\t      }\n\t\n\t      nopropagation$2();\n\t      interrupt(that);\n\t      redraw.call(that);\n\t      emit.start();\n\t\n\t      function moved() {\n\t        var point1 = mouse(that);\n\t        if (shifting && !lockX && !lockY) {\n\t          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n\t          else lockX = true;\n\t        }\n\t        point = point1;\n\t        moving = true;\n\t        noevent$2();\n\t        move();\n\t      }\n\t\n\t      function move() {\n\t        var t;\n\t\n\t        dx = point[0] - point0[0];\n\t        dy = point[1] - point0[1];\n\t\n\t        switch (mode) {\n\t          case MODE_SPACE:\n\t          case MODE_DRAG: {\n\t            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n\t            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n\t            break;\n\t          }\n\t          case MODE_HANDLE: {\n\t            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n\t            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n\t            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n\t            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n\t            break;\n\t          }\n\t          case MODE_CENTER: {\n\t            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n\t            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (e1 < w1) {\n\t          signX *= -1;\n\t          t = w0, w0 = e0, e0 = t;\n\t          t = w1, w1 = e1, e1 = t;\n\t          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n\t        }\n\t\n\t        if (s1 < n1) {\n\t          signY *= -1;\n\t          t = n0, n0 = s0, s0 = t;\n\t          t = n1, n1 = s1, s1 = t;\n\t          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n\t        }\n\t\n\t        selection = state.selection; // May be set by brush.move!\n\t\n\t        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n\t        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\t\n\t        if (selection[0][0] !== w1\n\t            || selection[0][1] !== n1\n\t            || selection[1][0] !== e1\n\t            || selection[1][1] !== s1) {\n\t          state.selection = [[w1, n1], [e1, s1]];\n\t          redraw.call(that);\n\t          emit.brush();\n\t        }\n\t      }\n\t\n\t      function ended() {\n\t        nopropagation$2();\n\t        if (exports.event.touches) {\n\t          if (exports.event.touches.length) return;\n\t          if (touchending) clearTimeout(touchending);\n\t          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n\t          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n\t        } else {\n\t          dragEnable(exports.event.view, moving);\n\t          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n\t        }\n\t        group.attr(\"pointer-events\", \"all\");\n\t        overlay.attr(\"cursor\", cursors.overlay);\n\t        if (empty(selection)) state.selection = null, redraw.call(that);\n\t        emit.end();\n\t      }\n\t\n\t      function keydowned() {\n\t        switch (exports.event.keyCode) {\n\t          case 16: { // SHIFT\n\t            shifting = signX && signY;\n\t            break;\n\t          }\n\t          case 18: { // ALT\n\t            if (mode === MODE_HANDLE) {\n\t              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n\t              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n\t              mode = MODE_CENTER;\n\t              move();\n\t            }\n\t            break;\n\t          }\n\t          case 32: { // SPACE; takes priority over ALT\n\t            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n\t              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n\t              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n\t              mode = MODE_SPACE;\n\t              overlay.attr(\"cursor\", cursors.selection);\n\t              move();\n\t            }\n\t            break;\n\t          }\n\t          default: return;\n\t        }\n\t        noevent$2();\n\t      }\n\t\n\t      function keyupped() {\n\t        switch (exports.event.keyCode) {\n\t          case 16: { // SHIFT\n\t            if (shifting) {\n\t              lockX = lockY = shifting = false;\n\t              move();\n\t            }\n\t            break;\n\t          }\n\t          case 18: { // ALT\n\t            if (mode === MODE_CENTER) {\n\t              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n\t              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n\t              mode = MODE_HANDLE;\n\t              move();\n\t            }\n\t            break;\n\t          }\n\t          case 32: { // SPACE\n\t            if (mode === MODE_SPACE) {\n\t              if (exports.event.altKey) {\n\t                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n\t                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n\t                mode = MODE_CENTER;\n\t              } else {\n\t                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n\t                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n\t                mode = MODE_HANDLE;\n\t              }\n\t              overlay.attr(\"cursor\", cursors[type]);\n\t              move();\n\t            }\n\t            break;\n\t          }\n\t          default: return;\n\t        }\n\t        noevent$2();\n\t      }\n\t    }\n\t\n\t    function initialize() {\n\t      var state = this.__brush || {selection: null};\n\t      state.extent = extent.apply(this, arguments);\n\t      state.dim = dim;\n\t      return state;\n\t    }\n\t\n\t    brush.extent = function(_) {\n\t      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n\t    };\n\t\n\t    brush.filter = function(_) {\n\t      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$10(!!_), brush) : filter;\n\t    };\n\t\n\t    brush.handleSize = function(_) {\n\t      return arguments.length ? (handleSize = +_, brush) : handleSize;\n\t    };\n\t\n\t    brush.on = function() {\n\t      var value = listeners.on.apply(listeners, arguments);\n\t      return value === listeners ? brush : value;\n\t    };\n\t\n\t    return brush;\n\t  }\n\t\n\t  // Adds floating point numbers with twice the normal precision.\n\t  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n\t  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n\t  // 305–363 (1997).\n\t  // Code adapted from GeographicLib by Charles F. F. Karney,\n\t  // http://geographiclib.sourceforge.net/\n\t\n\t  function adder() {\n\t    return new Adder;\n\t  }\n\t\n\t  function Adder() {\n\t    this.reset();\n\t  }\n\t\n\t  Adder.prototype = {\n\t    constructor: Adder,\n\t    reset: function() {\n\t      this.s = // rounded value\n\t      this.t = 0; // exact error\n\t    },\n\t    add: function(y) {\n\t      add$1(temp, y, this.t);\n\t      add$1(this, temp.s, this.s);\n\t      if (this.s) this.t += temp.t;\n\t      else this.s = temp.t;\n\t    },\n\t    valueOf: function() {\n\t      return this.s;\n\t    }\n\t  };\n\t\n\t  var temp = new Adder;\n\t\n\t  function add$1(adder, a, b) {\n\t    var x = adder.s = a + b,\n\t        bv = x - a,\n\t        av = x - bv;\n\t    adder.t = (a - av) + (b - bv);\n\t  }\n\t\n\t  var epsilon$4 = 1e-6;\n\t  var epsilon2$2 = 1e-12;\n\t  var pi$3 = Math.PI;\n\t  var halfPi$2 = pi$3 / 2;\n\t  var quarterPi = pi$3 / 4;\n\t  var tau$3 = pi$3 * 2;\n\t\n\t  var degrees$1 = 180 / pi$3;\n\t  var radians = pi$3 / 180;\n\t\n\t  var abs = Math.abs;\n\t  var atan = Math.atan;\n\t  var atan2 = Math.atan2;\n\t  var cos = Math.cos;\n\t  var ceil = Math.ceil;\n\t  var exp = Math.exp;\n\t  var log$1 = Math.log;\n\t  var pow$1 = Math.pow;\n\t  var sin = Math.sin;\n\t  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n\t  var sqrt$1 = Math.sqrt;\n\t  var tan = Math.tan;\n\t\n\t  function acos(x) {\n\t    return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);\n\t  }\n\t\n\t  function asin$1(x) {\n\t    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);\n\t  }\n\t\n\t  function haversin(x) {\n\t    return (x = sin(x / 2)) * x;\n\t  }\n\t\n\t  function noop$2() {}\n\t\n\t  function streamGeometry(geometry, sink) {\n\t    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n\t      streamGeometryType[geometry.type](geometry, sink);\n\t    }\n\t  }\n\t\n\t  var streamObjectType = {\n\t    Feature: function(feature, sink) {\n\t      streamGeometry(feature.geometry, sink);\n\t    },\n\t    FeatureCollection: function(object, sink) {\n\t      var features = object.features, i = -1, n = features.length;\n\t      while (++i < n) streamGeometry(features[i].geometry, sink);\n\t    }\n\t  };\n\t\n\t  var streamGeometryType = {\n\t    Sphere: function(object, sink) {\n\t      sink.sphere();\n\t    },\n\t    Point: function(object, sink) {\n\t      object = object.coordinates;\n\t      sink.point(object[0], object[1], object[2]);\n\t    },\n\t    MultiPoint: function(object, sink) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) object = coordinates[i], sink.point(object[0], object[1], object[2]);\n\t    },\n\t    LineString: function(object, sink) {\n\t      streamLine(object.coordinates, sink, 0);\n\t    },\n\t    MultiLineString: function(object, sink) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) streamLine(coordinates[i], sink, 0);\n\t    },\n\t    Polygon: function(object, sink) {\n\t      streamPolygon(object.coordinates, sink);\n\t    },\n\t    MultiPolygon: function(object, sink) {\n\t      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n\t      while (++i < n) streamPolygon(coordinates[i], sink);\n\t    },\n\t    GeometryCollection: function(object, sink) {\n\t      var geometries = object.geometries, i = -1, n = geometries.length;\n\t      while (++i < n) streamGeometry(geometries[i], sink);\n\t    }\n\t  };\n\t\n\t  function streamLine(coordinates, sink, closed) {\n\t    var i = -1, n = coordinates.length - closed, coordinate;\n\t    sink.lineStart();\n\t    while (++i < n) coordinate = coordinates[i], sink.point(coordinate[0], coordinate[1], coordinate[2]);\n\t    sink.lineEnd();\n\t  }\n\t\n\t  function streamPolygon(coordinates, sink) {\n\t    var i = -1, n = coordinates.length;\n\t    sink.polygonStart();\n\t    while (++i < n) streamLine(coordinates[i], sink, 1);\n\t    sink.polygonEnd();\n\t  }\n\t\n\t  function stream(object, sink) {\n\t    if (object && streamObjectType.hasOwnProperty(object.type)) {\n\t      streamObjectType[object.type](object, sink);\n\t    } else {\n\t      streamGeometry(object, sink);\n\t    }\n\t  }\n\t\n\t  var areaRingSum;\n\t\n\t  var areaSum;\n\t  var lambda00;\n\t  var phi00;\n\t  var lambda0;\n\t  var cosPhi0;\n\t  var sinPhi0;\n\t  var areaSink = {\n\t    point: noop$2,\n\t    lineStart: noop$2,\n\t    lineEnd: noop$2,\n\t    polygonStart: function() {\n\t      areaRingSum.reset();\n\t      areaSink.lineStart = areaRingStart;\n\t      areaSink.lineEnd = areaRingEnd;\n\t    },\n\t    polygonEnd: function() {\n\t      var areaRing = +areaRingSum;\n\t      areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);\n\t      this.lineStart = this.lineEnd = this.point = noop$2;\n\t    },\n\t    sphere: function() {\n\t      areaSum.add(tau$3);\n\t    }\n\t  };\n\t\n\t  function areaRingStart() {\n\t    areaSink.point = areaPointFirst;\n\t  }\n\t\n\t  function areaRingEnd() {\n\t    areaPoint(lambda00, phi00);\n\t  }\n\t\n\t  function areaPointFirst(lambda, phi) {\n\t    areaSink.point = areaPoint;\n\t    lambda00 = lambda, phi00 = phi;\n\t    lambda *= radians, phi *= radians;\n\t    lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n\t  }\n\t\n\t  function areaPoint(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\t\n\t    // Spherical excess E for a spherical triangle with vertices: south pole,\n\t    // previous point, current point.  Uses a formula derived from Cagnoli’s\n\t    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\t    var dLambda = lambda - lambda0,\n\t        sdLambda = dLambda >= 0 ? 1 : -1,\n\t        adLambda = sdLambda * dLambda,\n\t        cosPhi = cos(phi),\n\t        sinPhi = sin(phi),\n\t        k = sinPhi0 * sinPhi,\n\t        u = cosPhi0 * cosPhi + k * cos(adLambda),\n\t        v = k * sdLambda * sin(adLambda);\n\t    areaRingSum.add(atan2(v, u));\n\t\n\t    // Advance the previous points.\n\t    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n\t  }\n\t\n\t  function area$2(object) {\n\t    if (areaSum) areaSum.reset();\n\t    else areaSum = adder(), areaRingSum = adder();\n\t    stream(object, areaSink);\n\t    return areaSum * 2;\n\t  }\n\t\n\t  function spherical(cartesian) {\n\t    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n\t  }\n\t\n\t  function cartesian(spherical) {\n\t    var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n\t    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n\t  }\n\t\n\t  function cartesianDot(a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t  }\n\t\n\t  function cartesianCross(a, b) {\n\t    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n\t  }\n\t\n\t  // TODO return a\n\t  function cartesianAddInPlace(a, b) {\n\t    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n\t  }\n\t\n\t  function cartesianScale(vector, k) {\n\t    return [vector[0] * k, vector[1] * k, vector[2] * k];\n\t  }\n\t\n\t  // TODO return d\n\t  function cartesianNormalizeInPlace(d) {\n\t    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n\t    d[0] /= l, d[1] /= l, d[2] /= l;\n\t  }\n\t\n\tvar   lambda0$1;\n\t  var phi0;\n\t  var lambda1;\n\t  var phi1;\n\t  var lambda2;\n\tvar   lambda00$1;\n\tvar   phi00$1;\n\t  var p0;\n\t  var deltaSum;\n\t  var ranges;\n\tvar   range$1;\n\t  var boundsSink = {\n\t    point: boundsPoint,\n\t    lineStart: boundsLineStart,\n\t    lineEnd: boundsLineEnd,\n\t    polygonStart: function() {\n\t      boundsSink.point = boundsRingPoint;\n\t      boundsSink.lineStart = boundsRingStart;\n\t      boundsSink.lineEnd = boundsRingEnd;\n\t      deltaSum.reset();\n\t      areaSink.polygonStart();\n\t    },\n\t    polygonEnd: function() {\n\t      areaSink.polygonEnd();\n\t      boundsSink.point = boundsPoint;\n\t      boundsSink.lineStart = boundsLineStart;\n\t      boundsSink.lineEnd = boundsLineEnd;\n\t      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n\t      else if (deltaSum > epsilon$4) phi1 = 90;\n\t      else if (deltaSum < -epsilon$4) phi0 = -90;\n\t      range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t    }\n\t  };\n\t\n\t  function boundsPoint(lambda, phi) {\n\t    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n\t    if (phi < phi0) phi0 = phi;\n\t    if (phi > phi1) phi1 = phi;\n\t  }\n\t\n\t  function linePoint(lambda, phi) {\n\t    var p = cartesian([lambda * radians, phi * radians]);\n\t    if (p0) {\n\t      var normal = cartesianCross(p0, p),\n\t          equatorial = [normal[1], -normal[0], 0],\n\t          inflection = cartesianCross(equatorial, normal);\n\t      cartesianNormalizeInPlace(inflection);\n\t      inflection = spherical(inflection);\n\t      var delta = lambda - lambda2,\n\t          sign = delta > 0 ? 1 : -1,\n\t          lambdai = inflection[0] * degrees$1 * sign,\n\t          phii,\n\t          antimeridian = abs(delta) > 180;\n\t      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n\t        phii = inflection[1] * degrees$1;\n\t        if (phii > phi1) phi1 = phii;\n\t      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n\t        phii = -inflection[1] * degrees$1;\n\t        if (phii < phi0) phi0 = phii;\n\t      } else {\n\t        if (phi < phi0) phi0 = phi;\n\t        if (phi > phi1) phi1 = phi;\n\t      }\n\t      if (antimeridian) {\n\t        if (lambda < lambda2) {\n\t          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n\t        } else {\n\t          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n\t        }\n\t      } else {\n\t        if (lambda1 >= lambda0$1) {\n\t          if (lambda < lambda0$1) lambda0$1 = lambda;\n\t          if (lambda > lambda1) lambda1 = lambda;\n\t        } else {\n\t          if (lambda > lambda2) {\n\t            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n\t          } else {\n\t            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n\t          }\n\t        }\n\t      }\n\t    } else {\n\t      boundsPoint(lambda, phi);\n\t    }\n\t    p0 = p, lambda2 = lambda;\n\t  }\n\t\n\t  function boundsLineStart() {\n\t    boundsSink.point = linePoint;\n\t  }\n\t\n\t  function boundsLineEnd() {\n\t    range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t    boundsSink.point = boundsPoint;\n\t    p0 = null;\n\t  }\n\t\n\t  function boundsRingPoint(lambda, phi) {\n\t    if (p0) {\n\t      var delta = lambda - lambda2;\n\t      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n\t    } else {\n\t      lambda00$1 = lambda, phi00$1 = phi;\n\t    }\n\t    areaSink.point(lambda, phi);\n\t    linePoint(lambda, phi);\n\t  }\n\t\n\t  function boundsRingStart() {\n\t    areaSink.lineStart();\n\t  }\n\t\n\t  function boundsRingEnd() {\n\t    boundsRingPoint(lambda00$1, phi00$1);\n\t    areaSink.lineEnd();\n\t    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);\n\t    range$1[0] = lambda0$1, range$1[1] = lambda1;\n\t    p0 = null;\n\t  }\n\t\n\t  // Finds the left-right distance between two longitudes.\n\t  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n\t  // the distance between ±180° to be 360°.\n\t  function angle(lambda0, lambda1) {\n\t    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n\t  }\n\t\n\t  function rangeCompare(a, b) {\n\t    return a[0] - b[0];\n\t  }\n\t\n\t  function rangeContains(range, x) {\n\t    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n\t  }\n\t\n\t  function bounds(feature) {\n\t    var i, n, a, b, merged, deltaMax, delta;\n\t\n\t    if (deltaSum) deltaSum.reset();\n\t    else deltaSum = adder();\n\t    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n\t    ranges = [];\n\t    stream(feature, boundsSink);\n\t\n\t    // First, sort ranges by their minimum longitudes.\n\t    if (n = ranges.length) {\n\t      ranges.sort(rangeCompare);\n\t\n\t      // Then, merge any ranges that overlap.\n\t      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n\t        b = ranges[i];\n\t        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n\t          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n\t          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n\t        } else {\n\t          merged.push(a = b);\n\t        }\n\t      }\n\t\n\t      // Finally, find the largest gap between the merged ranges.\n\t      // The final bounding box will be the inverse of this gap.\n\t      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n\t        b = merged[i];\n\t        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n\t      }\n\t    }\n\t\n\t    ranges = range$1 = null;\n\t\n\t    return lambda0$1 === Infinity || phi0 === Infinity\n\t        ? [[NaN, NaN], [NaN, NaN]]\n\t        : [[lambda0$1, phi0], [lambda1, phi1]];\n\t  }\n\t\n\t  var W0;\n\t  var W1;\n\t  var X0;\n\t  var Y0;\n\t  var Z0;\n\t  var X1;\n\t  var Y1;\n\t  var Z1;\n\t  var X2;\n\t  var Y2;\n\t  var Z2;\n\tvar   lambda00$2;\n\tvar   phi00$2;\n\t  var x0;\n\t  var y0;\n\t  var z0;\n\t  // previous point\n\t\n\t  var centroidSink = {\n\t    sphere: noop$2,\n\t    point: centroidPoint,\n\t    lineStart: centroidLineStart,\n\t    lineEnd: centroidLineEnd,\n\t    polygonStart: function() {\n\t      centroidSink.lineStart = centroidRingStart;\n\t      centroidSink.lineEnd = centroidRingEnd;\n\t    },\n\t    polygonEnd: function() {\n\t      centroidSink.lineStart = centroidLineStart;\n\t      centroidSink.lineEnd = centroidLineEnd;\n\t    }\n\t  };\n\t\n\t  // Arithmetic mean of Cartesian vectors.\n\t  function centroidPoint(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    var cosPhi = cos(phi);\n\t    centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n\t  }\n\t\n\t  function centroidPointCartesian(x, y, z) {\n\t    ++W0;\n\t    X0 += (x - X0) / W0;\n\t    Y0 += (y - Y0) / W0;\n\t    Z0 += (z - Z0) / W0;\n\t  }\n\t\n\t  function centroidLineStart() {\n\t    centroidSink.point = centroidLinePointFirst;\n\t  }\n\t\n\t  function centroidLinePointFirst(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    var cosPhi = cos(phi);\n\t    x0 = cosPhi * cos(lambda);\n\t    y0 = cosPhi * sin(lambda);\n\t    z0 = sin(phi);\n\t    centroidSink.point = centroidLinePoint;\n\t    centroidPointCartesian(x0, y0, z0);\n\t  }\n\t\n\t  function centroidLinePoint(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    var cosPhi = cos(phi),\n\t        x = cosPhi * cos(lambda),\n\t        y = cosPhi * sin(lambda),\n\t        z = sin(phi),\n\t        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n\t    W1 += w;\n\t    X1 += w * (x0 + (x0 = x));\n\t    Y1 += w * (y0 + (y0 = y));\n\t    Z1 += w * (z0 + (z0 = z));\n\t    centroidPointCartesian(x0, y0, z0);\n\t  }\n\t\n\t  function centroidLineEnd() {\n\t    centroidSink.point = centroidPoint;\n\t  }\n\t\n\t  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n\t  // J. Applied Mechanics 42, 239 (1975).\n\t  function centroidRingStart() {\n\t    centroidSink.point = centroidRingPointFirst;\n\t  }\n\t\n\t  function centroidRingEnd() {\n\t    centroidRingPoint(lambda00$2, phi00$2);\n\t    centroidSink.point = centroidPoint;\n\t  }\n\t\n\t  function centroidRingPointFirst(lambda, phi) {\n\t    lambda00$2 = lambda, phi00$2 = phi;\n\t    lambda *= radians, phi *= radians;\n\t    centroidSink.point = centroidRingPoint;\n\t    var cosPhi = cos(phi);\n\t    x0 = cosPhi * cos(lambda);\n\t    y0 = cosPhi * sin(lambda);\n\t    z0 = sin(phi);\n\t    centroidPointCartesian(x0, y0, z0);\n\t  }\n\t\n\t  function centroidRingPoint(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    var cosPhi = cos(phi),\n\t        x = cosPhi * cos(lambda),\n\t        y = cosPhi * sin(lambda),\n\t        z = sin(phi),\n\t        cx = y0 * z - z0 * y,\n\t        cy = z0 * x - x0 * z,\n\t        cz = x0 * y - y0 * x,\n\t        m = sqrt$1(cx * cx + cy * cy + cz * cz),\n\t        u = x0 * x + y0 * y + z0 * z,\n\t        v = m && -acos(u) / m, // area weight\n\t        w = atan2(m, u); // line weight\n\t    X2 += v * cx;\n\t    Y2 += v * cy;\n\t    Z2 += v * cz;\n\t    W1 += w;\n\t    X1 += w * (x0 + (x0 = x));\n\t    Y1 += w * (y0 + (y0 = y));\n\t    Z1 += w * (z0 + (z0 = z));\n\t    centroidPointCartesian(x0, y0, z0);\n\t  }\n\t\n\t  function centroid$1(object) {\n\t    W0 = W1 =\n\t    X0 = Y0 = Z0 =\n\t    X1 = Y1 = Z1 =\n\t    X2 = Y2 = Z2 = 0;\n\t    stream(object, centroidSink);\n\t\n\t    var x = X2,\n\t        y = Y2,\n\t        z = Z2,\n\t        m = x * x + y * y + z * z;\n\t\n\t    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\t    if (m < epsilon2$2) {\n\t      x = X1, y = Y1, z = Z1;\n\t      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\t      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;\n\t      m = x * x + y * y + z * z;\n\t      // If the feature still has an undefined ccentroid, then return.\n\t      if (m < epsilon2$2) return [NaN, NaN];\n\t    }\n\t\n\t    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];\n\t  }\n\t\n\t  function constant$11(x) {\n\t    return function() {\n\t      return x;\n\t    };\n\t  }\n\t\n\t  function compose(a, b) {\n\t\n\t    function compose(x, y) {\n\t      return x = a(x, y), b(x[0], x[1]);\n\t    }\n\t\n\t    if (a.invert && b.invert) compose.invert = function(x, y) {\n\t      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n\t    };\n\t\n\t    return compose;\n\t  }\n\t\n\t  function rotationIdentity(lambda, phi) {\n\t    return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\n\t  }\n\t\n\t  rotationIdentity.invert = rotationIdentity;\n\t\n\t  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n\t    return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n\t      : rotationLambda(deltaLambda))\n\t      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n\t      : rotationIdentity);\n\t  }\n\t\n\t  function forwardRotationLambda(deltaLambda) {\n\t    return function(lambda, phi) {\n\t      return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\n\t    };\n\t  }\n\t\n\t  function rotationLambda(deltaLambda) {\n\t    var rotation = forwardRotationLambda(deltaLambda);\n\t    rotation.invert = forwardRotationLambda(-deltaLambda);\n\t    return rotation;\n\t  }\n\t\n\t  function rotationPhiGamma(deltaPhi, deltaGamma) {\n\t    var cosDeltaPhi = cos(deltaPhi),\n\t        sinDeltaPhi = sin(deltaPhi),\n\t        cosDeltaGamma = cos(deltaGamma),\n\t        sinDeltaGamma = sin(deltaGamma);\n\t\n\t    function rotation(lambda, phi) {\n\t      var cosPhi = cos(phi),\n\t          x = cos(lambda) * cosPhi,\n\t          y = sin(lambda) * cosPhi,\n\t          z = sin(phi),\n\t          k = z * cosDeltaPhi + x * sinDeltaPhi;\n\t      return [\n\t        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n\t        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n\t      ];\n\t    }\n\t\n\t    rotation.invert = function(lambda, phi) {\n\t      var cosPhi = cos(phi),\n\t          x = cos(lambda) * cosPhi,\n\t          y = sin(lambda) * cosPhi,\n\t          z = sin(phi),\n\t          k = z * cosDeltaGamma - y * sinDeltaGamma;\n\t      return [\n\t        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n\t        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n\t      ];\n\t    };\n\t\n\t    return rotation;\n\t  }\n\t\n\t  function rotation(rotate) {\n\t    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\t\n\t    function forward(coordinates) {\n\t      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n\t      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n\t    }\n\t\n\t    forward.invert = function(coordinates) {\n\t      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n\t      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n\t    };\n\t\n\t    return forward;\n\t  }\n\t\n\t  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n\t  function circleStream(sink, radius, delta, direction, t0, t1) {\n\t    if (!delta) return;\n\t    var cosRadius = cos(radius),\n\t        sinRadius = sin(radius),\n\t        step = direction * delta;\n\t    if (t0 == null) {\n\t      t0 = radius + direction * tau$3;\n\t      t1 = radius - step / 2;\n\t    } else {\n\t      t0 = circleRadius(cosRadius, t0);\n\t      t1 = circleRadius(cosRadius, t1);\n\t      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;\n\t    }\n\t    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n\t      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n\t      sink.point(point[0], point[1]);\n\t    }\n\t  }\n\t\n\t  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\t  function circleRadius(cosRadius, point) {\n\t    point = cartesian(point), point[0] -= cosRadius;\n\t    cartesianNormalizeInPlace(point);\n\t    var radius = acos(-point[1]);\n\t    return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$4) % tau$3;\n\t  }\n\t\n\t  function circle$1() {\n\t    var center = constant$11([0, 0]),\n\t        radius = constant$11(90),\n\t        precision = constant$11(6),\n\t        ring,\n\t        rotate,\n\t        sink = {point: point};\n\t\n\t    function point(x, y) {\n\t      ring.push(x = rotate(x, y));\n\t      x[0] *= degrees$1, x[1] *= degrees$1;\n\t    }\n\t\n\t    function circle() {\n\t      var c = center.apply(this, arguments),\n\t          r = radius.apply(this, arguments) * radians,\n\t          p = precision.apply(this, arguments) * radians;\n\t      ring = [];\n\t      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n\t      circleStream(sink, r, p, 1);\n\t      c = {type: \"Polygon\", coordinates: [ring]};\n\t      ring = rotate = null;\n\t      return c;\n\t    }\n\t\n\t    circle.center = function(_) {\n\t      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$11([+_[0], +_[1]]), circle) : center;\n\t    };\n\t\n\t    circle.radius = function(_) {\n\t      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$11(+_), circle) : radius;\n\t    };\n\t\n\t    circle.precision = function(_) {\n\t      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$11(+_), circle) : precision;\n\t    };\n\t\n\t    return circle;\n\t  }\n\t\n\t  function clipBuffer() {\n\t    var lines = [],\n\t        line;\n\t    return {\n\t      point: function(x, y) {\n\t        line.push([x, y]);\n\t      },\n\t      lineStart: function() {\n\t        lines.push(line = []);\n\t      },\n\t      lineEnd: noop$2,\n\t      rejoin: function() {\n\t        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n\t      },\n\t      result: function() {\n\t        var result = lines;\n\t        lines = [];\n\t        line = null;\n\t        return result;\n\t      }\n\t    };\n\t  }\n\t\n\t  function clipLine(a, b, x0, y0, x1, y1) {\n\t    var ax = a[0],\n\t        ay = a[1],\n\t        bx = b[0],\n\t        by = b[1],\n\t        t0 = 0,\n\t        t1 = 1,\n\t        dx = bx - ax,\n\t        dy = by - ay,\n\t        r;\n\t\n\t    r = x0 - ax;\n\t    if (!dx && r > 0) return;\n\t    r /= dx;\n\t    if (dx < 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    } else if (dx > 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    }\n\t\n\t    r = x1 - ax;\n\t    if (!dx && r < 0) return;\n\t    r /= dx;\n\t    if (dx < 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    } else if (dx > 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    }\n\t\n\t    r = y0 - ay;\n\t    if (!dy && r > 0) return;\n\t    r /= dy;\n\t    if (dy < 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    } else if (dy > 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    }\n\t\n\t    r = y1 - ay;\n\t    if (!dy && r < 0) return;\n\t    r /= dy;\n\t    if (dy < 0) {\n\t      if (r > t1) return;\n\t      if (r > t0) t0 = r;\n\t    } else if (dy > 0) {\n\t      if (r < t0) return;\n\t      if (r < t1) t1 = r;\n\t    }\n\t\n\t    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n\t    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n\t    return true;\n\t  }\n\t\n\t  function pointEqual(a, b) {\n\t    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;\n\t  }\n\t\n\t  function Intersection(point, points, other, entry) {\n\t    this.x = point;\n\t    this.z = points;\n\t    this.o = other; // another intersection\n\t    this.e = entry; // is an entry?\n\t    this.v = false; // visited\n\t    this.n = this.p = null; // next & previous\n\t  }\n\t\n\t  // A generalized polygon clipping algorithm: given a polygon that has been cut\n\t  // into its visible line segments, and rejoins the segments by interpolating\n\t  // along the clip edge.\n\t  function clipPolygon(segments, compareIntersection, startInside, interpolate, sink) {\n\t    var subject = [],\n\t        clip = [],\n\t        i,\n\t        n;\n\t\n\t    segments.forEach(function(segment) {\n\t      if ((n = segment.length - 1) <= 0) return;\n\t      var n, p0 = segment[0], p1 = segment[n], x;\n\t\n\t      // If the first and last points of a segment are coincident, then treat as a\n\t      // closed ring. TODO if all rings are closed, then the winding order of the\n\t      // exterior ring should be checked.\n\t      if (pointEqual(p0, p1)) {\n\t        sink.lineStart();\n\t        for (i = 0; i < n; ++i) sink.point((p0 = segment[i])[0], p0[1]);\n\t        sink.lineEnd();\n\t        return;\n\t      }\n\t\n\t      subject.push(x = new Intersection(p0, segment, null, true));\n\t      clip.push(x.o = new Intersection(p0, null, x, false));\n\t      subject.push(x = new Intersection(p1, segment, null, false));\n\t      clip.push(x.o = new Intersection(p1, null, x, true));\n\t    });\n\t\n\t    if (!subject.length) return;\n\t\n\t    clip.sort(compareIntersection);\n\t    link$1(subject);\n\t    link$1(clip);\n\t\n\t    for (i = 0, n = clip.length; i < n; ++i) {\n\t      clip[i].e = startInside = !startInside;\n\t    }\n\t\n\t    var start = subject[0],\n\t        points,\n\t        point;\n\t\n\t    while (1) {\n\t      // Find first unvisited intersection.\n\t      var current = start,\n\t          isSubject = true;\n\t      while (current.v) if ((current = current.n) === start) return;\n\t      points = current.z;\n\t      sink.lineStart();\n\t      do {\n\t        current.v = current.o.v = true;\n\t        if (current.e) {\n\t          if (isSubject) {\n\t            for (i = 0, n = points.length; i < n; ++i) sink.point((point = points[i])[0], point[1]);\n\t          } else {\n\t            interpolate(current.x, current.n.x, 1, sink);\n\t          }\n\t          current = current.n;\n\t        } else {\n\t          if (isSubject) {\n\t            points = current.p.z;\n\t            for (i = points.length - 1; i >= 0; --i) sink.point((point = points[i])[0], point[1]);\n\t          } else {\n\t            interpolate(current.x, current.p.x, -1, sink);\n\t          }\n\t          current = current.p;\n\t        }\n\t        current = current.o;\n\t        points = current.z;\n\t        isSubject = !isSubject;\n\t      } while (!current.v);\n\t      sink.lineEnd();\n\t    }\n\t  }\n\t\n\t  function link$1(array) {\n\t    if (!(n = array.length)) return;\n\t    var n,\n\t        i = 0,\n\t        a = array[0],\n\t        b;\n\t    while (++i < n) {\n\t      a.n = b = array[i];\n\t      b.p = a;\n\t      a = b;\n\t    }\n\t    a.n = b = array[0];\n\t    b.p = a;\n\t  }\n\t\n\t  var clipMax = 1e9;\n\t  var clipMin = -clipMax;\n\t  // TODO Use d3-polygon’s polygonContains here for the ring check?\n\t  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\t\n\t  function clipExtent(x0, y0, x1, y1) {\n\t\n\t    function visible(x, y) {\n\t      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n\t    }\n\t\n\t    function interpolate(from, to, direction, sink) {\n\t      var a = 0, a1 = 0;\n\t      if (from == null\n\t          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n\t          || comparePoint(from, to) < 0 ^ direction > 0) {\n\t        do sink.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n\t        while ((a = (a + direction + 4) % 4) !== a1);\n\t      } else {\n\t        sink.point(to[0], to[1]);\n\t      }\n\t    }\n\t\n\t    function corner(p, direction) {\n\t      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3\n\t          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1\n\t          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0\n\t          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n\t    }\n\t\n\t    function compareIntersection(a, b) {\n\t      return comparePoint(a.x, b.x);\n\t    }\n\t\n\t    function comparePoint(a, b) {\n\t      var ca = corner(a, 1),\n\t          cb = corner(b, 1);\n\t      return ca !== cb ? ca - cb\n\t          : ca === 0 ? b[1] - a[1]\n\t          : ca === 1 ? a[0] - b[0]\n\t          : ca === 2 ? a[1] - b[1]\n\t          : b[0] - a[0];\n\t    }\n\t\n\t    return function(sink) {\n\t      var activeSink = sink,\n\t          bufferSink = clipBuffer(),\n\t          segments,\n\t          polygon,\n\t          ring,\n\t          x__, y__, v__, // first point\n\t          x_, y_, v_, // previous point\n\t          first,\n\t          clean;\n\t\n\t      var clipSink = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: polygonStart,\n\t        polygonEnd: polygonEnd\n\t      };\n\t\n\t      function point(x, y) {\n\t        if (visible(x, y)) activeSink.point(x, y);\n\t      }\n\t\n\t      function polygonInside() {\n\t        var winding = 0;\n\t\n\t        for (var i = 0, n = polygon.length; i < n; ++i) {\n\t          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n\t            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\t            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n\t            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n\t          }\n\t        }\n\t\n\t        return winding;\n\t      }\n\t\n\t      // Buffer geometry within a polygon and then clip it en masse.\n\t      function polygonStart() {\n\t        activeSink = bufferSink, segments = [], polygon = [], clean = true;\n\t      }\n\t\n\t      function polygonEnd() {\n\t        var startInside = polygonInside(),\n\t            cleanInside = clean && startInside,\n\t            visible = (segments = merge(segments)).length;\n\t        if (cleanInside || visible) {\n\t          sink.polygonStart();\n\t          if (cleanInside) {\n\t            sink.lineStart();\n\t            interpolate(null, null, 1, sink);\n\t            sink.lineEnd();\n\t          }\n\t          if (visible) {\n\t            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n\t          }\n\t          sink.polygonEnd();\n\t        }\n\t        activeSink = sink, segments = polygon = ring = null;\n\t      }\n\t\n\t      function lineStart() {\n\t        clipSink.point = linePoint;\n\t        if (polygon) polygon.push(ring = []);\n\t        first = true;\n\t        v_ = false;\n\t        x_ = y_ = NaN;\n\t      }\n\t\n\t      // TODO rather than special-case polygons, simply handle them separately.\n\t      // Ideally, coincident intersection points should be jittered to avoid\n\t      // clipping issues.\n\t      function lineEnd() {\n\t        if (segments) {\n\t          linePoint(x__, y__);\n\t          if (v__ && v_) bufferSink.rejoin();\n\t          segments.push(bufferSink.result());\n\t        }\n\t        clipSink.point = point;\n\t        if (v_) activeSink.lineEnd();\n\t      }\n\t\n\t      function linePoint(x, y) {\n\t        var v = visible(x, y);\n\t        if (polygon) ring.push([x, y]);\n\t        if (first) {\n\t          x__ = x, y__ = y, v__ = v;\n\t          first = false;\n\t          if (v) {\n\t            activeSink.lineStart();\n\t            activeSink.point(x, y);\n\t          }\n\t        } else {\n\t          if (v && v_) activeSink.point(x, y);\n\t          else {\n\t            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n\t                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\t            if (clipLine(a, b, x0, y0, x1, y1)) {\n\t              if (!v_) {\n\t                activeSink.lineStart();\n\t                activeSink.point(a[0], a[1]);\n\t              }\n\t              activeSink.point(b[0], b[1]);\n\t              if (!v) activeSink.lineEnd();\n\t              clean = false;\n\t            } else if (v) {\n\t              activeSink.lineStart();\n\t              activeSink.point(x, y);\n\t              clean = false;\n\t            }\n\t          }\n\t        }\n\t        x_ = x, y_ = y, v_ = v;\n\t      }\n\t\n\t      return clipSink;\n\t    };\n\t  }\n\t\n\t  function extent$1() {\n\t    var x0 = 0,\n\t        y0 = 0,\n\t        x1 = 960,\n\t        y1 = 500,\n\t        stream,\n\t        streamSink,\n\t        clip;\n\t\n\t    return clip = {\n\t      stream: function(sink) {\n\t        return stream && streamSink === sink ? stream : stream = clipExtent(x0, y0, x1, y1)(streamSink = sink);\n\t      },\n\t      extent: function(_) {\n\t        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], stream = streamSink = null, clip) : [[x0, y0], [x1, y1]];\n\t      }\n\t    };\n\t  }\n\t\n\t  var lengthSum;\n\tvar   lambda0$2;\n\tvar   sinPhi0$1;\n\tvar   cosPhi0$1;\n\t  var lengthSink = {\n\t    sphere: noop$2,\n\t    point: noop$2,\n\t    lineStart: lengthLineStart,\n\t    lineEnd: noop$2,\n\t    polygonStart: noop$2,\n\t    polygonEnd: noop$2\n\t  };\n\t\n\t  function lengthLineStart() {\n\t    lengthSink.point = lengthPointFirst;\n\t    lengthSink.lineEnd = lengthLineEnd;\n\t  }\n\t\n\t  function lengthLineEnd() {\n\t    lengthSink.point = lengthSink.lineEnd = noop$2;\n\t  }\n\t\n\t  function lengthPointFirst(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n\t    lengthSink.point = lengthPoint;\n\t  }\n\t\n\t  function lengthPoint(lambda, phi) {\n\t    lambda *= radians, phi *= radians;\n\t    var sinPhi = sin(phi),\n\t        cosPhi = cos(phi),\n\t        delta = abs(lambda - lambda0$2),\n\t        cosDelta = cos(delta),\n\t        sinDelta = sin(delta),\n\t        x = cosPhi * sinDelta,\n\t        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n\t        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n\t    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));\n\t    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n\t  }\n\t\n\t  function length$2(object) {\n\t    if (lengthSum) lengthSum.reset();\n\t    else lengthSum = adder();\n\t    stream(object, lengthSink);\n\t    return +lengthSum;\n\t  }\n\t\n\t  var coordinates = [null, null];\n\tvar   object$1 = {type: \"LineString\", coordinates: coordinates};\n\t  function distance(a, b) {\n\t    coordinates[0] = a;\n\t    coordinates[1] = b;\n\t    return length$2(object$1);\n\t  }\n\t\n\t  function graticuleX(y0, y1, dy) {\n\t    var y = range(y0, y1 - epsilon$4, dy).concat(y1);\n\t    return function(x) { return y.map(function(y) { return [x, y]; }); };\n\t  }\n\t\n\t  function graticuleY(x0, x1, dx) {\n\t    var x = range(x0, x1 - epsilon$4, dx).concat(x1);\n\t    return function(y) { return x.map(function(x) { return [x, y]; }); };\n\t  }\n\t\n\t  function graticule() {\n\t    var x1, x0, X1, X0,\n\t        y1, y0, Y1, Y0,\n\t        dx = 10, dy = dx, DX = 90, DY = 360,\n\t        x, y, X, Y,\n\t        precision = 2.5;\n\t\n\t    function graticule() {\n\t      return {type: \"MultiLineString\", coordinates: lines()};\n\t    }\n\t\n\t    function lines() {\n\t      return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n\t          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n\t          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))\n\t          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));\n\t    }\n\t\n\t    graticule.lines = function() {\n\t      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n\t    };\n\t\n\t    graticule.outline = function() {\n\t      return {\n\t        type: \"Polygon\",\n\t        coordinates: [\n\t          X(X0).concat(\n\t          Y(Y1).slice(1),\n\t          X(X1).reverse().slice(1),\n\t          Y(Y0).reverse().slice(1))\n\t        ]\n\t      };\n\t    };\n\t\n\t    graticule.extent = function(_) {\n\t      if (!arguments.length) return graticule.extentMinor();\n\t      return graticule.extentMajor(_).extentMinor(_);\n\t    };\n\t\n\t    graticule.extentMajor = function(_) {\n\t      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n\t      X0 = +_[0][0], X1 = +_[1][0];\n\t      Y0 = +_[0][1], Y1 = +_[1][1];\n\t      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n\t      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n\t      return graticule.precision(precision);\n\t    };\n\t\n\t    graticule.extentMinor = function(_) {\n\t      if (!arguments.length) return [[x0, y0], [x1, y1]];\n\t      x0 = +_[0][0], x1 = +_[1][0];\n\t      y0 = +_[0][1], y1 = +_[1][1];\n\t      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n\t      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n\t      return graticule.precision(precision);\n\t    };\n\t\n\t    graticule.step = function(_) {\n\t      if (!arguments.length) return graticule.stepMinor();\n\t      return graticule.stepMajor(_).stepMinor(_);\n\t    };\n\t\n\t    graticule.stepMajor = function(_) {\n\t      if (!arguments.length) return [DX, DY];\n\t      DX = +_[0], DY = +_[1];\n\t      return graticule;\n\t    };\n\t\n\t    graticule.stepMinor = function(_) {\n\t      if (!arguments.length) return [dx, dy];\n\t      dx = +_[0], dy = +_[1];\n\t      return graticule;\n\t    };\n\t\n\t    graticule.precision = function(_) {\n\t      if (!arguments.length) return precision;\n\t      precision = +_;\n\t      x = graticuleX(y0, y1, 90);\n\t      y = graticuleY(x0, x1, precision);\n\t      X = graticuleX(Y0, Y1, 90);\n\t      Y = graticuleY(X0, X1, precision);\n\t      return graticule;\n\t    };\n\t\n\t    return graticule\n\t        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])\n\t        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);\n\t  }\n\t\n\t  function interpolate$2(a, b) {\n\t    var x0 = a[0] * radians,\n\t        y0 = a[1] * radians,\n\t        x1 = b[0] * radians,\n\t        y1 = b[1] * radians,\n\t        cy0 = cos(y0),\n\t        sy0 = sin(y0),\n\t        cy1 = cos(y1),\n\t        sy1 = sin(y1),\n\t        kx0 = cy0 * cos(x0),\n\t        ky0 = cy0 * sin(x0),\n\t        kx1 = cy1 * cos(x1),\n\t        ky1 = cy1 * sin(x1),\n\t        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n\t        k = sin(d);\n\t\n\t    var interpolate = d ? function(t) {\n\t      var B = sin(t *= d) / k,\n\t          A = sin(d - t) / k,\n\t          x = A * kx0 + B * kx1,\n\t          y = A * ky0 + B * ky1,\n\t          z = A * sy0 + B * sy1;\n\t      return [\n\t        atan2(y, x) * degrees$1,\n\t        atan2(z, sqrt$1(x * x + y * y)) * degrees$1\n\t      ];\n\t    } : function() {\n\t      return [x0 * degrees$1, y0 * degrees$1];\n\t    };\n\t\n\t    interpolate.distance = d;\n\t\n\t    return interpolate;\n\t  }\n\t\n\t  function identity$7(x) {\n\t    return x;\n\t  }\n\t\n\tvar   areaSum$1 = adder();\n\tvar   areaRingSum$1 = adder();\n\t  var x00;\n\t  var y00;\n\tvar   x0$1;\n\tvar   y0$1;\n\t  var areaSink$1 = {\n\t    point: noop$2,\n\t    lineStart: noop$2,\n\t    lineEnd: noop$2,\n\t    polygonStart: function() {\n\t      areaSink$1.lineStart = areaRingStart$1;\n\t      areaSink$1.lineEnd = areaRingEnd$1;\n\t    },\n\t    polygonEnd: function() {\n\t      areaSink$1.lineStart = areaSink$1.lineEnd = areaSink$1.point = noop$2;\n\t      areaSum$1.add(abs(areaRingSum$1));\n\t      areaRingSum$1.reset();\n\t    },\n\t    result: function() {\n\t      var area = areaSum$1 / 2;\n\t      areaSum$1.reset();\n\t      return area;\n\t    }\n\t  };\n\t\n\t  function areaRingStart$1() {\n\t    areaSink$1.point = areaPointFirst$1;\n\t  }\n\t\n\t  function areaPointFirst$1(x, y) {\n\t    areaSink$1.point = areaPoint$1;\n\t    x00 = x0$1 = x, y00 = y0$1 = y;\n\t  }\n\t\n\t  function areaPoint$1(x, y) {\n\t    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n\t    x0$1 = x, y0$1 = y;\n\t  }\n\t\n\t  function areaRingEnd$1() {\n\t    areaPoint$1(x00, y00);\n\t  }\n\t\n\tvar   x0$2 = Infinity;\n\tvar   y0$2 = x0$2;\n\t  var x1 = -x0$2;\n\t  var y1 = x1;\n\t  var boundsSink$1 = {\n\t    point: boundsPoint$1,\n\t    lineStart: noop$2,\n\t    lineEnd: noop$2,\n\t    polygonStart: noop$2,\n\t    polygonEnd: noop$2,\n\t    result: function() {\n\t      var bounds = [[x0$2, y0$2], [x1, y1]];\n\t      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n\t      return bounds;\n\t    }\n\t  };\n\t\n\t  function boundsPoint$1(x, y) {\n\t    if (x < x0$2) x0$2 = x;\n\t    if (x > x1) x1 = x;\n\t    if (y < y0$2) y0$2 = y;\n\t    if (y > y1) y1 = y;\n\t  }\n\t\n\tvar   X0$1 = 0;\n\tvar   Y0$1 = 0;\n\tvar   Z0$1 = 0;\n\tvar   X1$1 = 0;\n\tvar   Y1$1 = 0;\n\tvar   Z1$1 = 0;\n\tvar   X2$1 = 0;\n\tvar   Y2$1 = 0;\n\tvar   Z2$1 = 0;\n\tvar   x00$1;\n\tvar   y00$1;\n\tvar   x0$3;\n\tvar   y0$3;\n\t  var centroidSink$1 = {\n\t    point: centroidPoint$1,\n\t    lineStart: centroidLineStart$1,\n\t    lineEnd: centroidLineEnd$1,\n\t    polygonStart: function() {\n\t      centroidSink$1.lineStart = centroidRingStart$1;\n\t      centroidSink$1.lineEnd = centroidRingEnd$1;\n\t    },\n\t    polygonEnd: function() {\n\t      centroidSink$1.point = centroidPoint$1;\n\t      centroidSink$1.lineStart = centroidLineStart$1;\n\t      centroidSink$1.lineEnd = centroidLineEnd$1;\n\t    },\n\t    result: function() {\n\t      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n\t          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n\t          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n\t          : [NaN, NaN];\n\t      X0$1 = Y0$1 = Z0$1 =\n\t      X1$1 = Y1$1 = Z1$1 =\n\t      X2$1 = Y2$1 = Z2$1 = 0;\n\t      return centroid;\n\t    }\n\t  };\n\t\n\t  function centroidPoint$1(x, y) {\n\t    X0$1 += x;\n\t    Y0$1 += y;\n\t    ++Z0$1;\n\t  }\n\t\n\t  function centroidLineStart$1() {\n\t    centroidSink$1.point = centroidPointFirstLine;\n\t  }\n\t\n\t  function centroidPointFirstLine(x, y) {\n\t    centroidSink$1.point = centroidPointLine;\n\t    centroidPoint$1(x0$3 = x, y0$3 = y);\n\t  }\n\t\n\t  function centroidPointLine(x, y) {\n\t    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);\n\t    X1$1 += z * (x0$3 + x) / 2;\n\t    Y1$1 += z * (y0$3 + y) / 2;\n\t    Z1$1 += z;\n\t    centroidPoint$1(x0$3 = x, y0$3 = y);\n\t  }\n\t\n\t  function centroidLineEnd$1() {\n\t    centroidSink$1.point = centroidPoint$1;\n\t  }\n\t\n\t  function centroidRingStart$1() {\n\t    centroidSink$1.point = centroidPointFirstRing;\n\t  }\n\t\n\t  function centroidRingEnd$1() {\n\t    centroidPointRing(x00$1, y00$1);\n\t  }\n\t\n\t  function centroidPointFirstRing(x, y) {\n\t    centroidSink$1.point = centroidPointRing;\n\t    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n\t  }\n\t\n\t  function centroidPointRing(x, y) {\n\t    var dx = x - x0$3,\n\t        dy = y - y0$3,\n\t        z = sqrt$1(dx * dx + dy * dy);\n\t\n\t    X1$1 += z * (x0$3 + x) / 2;\n\t    Y1$1 += z * (y0$3 + y) / 2;\n\t    Z1$1 += z;\n\t\n\t    z = y0$3 * x - x0$3 * y;\n\t    X2$1 += z * (x0$3 + x);\n\t    Y2$1 += z * (y0$3 + y);\n\t    Z2$1 += z * 3;\n\t    centroidPoint$1(x0$3 = x, y0$3 = y);\n\t  }\n\t\n\t  function PathContext(context) {\n\t    var pointRadius = 4.5;\n\t\n\t    var stream = {\n\t      point: point,\n\t\n\t      // While inside a line, override point to moveTo then lineTo.\n\t      lineStart: function() { stream.point = pointLineStart; },\n\t      lineEnd: lineEnd,\n\t\n\t      // While inside a polygon, override lineEnd to closePath.\n\t      polygonStart: function() { stream.lineEnd = lineEndPolygon; },\n\t      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },\n\t\n\t      pointRadius: function(_) {\n\t        pointRadius = _;\n\t        return stream;\n\t      },\n\t\n\t      result: noop$2\n\t    };\n\t\n\t    function point(x, y) {\n\t      context.moveTo(x + pointRadius, y);\n\t      context.arc(x, y, pointRadius, 0, tau$3);\n\t    }\n\t\n\t    function pointLineStart(x, y) {\n\t      context.moveTo(x, y);\n\t      stream.point = pointLine;\n\t    }\n\t\n\t    function pointLine(x, y) {\n\t      context.lineTo(x, y);\n\t    }\n\t\n\t    function lineEnd() {\n\t      stream.point = point;\n\t    }\n\t\n\t    function lineEndPolygon() {\n\t      context.closePath();\n\t    }\n\t\n\t    return stream;\n\t  }\n\t\n\t  function PathString() {\n\t    var pointCircle = circle$2(4.5),\n\t        string = [];\n\t\n\t    var sink = {\n\t      point: point,\n\t      lineStart: lineStart,\n\t      lineEnd: lineEnd,\n\t      polygonStart: function() {\n\t        sink.lineEnd = lineEndPolygon;\n\t      },\n\t      polygonEnd: function() {\n\t        sink.lineEnd = lineEnd;\n\t        sink.point = point;\n\t      },\n\t      pointRadius: function(_) {\n\t        pointCircle = circle$2(_);\n\t        return sink;\n\t      },\n\t      result: function() {\n\t        if (string.length) {\n\t          var result = string.join(\"\");\n\t          string = [];\n\t          return result;\n\t        }\n\t      }\n\t    };\n\t\n\t    function point(x, y) {\n\t      string.push(\"M\", x, \",\", y, pointCircle);\n\t    }\n\t\n\t    function pointLineStart(x, y) {\n\t      string.push(\"M\", x, \",\", y);\n\t      sink.point = pointLine;\n\t    }\n\t\n\t    function pointLine(x, y) {\n\t      string.push(\"L\", x, \",\", y);\n\t    }\n\t\n\t    function lineStart() {\n\t      sink.point = pointLineStart;\n\t    }\n\t\n\t    function lineEnd() {\n\t      sink.point = point;\n\t    }\n\t\n\t    function lineEndPolygon() {\n\t      string.push(\"Z\");\n\t    }\n\t\n\t    return sink;\n\t  }\n\t\n\t  function circle$2(radius) {\n\t    return \"m0,\" + radius\n\t        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n\t        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n\t        + \"z\";\n\t  }\n\t\n\t  function index$3() {\n\t    var pointRadius = 4.5,\n\t        projection,\n\t        context,\n\t        projectStream,\n\t        contextStream;\n\t\n\t    function path(object) {\n\t      if (object) {\n\t        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n\t        stream(object, projectStream(contextStream));\n\t      }\n\t      return contextStream.result();\n\t    }\n\t\n\t    path.area = function(object) {\n\t      stream(object, projectStream(areaSink$1));\n\t      return areaSink$1.result();\n\t    };\n\t\n\t    path.bounds = function(object) {\n\t      stream(object, projectStream(boundsSink$1));\n\t      return boundsSink$1.result();\n\t    };\n\t\n\t    path.centroid = function(object) {\n\t      stream(object, projectStream(centroidSink$1));\n\t      return centroidSink$1.result();\n\t    };\n\t\n\t    path.projection = function(_) {\n\t      if (!arguments.length) return projection;\n\t      projectStream = (projection = _) ? _.stream : identity$7;\n\t      return path;\n\t    };\n\t\n\t    path.context = function(_) {\n\t      if (!arguments.length) return context;\n\t      contextStream = (context = _) == null ? new PathString : new PathContext(_);\n\t      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n\t      return path;\n\t    };\n\t\n\t    path.pointRadius = function(_) {\n\t      if (!arguments.length) return pointRadius;\n\t      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n\t      return path;\n\t    };\n\t\n\t    return path.projection(null).context(null); // TODO albersUsa\n\t  }\n\t\n\t  var sum$2 = adder();\n\t\n\t  function polygonContains(polygon, point) {\n\t    var lambda = point[0],\n\t        phi = point[1],\n\t        normal = [sin(lambda), -cos(lambda), 0],\n\t        angle = 0,\n\t        winding = 0;\n\t\n\t    for (var i = 0, n = polygon.length; i < n; ++i) {\n\t      if (!(m = (ring = polygon[i]).length)) continue;\n\t      var ring,\n\t          m,\n\t          point0 = ring[m - 1],\n\t          lambda0 = point0[0],\n\t          phi0 = point0[1] / 2 + quarterPi,\n\t          sinPhi0 = sin(phi0),\n\t          cosPhi0 = cos(phi0);\n\t\n\t      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n\t        var point1 = ring[j],\n\t            lambda1 = point1[0],\n\t            phi1 = point1[1] / 2 + quarterPi,\n\t            sinPhi1 = sin(phi1),\n\t            cosPhi1 = cos(phi1),\n\t            delta = lambda1 - lambda0,\n\t            sign = delta >= 0 ? 1 : -1,\n\t            absDelta = sign * delta,\n\t            antimeridian = absDelta > pi$3,\n\t            k = sinPhi0 * sinPhi1;\n\t\n\t        sum$2.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n\t        angle += antimeridian ? delta + sign * tau$3 : delta;\n\t\n\t        // Are the longitudes either side of the point’s meridian (lambda),\n\t        // and are the latitudes smaller than the parallel (phi)?\n\t        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n\t          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n\t          cartesianNormalizeInPlace(arc);\n\t          var intersection = cartesianCross(normal, arc);\n\t          cartesianNormalizeInPlace(intersection);\n\t          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n\t          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n\t            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    // First, determine whether the South pole is inside or outside:\n\t    //\n\t    // It is inside if:\n\t    // * the polygon winds around it in a clockwise direction.\n\t    // * the polygon does not (cumulatively) wind around it, but has a negative\n\t    //   (counter-clockwise) area.\n\t    //\n\t    // Second, count the (signed) number of times a segment crosses a lambda\n\t    // from the point to the South pole.  If it is zero, then the point is the\n\t    // same side as the South pole.\n\t\n\t    var contains = (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);\n\t    sum$2.reset();\n\t    return contains;\n\t  }\n\t\n\t  function clip(pointVisible, clipLine, interpolate, start) {\n\t    return function(rotate, sink) {\n\t      var line = clipLine(sink),\n\t          rotatedStart = rotate.invert(start[0], start[1]),\n\t          ringBuffer = clipBuffer(),\n\t          ringSink = clipLine(ringBuffer),\n\t          polygonStarted = false,\n\t          polygon,\n\t          segments,\n\t          ring;\n\t\n\t      var clip = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: function() {\n\t          clip.point = pointRing;\n\t          clip.lineStart = ringStart;\n\t          clip.lineEnd = ringEnd;\n\t          segments = [];\n\t          polygon = [];\n\t        },\n\t        polygonEnd: function() {\n\t          clip.point = point;\n\t          clip.lineStart = lineStart;\n\t          clip.lineEnd = lineEnd;\n\t          segments = merge(segments);\n\t          var startInside = polygonContains(polygon, rotatedStart);\n\t          if (segments.length) {\n\t            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n\t          } else if (startInside) {\n\t            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t            sink.lineStart();\n\t            interpolate(null, null, 1, sink);\n\t            sink.lineEnd();\n\t          }\n\t          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n\t          segments = polygon = null;\n\t        },\n\t        sphere: function() {\n\t          sink.polygonStart();\n\t          sink.lineStart();\n\t          interpolate(null, null, 1, sink);\n\t          sink.lineEnd();\n\t          sink.polygonEnd();\n\t        }\n\t      };\n\t\n\t      function point(lambda, phi) {\n\t        var point = rotate(lambda, phi);\n\t        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n\t      }\n\t\n\t      function pointLine(lambda, phi) {\n\t        var point = rotate(lambda, phi);\n\t        line.point(point[0], point[1]);\n\t      }\n\t\n\t      function lineStart() {\n\t        clip.point = pointLine;\n\t        line.lineStart();\n\t      }\n\t\n\t      function lineEnd() {\n\t        clip.point = point;\n\t        line.lineEnd();\n\t      }\n\t\n\t      function pointRing(lambda, phi) {\n\t        ring.push([lambda, phi]);\n\t        var point = rotate(lambda, phi);\n\t        ringSink.point(point[0], point[1]);\n\t      }\n\t\n\t      function ringStart() {\n\t        ringSink.lineStart();\n\t        ring = [];\n\t      }\n\t\n\t      function ringEnd() {\n\t        pointRing(ring[0][0], ring[0][1]);\n\t        ringSink.lineEnd();\n\t\n\t        var clean = ringSink.clean(),\n\t            ringSegments = ringBuffer.result(),\n\t            i, n = ringSegments.length, m,\n\t            segment,\n\t            point;\n\t\n\t        ring.pop();\n\t        polygon.push(ring);\n\t        ring = null;\n\t\n\t        if (!n) return;\n\t\n\t        // No intersections.\n\t        if (clean & 1) {\n\t          segment = ringSegments[0];\n\t          if ((m = segment.length - 1) > 0) {\n\t            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n\t            sink.lineStart();\n\t            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n\t            sink.lineEnd();\n\t          }\n\t          return;\n\t        }\n\t\n\t        // Rejoin connected segments.\n\t        // TODO reuse ringBuffer.rejoin()?\n\t        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\t\n\t        segments.push(ringSegments.filter(validSegment));\n\t      }\n\t\n\t      return clip;\n\t    };\n\t  }\n\t\n\t  function validSegment(segment) {\n\t    return segment.length > 1;\n\t  }\n\t\n\t  // Intersections are sorted along the clip edge. For both antimeridian cutting\n\t  // and circle clipping, the same comparison is used.\n\t  function compareIntersection(a, b) {\n\t    return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$4 : halfPi$2 - a[1])\n\t         - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$4 : halfPi$2 - b[1]);\n\t  }\n\t\n\t  var clipAntimeridian = clip(\n\t    function() { return true; },\n\t    clipAntimeridianLine,\n\t    clipAntimeridianInterpolate,\n\t    [-pi$3, -halfPi$2]\n\t  );\n\t\n\t  // Takes a line and cuts into visible segments. Return values: 0 - there were\n\t  // intersections or the line was empty; 1 - no intersections; 2 - there were\n\t  // intersections, and the first and last segments should be rejoined.\n\t  function clipAntimeridianLine(sink) {\n\t    var lambda0 = NaN,\n\t        phi0 = NaN,\n\t        sign0 = NaN,\n\t        clean; // no intersections\n\t\n\t    return {\n\t      lineStart: function() {\n\t        sink.lineStart();\n\t        clean = 1;\n\t      },\n\t      point: function(lambda1, phi1) {\n\t        var sign1 = lambda1 > 0 ? pi$3 : -pi$3,\n\t            delta = abs(lambda1 - lambda0);\n\t        if (abs(delta - pi$3) < epsilon$4) { // line crosses a pole\n\t          sink.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);\n\t          sink.point(sign0, phi0);\n\t          sink.lineEnd();\n\t          sink.lineStart();\n\t          sink.point(sign1, phi0);\n\t          sink.point(lambda1, phi0);\n\t          clean = 0;\n\t        } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian\n\t          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies\n\t          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;\n\t          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n\t          sink.point(sign0, phi0);\n\t          sink.lineEnd();\n\t          sink.lineStart();\n\t          sink.point(sign1, phi0);\n\t          clean = 0;\n\t        }\n\t        sink.point(lambda0 = lambda1, phi0 = phi1);\n\t        sign0 = sign1;\n\t      },\n\t      lineEnd: function() {\n\t        sink.lineEnd();\n\t        lambda0 = phi0 = NaN;\n\t      },\n\t      clean: function() {\n\t        return 2 - clean; // if intersections, rejoin first and last segments\n\t      }\n\t    };\n\t  }\n\t\n\t  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n\t    var cosPhi0,\n\t        cosPhi1,\n\t        sinLambda0Lambda1 = sin(lambda0 - lambda1);\n\t    return abs(sinLambda0Lambda1) > epsilon$4\n\t        ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n\t            - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n\t            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n\t        : (phi0 + phi1) / 2;\n\t  }\n\t\n\t  function clipAntimeridianInterpolate(from, to, direction, sink) {\n\t    var phi;\n\t    if (from == null) {\n\t      phi = direction * halfPi$2;\n\t      sink.point(-pi$3, phi);\n\t      sink.point(0, phi);\n\t      sink.point(pi$3, phi);\n\t      sink.point(pi$3, 0);\n\t      sink.point(pi$3, -phi);\n\t      sink.point(0, -phi);\n\t      sink.point(-pi$3, -phi);\n\t      sink.point(-pi$3, 0);\n\t      sink.point(-pi$3, phi);\n\t    } else if (abs(from[0] - to[0]) > epsilon$4) {\n\t      var lambda = from[0] < to[0] ? pi$3 : -pi$3;\n\t      phi = direction * lambda / 2;\n\t      sink.point(-lambda, phi);\n\t      sink.point(0, phi);\n\t      sink.point(lambda, phi);\n\t    } else {\n\t      sink.point(to[0], to[1]);\n\t    }\n\t  }\n\t\n\t  function clipCircle(radius, delta) {\n\t    var cr = cos(radius),\n\t        smallRadius = cr > 0,\n\t        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case\n\t\n\t    function interpolate(from, to, direction, sink) {\n\t      circleStream(sink, radius, delta, direction, from, to);\n\t    }\n\t\n\t    function visible(lambda, phi) {\n\t      return cos(lambda) * cos(phi) > cr;\n\t    }\n\t\n\t    // Takes a line and cuts into visible segments. Return values used for polygon\n\t    // clipping: 0 - there were intersections or the line was empty; 1 - no\n\t    // intersections 2 - there were intersections, and the first and last segments\n\t    // should be rejoined.\n\t    function clipLine(sink) {\n\t      var point0, // previous point\n\t          c0, // code for previous point\n\t          v0, // visibility of previous point\n\t          v00, // visibility of first point\n\t          clean; // no intersections\n\t      return {\n\t        lineStart: function() {\n\t          v00 = v0 = false;\n\t          clean = 1;\n\t        },\n\t        point: function(lambda, phi) {\n\t          var point1 = [lambda, phi],\n\t              point2,\n\t              v = visible(lambda, phi),\n\t              c = smallRadius\n\t                ? v ? 0 : code(lambda, phi)\n\t                : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;\n\t          if (!point0 && (v00 = v0 = v)) sink.lineStart();\n\t          // Handle degeneracies.\n\t          // TODO ignore if not clipping polygons.\n\t          if (v !== v0) {\n\t            point2 = intersect(point0, point1);\n\t            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n\t              point1[0] += epsilon$4;\n\t              point1[1] += epsilon$4;\n\t              v = visible(point1[0], point1[1]);\n\t            }\n\t          }\n\t          if (v !== v0) {\n\t            clean = 0;\n\t            if (v) {\n\t              // outside going in\n\t              sink.lineStart();\n\t              point2 = intersect(point1, point0);\n\t              sink.point(point2[0], point2[1]);\n\t            } else {\n\t              // inside going out\n\t              point2 = intersect(point0, point1);\n\t              sink.point(point2[0], point2[1]);\n\t              sink.lineEnd();\n\t            }\n\t            point0 = point2;\n\t          } else if (notHemisphere && point0 && smallRadius ^ v) {\n\t            var t;\n\t            // If the codes for two points are different, or are both zero,\n\t            // and there this segment intersects with the small circle.\n\t            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n\t              clean = 0;\n\t              if (smallRadius) {\n\t                sink.lineStart();\n\t                sink.point(t[0][0], t[0][1]);\n\t                sink.point(t[1][0], t[1][1]);\n\t                sink.lineEnd();\n\t              } else {\n\t                sink.point(t[1][0], t[1][1]);\n\t                sink.lineEnd();\n\t                sink.lineStart();\n\t                sink.point(t[0][0], t[0][1]);\n\t              }\n\t            }\n\t          }\n\t          if (v && (!point0 || !pointEqual(point0, point1))) {\n\t            sink.point(point1[0], point1[1]);\n\t          }\n\t          point0 = point1, v0 = v, c0 = c;\n\t        },\n\t        lineEnd: function() {\n\t          if (v0) sink.lineEnd();\n\t          point0 = null;\n\t        },\n\t        // Rejoin first and last segments if there were intersections and the first\n\t        // and last points were visible.\n\t        clean: function() {\n\t          return clean | ((v00 && v0) << 1);\n\t        }\n\t      };\n\t    }\n\t\n\t    // Intersects the great circle between a and b with the clip circle.\n\t    function intersect(a, b, two) {\n\t      var pa = cartesian(a),\n\t          pb = cartesian(b);\n\t\n\t      // We have two planes, n1.p = d1 and n2.p = d2.\n\t      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\t      var n1 = [1, 0, 0], // normal\n\t          n2 = cartesianCross(pa, pb),\n\t          n2n2 = cartesianDot(n2, n2),\n\t          n1n2 = n2[0], // cartesianDot(n1, n2),\n\t          determinant = n2n2 - n1n2 * n1n2;\n\t\n\t      // Two polar points.\n\t      if (!determinant) return !two && a;\n\t\n\t      var c1 =  cr * n2n2 / determinant,\n\t          c2 = -cr * n1n2 / determinant,\n\t          n1xn2 = cartesianCross(n1, n2),\n\t          A = cartesianScale(n1, c1),\n\t          B = cartesianScale(n2, c2);\n\t      cartesianAddInPlace(A, B);\n\t\n\t      // Solve |p(t)|^2 = 1.\n\t      var u = n1xn2,\n\t          w = cartesianDot(A, u),\n\t          uu = cartesianDot(u, u),\n\t          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\t\n\t      if (t2 < 0) return;\n\t\n\t      var t = sqrt$1(t2),\n\t          q = cartesianScale(u, (-w - t) / uu);\n\t      cartesianAddInPlace(q, A);\n\t      q = spherical(q);\n\t\n\t      if (!two) return q;\n\t\n\t      // Two intersection points.\n\t      var lambda0 = a[0],\n\t          lambda1 = b[0],\n\t          phi0 = a[1],\n\t          phi1 = b[1],\n\t          z;\n\t\n\t      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\t\n\t      var delta = lambda1 - lambda0,\n\t          polar = abs(delta - pi$3) < epsilon$4,\n\t          meridian = polar || delta < epsilon$4;\n\t\n\t      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\t\n\t      // Check that the first point is between a and b.\n\t      if (meridian\n\t          ? polar\n\t            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)\n\t            : phi0 <= q[1] && q[1] <= phi1\n\t          : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n\t        var q1 = cartesianScale(u, (-w + t) / uu);\n\t        cartesianAddInPlace(q1, A);\n\t        return [q, spherical(q1)];\n\t      }\n\t    }\n\t\n\t    // Generates a 4-bit vector representing the location of a point relative to\n\t    // the small circle's bounding box.\n\t    function code(lambda, phi) {\n\t      var r = smallRadius ? radius : pi$3 - radius,\n\t          code = 0;\n\t      if (lambda < -r) code |= 1; // left\n\t      else if (lambda > r) code |= 2; // right\n\t      if (phi < -r) code |= 4; // below\n\t      else if (phi > r) code |= 8; // above\n\t      return code;\n\t    }\n\t\n\t    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);\n\t  }\n\t\n\t  function transform$1(prototype) {\n\t    function T() {}\n\t    var p = T.prototype = Object.create(Transform$1.prototype);\n\t    for (var k in prototype) p[k] = prototype[k];\n\t    return function(stream) {\n\t      var t = new T;\n\t      t.stream = stream;\n\t      return t;\n\t    };\n\t  }\n\t\n\t  function Transform$1() {}\n\t\n\t  Transform$1.prototype = {\n\t    point: function(x, y) { this.stream.point(x, y); },\n\t    sphere: function() { this.stream.sphere(); },\n\t    lineStart: function() { this.stream.lineStart(); },\n\t    lineEnd: function() { this.stream.lineEnd(); },\n\t    polygonStart: function() { this.stream.polygonStart(); },\n\t    polygonEnd: function() { this.stream.polygonEnd(); }\n\t  };\n\t\n\t  var maxDepth = 16;\n\t  var cosMinDistance = cos(30 * radians);\n\t  // cos(minimum angular distance)\n\t\n\t  function resample(project, delta2) {\n\t    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n\t  }\n\t\n\t  function resampleNone(project) {\n\t    return transform$1({\n\t      point: function(x, y) {\n\t        x = project(x, y);\n\t        this.stream.point(x[0], x[1]);\n\t      }\n\t    });\n\t  }\n\t\n\t  function resample$1(project, delta2) {\n\t\n\t    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n\t      var dx = x1 - x0,\n\t          dy = y1 - y0,\n\t          d2 = dx * dx + dy * dy;\n\t      if (d2 > 4 * delta2 && depth--) {\n\t        var a = a0 + a1,\n\t            b = b0 + b1,\n\t            c = c0 + c1,\n\t            m = sqrt$1(a * a + b * b + c * c),\n\t            phi2 = asin$1(c /= m),\n\t            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n\t            p = project(lambda2, phi2),\n\t            x2 = p[0],\n\t            y2 = p[1],\n\t            dx2 = x2 - x0,\n\t            dy2 = y2 - y0,\n\t            dz = dy * dx2 - dx * dy2;\n\t        if (dz * dz / d2 > delta2 // perpendicular projected distance\n\t            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n\t            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n\t          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n\t          stream.point(x2, y2);\n\t          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n\t        }\n\t      }\n\t    }\n\t\n\t    return function(stream) {\n\t      var lambda00, x00, y00, a00, b00, c00, // first point\n\t          lambda0, x0, y0, a0, b0, c0; // previous point\n\t\n\t      var resampleSink = {\n\t        point: point,\n\t        lineStart: lineStart,\n\t        lineEnd: lineEnd,\n\t        polygonStart: function() { stream.polygonStart(); resampleSink.lineStart = ringStart; },\n\t        polygonEnd: function() { stream.polygonEnd(); resampleSink.lineStart = lineStart; }\n\t      };\n\t\n\t      function point(x, y) {\n\t        x = project(x, y);\n\t        stream.point(x[0], x[1]);\n\t      }\n\t\n\t      function lineStart() {\n\t        x0 = NaN;\n\t        resampleSink.point = linePoint;\n\t        stream.lineStart();\n\t      }\n\t\n\t      function linePoint(lambda, phi) {\n\t        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n\t        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n\t        stream.point(x0, y0);\n\t      }\n\t\n\t      function lineEnd() {\n\t        resampleSink.point = point;\n\t        stream.lineEnd();\n\t      }\n\t\n\t      function ringStart() {\n\t        lineStart();\n\t        resampleSink.point = ringPoint;\n\t        resampleSink.lineEnd = ringEnd;\n\t      }\n\t\n\t      function ringPoint(lambda, phi) {\n\t        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n\t        resampleSink.point = linePoint;\n\t      }\n\t\n\t      function ringEnd() {\n\t        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n\t        resampleSink.lineEnd = lineEnd;\n\t        lineEnd();\n\t      }\n\t\n\t      return resampleSink;\n\t    };\n\t  }\n\t\n\t  var transformRadians = transform$1({\n\t    point: function(x, y) {\n\t      this.stream.point(x * radians, y * radians);\n\t    }\n\t  });\n\t\n\t  function projection(project) {\n\t    return projectionMutator(function() { return project; })();\n\t  }\n\t\n\t  function projectionMutator(projectAt) {\n\t    var project,\n\t        k = 150, // scale\n\t        x = 480, y = 250, // translate\n\t        dx, dy, lambda = 0, phi = 0, // center\n\t        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n\t        theta = null, preclip = clipAntimeridian, // clip angle\n\t        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent\n\t        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n\t        stream,\n\t        streamSink;\n\t\n\t    function projection(point) {\n\t      point = projectRotate(point[0] * radians, point[1] * radians);\n\t      return [point[0] * k + dx, dy - point[1] * k];\n\t    }\n\t\n\t    function invert(point) {\n\t      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n\t      return point && [point[0] * degrees$1, point[1] * degrees$1];\n\t    }\n\t\n\t    function projectTransform(x, y) {\n\t      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n\t    }\n\t\n\t    projection.stream = function(sink) {\n\t      return stream && streamSink === sink ? stream : stream = transformRadians(preclip(rotate, projectResample(postclip(streamSink = sink))));\n\t    };\n\t\n\t    projection.clipAngle = function(_) {\n\t      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n\t    };\n\t\n\t    projection.clipExtent = function(_) {\n\t      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n\t    };\n\t\n\t    projection.scale = function(_) {\n\t      return arguments.length ? (k = +_, recenter()) : k;\n\t    };\n\t\n\t    projection.translate = function(_) {\n\t      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n\t    };\n\t\n\t    projection.center = function(_) {\n\t      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n\t    };\n\t\n\t    projection.rotate = function(_) {\n\t      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n\t    };\n\t\n\t    projection.precision = function(_) {\n\t      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n\t    };\n\t\n\t    function recenter() {\n\t      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n\t      var center = project(lambda, phi);\n\t      dx = x - center[0] * k;\n\t      dy = y + center[1] * k;\n\t      return reset();\n\t    }\n\t\n\t    function reset() {\n\t      stream = streamSink = null;\n\t      return projection;\n\t    }\n\t\n\t    return function() {\n\t      project = projectAt.apply(this, arguments);\n\t      projection.invert = project.invert && invert;\n\t      return recenter();\n\t    };\n\t  }\n\t\n\t  function conicProjection(projectAt) {\n\t    var phi0 = 0,\n\t        phi1 = pi$3 / 3,\n\t        m = projectionMutator(projectAt),\n\t        p = m(phi0, phi1);\n\t\n\t    p.parallels = function(_) {\n\t      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n\t    };\n\t\n\t    return p;\n\t  }\n\t\n\t  function conicEqualArea(y0, y1) {\n\t    var sy0 = sin(y0),\n\t        n = (sy0 + sin(y1)) / 2,\n\t        c = 1 + sy0 * (2 * n - sy0),\n\t        r0 = sqrt$1(c) / n;\n\t\n\t    function project(x, y) {\n\t      var r = sqrt$1(c - 2 * n * sin(y)) / n;\n\t      return [r * sin(x *= n), r0 - r * cos(x)];\n\t    }\n\t\n\t    project.invert = function(x, y) {\n\t      var r0y = r0 - y;\n\t      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n\t    };\n\t\n\t    return project;\n\t  }\n\t\n\t  function conicEqualArea$1() {\n\t    return conicProjection(conicEqualArea)\n\t        .scale(151)\n\t        .translate([480, 347]);\n\t  }\n\t\n\t  function albers() {\n\t    return conicEqualArea$1()\n\t        .parallels([29.5, 45.5])\n\t        .scale(1070)\n\t        .translate([480, 250])\n\t        .rotate([96, 0])\n\t        .center([-0.6, 38.7]);\n\t  }\n\t\n\t  // The projections must have mutually exclusive clip regions on the sphere,\n\t  // as this will avoid emitting interleaving lines and polygons.\n\t  function multiplex(sinks) {\n\t    var n = sinks.length;\n\t    return {\n\t      point: function(x, y) { var i = -1; while (++i < n) sinks[i].point(x, y); },\n\t      sphere: function() { var i = -1; while (++i < n) sinks[i].sphere(); },\n\t      lineStart: function() { var i = -1; while (++i < n) sinks[i].lineStart(); },\n\t      lineEnd: function() { var i = -1; while (++i < n) sinks[i].lineEnd(); },\n\t      polygonStart: function() { var i = -1; while (++i < n) sinks[i].polygonStart(); },\n\t      polygonEnd: function() { var i = -1; while (++i < n) sinks[i].polygonEnd(); }\n\t    };\n\t  }\n\t\n\t  // A composite projection for the United States, configured by default for\n\t  // 960×500. Also works quite well at 960×600 with scale 1285. The set of\n\t  // standard parallels for each region comes from USGS, which is published here:\n\t  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n\t  function albersUsa() {\n\t    var stream,\n\t        streamSink,\n\t        lower48 = albers(), lower48Point,\n\t        alaska = conicEqualArea$1().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n\t        hawaii = conicEqualArea$1().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n\t        point, pointSink = {point: function(x, y) { point = [x, y]; }};\n\t\n\t    function albersUsa(coordinates) {\n\t      var x = coordinates[0], y = coordinates[1];\n\t      return point = null, (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || (hawaiiPoint(x, y), point);\n\t    }\n\t\n\t    albersUsa.invert = function(coordinates) {\n\t      var k = lower48.scale(),\n\t          t = lower48.translate(),\n\t          x = (coordinates[0] - t[0]) / k,\n\t          y = (coordinates[1] - t[1]) / k;\n\t      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n\t          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n\t          : lower48).invert(coordinates);\n\t    };\n\t\n\t    albersUsa.stream = function(sink) {\n\t      return stream && streamSink === sink ? stream : stream = multiplex([lower48.stream(streamSink = sink), alaska.stream(sink), hawaii.stream(sink)]);\n\t    };\n\t\n\t    albersUsa.precision = function(_) {\n\t      if (!arguments.length) return lower48.precision();\n\t      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n\t      return albersUsa;\n\t    };\n\t\n\t    albersUsa.scale = function(_) {\n\t      if (!arguments.length) return lower48.scale();\n\t      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n\t      return albersUsa.translate(lower48.translate());\n\t    };\n\t\n\t    albersUsa.translate = function(_) {\n\t      if (!arguments.length) return lower48.translate();\n\t      var k = lower48.scale(), x = +_[0], y = +_[1];\n\t\n\t      lower48Point = lower48\n\t          .translate(_)\n\t          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n\t          .stream(pointSink).point;\n\t\n\t      alaskaPoint = alaska\n\t          .translate([x - 0.307 * k, y + 0.201 * k])\n\t          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n\t          .stream(pointSink).point;\n\t\n\t      hawaiiPoint = hawaii\n\t          .translate([x - 0.205 * k, y + 0.212 * k])\n\t          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n\t          .stream(pointSink).point;\n\t\n\t      return albersUsa;\n\t    };\n\t\n\t    return albersUsa.scale(1070);\n\t  }\n\t\n\t  function azimuthal(scale) {\n\t    return function(x, y) {\n\t      var cx = cos(x),\n\t          cy = cos(y),\n\t          k = scale(cx * cy);\n\t      return [\n\t        k * cy * sin(x),\n\t        k * sin(y)\n\t      ];\n\t    }\n\t  }\n\t\n\t  function azimuthalInvert(angle) {\n\t    return function(x, y) {\n\t      var z = sqrt$1(x * x + y * y),\n\t          c = angle(z),\n\t          sc = sin(c),\n\t          cc = cos(c);\n\t      return [\n\t        atan2(x * sc, z * cc),\n\t        asin$1(z && y * sc / z)\n\t      ];\n\t    }\n\t  }\n\t\n\t  var azimuthalEqualArea = azimuthal(function(cxcy) {\n\t    return sqrt$1(2 / (1 + cxcy));\n\t  });\n\t\n\t  azimuthalEqualArea.invert = azimuthalInvert(function(z) {\n\t    return 2 * asin$1(z / 2);\n\t  });\n\t\n\t  function azimuthalEqualArea$1() {\n\t    return projection(azimuthalEqualArea)\n\t        .scale(120)\n\t        .clipAngle(180 - 1e-3);\n\t  }\n\t\n\t  var azimuthalEquidistant = azimuthal(function(c) {\n\t    return (c = acos(c)) && c / sin(c);\n\t  });\n\t\n\t  azimuthalEquidistant.invert = azimuthalInvert(function(z) {\n\t    return z;\n\t  });\n\t\n\t  function azimuthalEquidistant$1() {\n\t    return projection(azimuthalEquidistant)\n\t        .scale(480 / tau$3)\n\t        .clipAngle(180 - 1e-3);\n\t  }\n\t\n\t  function mercator(lambda, phi) {\n\t    return [lambda, log$1(tan((halfPi$2 + phi) / 2))];\n\t  }\n\t\n\t  mercator.invert = function(x, y) {\n\t    return [x, 2 * atan(exp(y)) - halfPi$2];\n\t  };\n\t\n\t  function mercator$1() {\n\t    return mercatorProjection(mercator);\n\t  }\n\t\n\t  function mercatorProjection(project) {\n\t    var m = projection(project),\n\t        scale = m.scale,\n\t        translate = m.translate,\n\t        clipExtent = m.clipExtent,\n\t        clipAuto;\n\t\n\t    m.scale = function(_) {\n\t      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();\n\t    };\n\t\n\t    m.translate = function(_) {\n\t      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();\n\t    };\n\t\n\t    m.clipExtent = function(_) {\n\t      if (!arguments.length) return clipAuto ? null : clipExtent();\n\t      if (clipAuto = _ == null) {\n\t        var k = pi$3 * scale(), t = translate();\n\t        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];\n\t      }\n\t      clipExtent(_);\n\t      return m;\n\t    };\n\t\n\t    return m.clipExtent(null).scale(961 / tau$3);\n\t  }\n\t\n\t  function tany(y) {\n\t    return tan((halfPi$2 + y) / 2);\n\t  }\n\t\n\t  function conicConformal(y0, y1) {\n\t    var cy0 = cos(y0),\n\t        n = y0 === y1 ? sin(y0) : log$1(cy0 / cos(y1)) / log$1(tany(y1) / tany(y0)),\n\t        f = cy0 * pow$1(tany(y0), n) / n;\n\t\n\t    if (!n) return mercator;\n\t\n\t    function project(x, y) {\n\t      if (f > 0) { if (y < -halfPi$2 + epsilon$4) y = -halfPi$2 + epsilon$4; }\n\t      else { if (y > halfPi$2 - epsilon$4) y = halfPi$2 - epsilon$4; }\n\t      var r = f / pow$1(tany(y), n);\n\t      return [r * sin(n * x), f - r * cos(n * x)];\n\t    }\n\t\n\t    project.invert = function(x, y) {\n\t      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);\n\t      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$2];\n\t    };\n\t\n\t    return project;\n\t  }\n\t\n\t  function conicConformal$1() {\n\t    return conicProjection(conicConformal);\n\t  }\n\t\n\t  function equirectangular(lambda, phi) {\n\t    return [lambda, phi];\n\t  }\n\t\n\t  equirectangular.invert = equirectangular;\n\t\n\t  function equirectangular$1() {\n\t    return projection(equirectangular);\n\t  }\n\t\n\t  function conicEquidistant(y0, y1) {\n\t    var cy0 = cos(y0),\n\t        n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n\t        g = cy0 / n + y0;\n\t\n\t    if (abs(n) < epsilon$4) return equirectangular;\n\t\n\t    function project(x, y) {\n\t      var gy = g - y, nx = n * x;\n\t      return [gy * sin(nx), g - gy * cos(nx)];\n\t    }\n\t\n\t    project.invert = function(x, y) {\n\t      var gy = g - y;\n\t      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];\n\t    };\n\t\n\t    return project;\n\t  }\n\t\n\t  function conicEquidistant$1() {\n\t    return conicProjection(conicEquidistant)\n\t      .scale(128)\n\t      .translate([480, 280]);\n\t  }\n\t\n\t  function gnomonic(x, y) {\n\t    var cy = cos(y), k = cos(x) * cy;\n\t    return [cy * sin(x) / k, sin(y) / k];\n\t  }\n\t\n\t  gnomonic.invert = azimuthalInvert(atan);\n\t\n\t  function gnomonic$1() {\n\t    return projection(gnomonic)\n\t        .scale(139)\n\t        .clipAngle(70);\n\t  }\n\t\n\t  function orthographic(x, y) {\n\t    return [cos(y) * sin(x), sin(y)];\n\t  }\n\t\n\t  orthographic.invert = azimuthalInvert(asin$1);\n\t\n\t  function orthographic$1() {\n\t    return projection(orthographic)\n\t        .scale(240)\n\t        .clipAngle(90 + epsilon$4);\n\t  }\n\t\n\t  function stereographic(x, y) {\n\t    var cy = cos(y), k = 1 + cos(x) * cy;\n\t    return [cy * sin(x) / k, sin(y) / k];\n\t  }\n\t\n\t  stereographic.invert = azimuthalInvert(function(z) {\n\t    return 2 + atan(z);\n\t  });\n\t\n\t  function stereographic$1() {\n\t    return projection(stereographic)\n\t        .scale(240)\n\t        .clipAngle(180 - 1e-3);\n\t  }\n\t\n\t  function transverseMercator(lambda, phi) {\n\t    return [log$1(tan((halfPi$2 + phi) / 2)), -lambda];\n\t  }\n\t\n\t  transverseMercator.invert = function(x, y) {\n\t    return [-y, 2 * atan(exp(x)) - halfPi$2];\n\t  };\n\t\n\t  function transverseMercator$1() {\n\t    var m = mercatorProjection(transverseMercator),\n\t        center = m.center,\n\t        rotate = m.rotate;\n\t\n\t    m.center = function(_) {\n\t      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n\t    };\n\t\n\t    m.rotate = function(_) {\n\t      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n\t    };\n\t\n\t    return rotate([0, 0, 90]);\n\t  }\n\t\n\t  exports.version = version;\n\t  exports.bisect = bisectRight;\n\t  exports.bisectRight = bisectRight;\n\t  exports.bisectLeft = bisectLeft;\n\t  exports.ascending = ascending;\n\t  exports.bisector = bisector;\n\t  exports.descending = descending;\n\t  exports.deviation = deviation;\n\t  exports.extent = extent;\n\t  exports.histogram = histogram;\n\t  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n\t  exports.thresholdScott = scott;\n\t  exports.thresholdSturges = sturges;\n\t  exports.max = max;\n\t  exports.mean = mean;\n\t  exports.median = median;\n\t  exports.merge = merge;\n\t  exports.min = min;\n\t  exports.pairs = pairs;\n\t  exports.permute = permute;\n\t  exports.quantile = threshold;\n\t  exports.range = range;\n\t  exports.scan = scan;\n\t  exports.shuffle = shuffle;\n\t  exports.sum = sum;\n\t  exports.ticks = ticks;\n\t  exports.tickStep = tickStep;\n\t  exports.transpose = transpose;\n\t  exports.variance = variance;\n\t  exports.zip = zip;\n\t  exports.entries = entries;\n\t  exports.keys = keys;\n\t  exports.values = values;\n\t  exports.map = map$1;\n\t  exports.set = set;\n\t  exports.nest = nest;\n\t  exports.randomUniform = uniform;\n\t  exports.randomNormal = normal;\n\t  exports.randomLogNormal = logNormal;\n\t  exports.randomBates = bates;\n\t  exports.randomIrwinHall = irwinHall;\n\t  exports.randomExponential = exponential;\n\t  exports.easeLinear = linear;\n\t  exports.easeQuad = quadInOut;\n\t  exports.easeQuadIn = quadIn;\n\t  exports.easeQuadOut = quadOut;\n\t  exports.easeQuadInOut = quadInOut;\n\t  exports.easeCubic = easeCubicInOut;\n\t  exports.easeCubicIn = cubicIn;\n\t  exports.easeCubicOut = cubicOut;\n\t  exports.easeCubicInOut = easeCubicInOut;\n\t  exports.easePoly = polyInOut;\n\t  exports.easePolyIn = polyIn;\n\t  exports.easePolyOut = polyOut;\n\t  exports.easePolyInOut = polyInOut;\n\t  exports.easeSin = sinInOut;\n\t  exports.easeSinIn = sinIn;\n\t  exports.easeSinOut = sinOut;\n\t  exports.easeSinInOut = sinInOut;\n\t  exports.easeExp = expInOut;\n\t  exports.easeExpIn = expIn;\n\t  exports.easeExpOut = expOut;\n\t  exports.easeExpInOut = expInOut;\n\t  exports.easeCircle = circleInOut;\n\t  exports.easeCircleIn = circleIn;\n\t  exports.easeCircleOut = circleOut;\n\t  exports.easeCircleInOut = circleInOut;\n\t  exports.easeBounce = bounceOut;\n\t  exports.easeBounceIn = bounceIn;\n\t  exports.easeBounceOut = bounceOut;\n\t  exports.easeBounceInOut = bounceInOut;\n\t  exports.easeBack = backInOut;\n\t  exports.easeBackIn = backIn;\n\t  exports.easeBackOut = backOut;\n\t  exports.easeBackInOut = backInOut;\n\t  exports.easeElastic = elasticOut;\n\t  exports.easeElasticIn = elasticIn;\n\t  exports.easeElasticOut = elasticOut;\n\t  exports.easeElasticInOut = elasticInOut;\n\t  exports.polygonArea = area;\n\t  exports.polygonCentroid = centroid;\n\t  exports.polygonHull = hull;\n\t  exports.polygonContains = contains;\n\t  exports.polygonLength = length$1;\n\t  exports.path = path;\n\t  exports.quadtree = quadtree;\n\t  exports.queue = queue;\n\t  exports.arc = arc;\n\t  exports.area = area$1;\n\t  exports.line = line;\n\t  exports.pie = pie;\n\t  exports.radialArea = radialArea;\n\t  exports.radialLine = radialLine$1;\n\t  exports.symbol = symbol;\n\t  exports.symbols = symbols;\n\t  exports.symbolCircle = circle;\n\t  exports.symbolCross = cross$1;\n\t  exports.symbolDiamond = diamond;\n\t  exports.symbolSquare = square;\n\t  exports.symbolStar = star;\n\t  exports.symbolTriangle = triangle;\n\t  exports.symbolWye = wye;\n\t  exports.curveBasisClosed = basisClosed;\n\t  exports.curveBasisOpen = basisOpen;\n\t  exports.curveBasis = basis;\n\t  exports.curveBundle = bundle;\n\t  exports.curveCardinalClosed = cardinalClosed;\n\t  exports.curveCardinalOpen = cardinalOpen;\n\t  exports.curveCardinal = cardinal;\n\t  exports.curveCatmullRomClosed = catmullRomClosed;\n\t  exports.curveCatmullRomOpen = catmullRomOpen;\n\t  exports.curveCatmullRom = catmullRom;\n\t  exports.curveLinearClosed = linearClosed;\n\t  exports.curveLinear = curveLinear;\n\t  exports.curveMonotoneX = monotoneX;\n\t  exports.curveMonotoneY = monotoneY;\n\t  exports.curveNatural = natural;\n\t  exports.curveStep = step;\n\t  exports.curveStepAfter = stepAfter;\n\t  exports.curveStepBefore = stepBefore;\n\t  exports.stack = stack;\n\t  exports.stackOffsetExpand = expand;\n\t  exports.stackOffsetNone = none;\n\t  exports.stackOffsetSilhouette = silhouette;\n\t  exports.stackOffsetWiggle = wiggle;\n\t  exports.stackOrderAscending = ascending$1;\n\t  exports.stackOrderDescending = descending$2;\n\t  exports.stackOrderInsideOut = insideOut;\n\t  exports.stackOrderNone = none$1;\n\t  exports.stackOrderReverse = reverse;\n\t  exports.color = color;\n\t  exports.rgb = colorRgb;\n\t  exports.hsl = colorHsl;\n\t  exports.lab = lab;\n\t  exports.hcl = colorHcl;\n\t  exports.cubehelix = cubehelix;\n\t  exports.interpolate = interpolate;\n\t  exports.interpolateArray = array$1;\n\t  exports.interpolateNumber = interpolateNumber;\n\t  exports.interpolateObject = object;\n\t  exports.interpolateRound = interpolateRound;\n\t  exports.interpolateString = interpolateString;\n\t  exports.interpolateTransformCss = interpolateTransform$1;\n\t  exports.interpolateTransformSvg = interpolateTransform$2;\n\t  exports.interpolateZoom = interpolateZoom;\n\t  exports.interpolateRgb = interpolateRgb;\n\t  exports.interpolateRgbBasis = rgbBasis;\n\t  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n\t  exports.interpolateHsl = hsl$1;\n\t  exports.interpolateHslLong = hslLong;\n\t  exports.interpolateLab = lab$1;\n\t  exports.interpolateHcl = hcl$1;\n\t  exports.interpolateHclLong = hclLong;\n\t  exports.interpolateCubehelix = cubehelix$2;\n\t  exports.interpolateCubehelixLong = interpolateCubehelixLong;\n\t  exports.interpolateBasis = basis$2;\n\t  exports.interpolateBasisClosed = basisClosed$1;\n\t  exports.quantize = quantize;\n\t  exports.dispatch = dispatch;\n\t  exports.dsvFormat = dsv;\n\t  exports.csvParse = csvParse;\n\t  exports.csvParseRows = csvParseRows;\n\t  exports.csvFormat = csvFormat;\n\t  exports.csvFormatRows = csvFormatRows;\n\t  exports.tsvParse = tsvParse;\n\t  exports.tsvParseRows = tsvParseRows;\n\t  exports.tsvFormat = tsvFormat;\n\t  exports.tsvFormatRows = tsvFormatRows;\n\t  exports.request = request;\n\t  exports.html = html;\n\t  exports.json = json;\n\t  exports.text = text;\n\t  exports.xml = xml;\n\t  exports.csv = csv$1;\n\t  exports.tsv = tsv$1;\n\t  exports.now = now;\n\t  exports.timer = timer;\n\t  exports.timerFlush = timerFlush;\n\t  exports.timeout = timeout$1;\n\t  exports.interval = interval$1;\n\t  exports.timeInterval = newInterval;\n\t  exports.timeMillisecond = millisecond;\n\t  exports.timeMilliseconds = milliseconds;\n\t  exports.timeSecond = second;\n\t  exports.timeSeconds = seconds;\n\t  exports.timeMinute = minute;\n\t  exports.timeMinutes = minutes;\n\t  exports.timeHour = hour;\n\t  exports.timeHours = hours;\n\t  exports.timeDay = day;\n\t  exports.timeDays = days;\n\t  exports.timeWeek = timeWeek;\n\t  exports.timeWeeks = sundays;\n\t  exports.timeSunday = timeWeek;\n\t  exports.timeSundays = sundays;\n\t  exports.timeMonday = timeMonday;\n\t  exports.timeMondays = mondays;\n\t  exports.timeTuesday = tuesday;\n\t  exports.timeTuesdays = tuesdays;\n\t  exports.timeWednesday = wednesday;\n\t  exports.timeWednesdays = wednesdays;\n\t  exports.timeThursday = thursday;\n\t  exports.timeThursdays = thursdays;\n\t  exports.timeFriday = friday;\n\t  exports.timeFridays = fridays;\n\t  exports.timeSaturday = saturday;\n\t  exports.timeSaturdays = saturdays;\n\t  exports.timeMonth = month;\n\t  exports.timeMonths = months;\n\t  exports.timeYear = year;\n\t  exports.timeYears = years;\n\t  exports.utcMillisecond = millisecond;\n\t  exports.utcMilliseconds = milliseconds;\n\t  exports.utcSecond = second;\n\t  exports.utcSeconds = seconds;\n\t  exports.utcMinute = utcMinute;\n\t  exports.utcMinutes = utcMinutes;\n\t  exports.utcHour = utcHour;\n\t  exports.utcHours = utcHours;\n\t  exports.utcDay = utcDay;\n\t  exports.utcDays = utcDays;\n\t  exports.utcWeek = utcWeek;\n\t  exports.utcWeeks = utcSundays;\n\t  exports.utcSunday = utcWeek;\n\t  exports.utcSundays = utcSundays;\n\t  exports.utcMonday = utcMonday;\n\t  exports.utcMondays = utcMondays;\n\t  exports.utcTuesday = utcTuesday;\n\t  exports.utcTuesdays = utcTuesdays;\n\t  exports.utcWednesday = utcWednesday;\n\t  exports.utcWednesdays = utcWednesdays;\n\t  exports.utcThursday = utcThursday;\n\t  exports.utcThursdays = utcThursdays;\n\t  exports.utcFriday = utcFriday;\n\t  exports.utcFridays = utcFridays;\n\t  exports.utcSaturday = utcSaturday;\n\t  exports.utcSaturdays = utcSaturdays;\n\t  exports.utcMonth = utcMonth;\n\t  exports.utcMonths = utcMonths;\n\t  exports.utcYear = utcYear;\n\t  exports.utcYears = utcYears;\n\t  exports.format = format;\n\t  exports.formatPrefix = formatPrefix;\n\t  exports.formatLocale = formatLocale;\n\t  exports.formatSpecifier = formatSpecifier;\n\t  exports.precisionFixed = precisionFixed;\n\t  exports.precisionPrefix = precisionPrefix;\n\t  exports.precisionRound = precisionRound;\n\t  exports.timeFormat = timeFormat;\n\t  exports.timeParse = timeParse;\n\t  exports.utcFormat = utcFormat;\n\t  exports.utcParse = utcParse;\n\t  exports.isoFormat = formatIso;\n\t  exports.isoParse = parseIso;\n\t  exports.timeFormatLocale = formatLocale$1;\n\t  exports.scaleBand = band;\n\t  exports.scalePoint = point$4;\n\t  exports.scaleIdentity = identity$4;\n\t  exports.scaleLinear = linear$2;\n\t  exports.scaleLog = log;\n\t  exports.scaleOrdinal = ordinal;\n\t  exports.scaleImplicit = implicit;\n\t  exports.scalePow = pow;\n\t  exports.scaleSqrt = sqrt;\n\t  exports.scaleQuantile = quantile;\n\t  exports.scaleQuantize = quantize$1;\n\t  exports.scaleThreshold = threshold$1;\n\t  exports.scaleTime = time;\n\t  exports.scaleUtc = utcTime;\n\t  exports.schemeCategory10 = category10;\n\t  exports.schemeCategory20b = category20b;\n\t  exports.schemeCategory20c = category20c;\n\t  exports.schemeCategory20 = category20;\n\t  exports.scaleSequential = sequential;\n\t  exports.interpolateCubehelixDefault = cubehelix$3;\n\t  exports.interpolateRainbow = rainbow$1;\n\t  exports.interpolateWarm = warm;\n\t  exports.interpolateCool = cool;\n\t  exports.interpolateViridis = viridis;\n\t  exports.interpolateMagma = magma;\n\t  exports.interpolateInferno = inferno;\n\t  exports.interpolatePlasma = plasma;\n\t  exports.creator = creator;\n\t  exports.customEvent = customEvent;\n\t  exports.local = local;\n\t  exports.matcher = matcher$1;\n\t  exports.mouse = mouse;\n\t  exports.namespace = namespace;\n\t  exports.namespaces = namespaces;\n\t  exports.select = select;\n\t  exports.selectAll = selectAll;\n\t  exports.selection = selection;\n\t  exports.selector = selector;\n\t  exports.selectorAll = selectorAll;\n\t  exports.touch = touch;\n\t  exports.touches = touches;\n\t  exports.window = window;\n\t  exports.active = active;\n\t  exports.interrupt = interrupt;\n\t  exports.transition = transition;\n\t  exports.axisTop = axisTop;\n\t  exports.axisRight = axisRight;\n\t  exports.axisBottom = axisBottom;\n\t  exports.axisLeft = axisLeft;\n\t  exports.cluster = cluster;\n\t  exports.hierarchy = hierarchy;\n\t  exports.pack = index;\n\t  exports.packSiblings = siblings;\n\t  exports.packEnclose = enclose;\n\t  exports.partition = partition;\n\t  exports.stratify = stratify;\n\t  exports.tree = tree;\n\t  exports.treemap = index$1;\n\t  exports.treemapBinary = binary;\n\t  exports.treemapDice = treemapDice;\n\t  exports.treemapSlice = treemapSlice;\n\t  exports.treemapSliceDice = sliceDice;\n\t  exports.treemapSquarify = squarify;\n\t  exports.treemapResquarify = resquarify;\n\t  exports.forceCenter = center$1;\n\t  exports.forceCollide = collide;\n\t  exports.forceLink = link;\n\t  exports.forceManyBody = manyBody;\n\t  exports.forceSimulation = simulation;\n\t  exports.forceX = x$3;\n\t  exports.forceY = y$3;\n\t  exports.drag = drag;\n\t  exports.dragDisable = dragDisable;\n\t  exports.dragEnable = dragEnable;\n\t  exports.voronoi = voronoi;\n\t  exports.zoom = zoom;\n\t  exports.zoomIdentity = identity$6;\n\t  exports.zoomTransform = transform;\n\t  exports.brush = brush;\n\t  exports.brushX = brushX;\n\t  exports.brushY = brushY;\n\t  exports.brushSelection = brushSelection;\n\t  exports.geoArea = area$2;\n\t  exports.geoBounds = bounds;\n\t  exports.geoCentroid = centroid$1;\n\t  exports.geoCircle = circle$1;\n\t  exports.geoClipExtent = extent$1;\n\t  exports.geoDistance = distance;\n\t  exports.geoGraticule = graticule;\n\t  exports.geoInterpolate = interpolate$2;\n\t  exports.geoLength = length$2;\n\t  exports.geoPath = index$3;\n\t  exports.geoAlbers = albers;\n\t  exports.geoAlbersUsa = albersUsa;\n\t  exports.geoAzimuthalEqualArea = azimuthalEqualArea$1;\n\t  exports.geoAzimuthalEquidistant = azimuthalEquidistant$1;\n\t  exports.geoConicConformal = conicConformal$1;\n\t  exports.geoConicEqualArea = conicEqualArea$1;\n\t  exports.geoConicEquidistant = conicEquidistant$1;\n\t  exports.geoEquirectangular = equirectangular$1;\n\t  exports.geoGnomonic = gnomonic$1;\n\t  exports.geoProjection = projection;\n\t  exports.geoProjectionMutator = projectionMutator;\n\t  exports.geoMercator = mercator$1;\n\t  exports.geoOrthographic = orthographic$1;\n\t  exports.geoStereographic = stereographic$1;\n\t  exports.geoTransverseMercator = transverseMercator$1;\n\t  exports.geoRotation = rotation;\n\t  exports.geoStream = stream;\n\t  exports.geoTransform = transform$1;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** qnimate.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 759903bde0a0e62891a7\n **/","import * as d3 from 'd3';\n\nclass Qnimate {\n\n  constructor({\n      id, width, height, vertices\n  }) {\n    this.domId = id;\n    this.width = width || 960;\n    this.height = height || 500;\n    this.vertexNum = vertices || 40;\n    this._init();\n  }\n\n  // public members\n\n  run() {\n    this.isRunning = true;\n    this._tick();\n  }\n\n  stop() {\n    this.isRunning = false;\n  }\n\n  // private members\n\n  _init() {\n    this.FPS = 30;\n    this.interval = 1000 / this.FPS;\n    this.then = Date.now();\n    this.renderCount = 10 * this.FPS;\n\n\n    this.voronoi = d3.voronoi();\n    this.vertices = d3.range(this.vertexNum).map(() =>[\n      d3.randomUniform(-this.width / 2, 1.5 * this.width)(),\n      d3.randomUniform(-this.height / 2, 1.5 * this.height)()\n    ]);\n    this.symbols = this.vertices.map(() => Math.random() > 0.5 ? 1 : -1);\n\n    // the root element <svg>\n    this.svg = d3.select(`#${this.domId}`)\n        .append('svg')\n        .attr('width', this.width)\n        .attr('height', this.height);\n\n    // our canvas <g>\n    this.graph = this.svg.append('g');\n  }\n\n  _tick() {\n    if (this.isRunning) {\n      if (window.requestAnimationFrame) {\n        requestAnimationFrame(() => this._tick());\n        const now = Date.now();\n        const delta = now - this.then;\n        if (delta > this.interval) {\n          this.then = now - (delta % this.interval);\n\n          // call render recursively\n          this._render(this.vertices);\n        }\n      } else {\n        setTimeout(() => this._tick(), this.interval);\n\n        // call render recursively\n        this._render(this.vertices);\n      }\n    }\n  }\n\n  /**\n   * generate color from a point\n   * @param d\n   * @private\n   */\n  _color(d) {\n    var dx = d[0] - this.width / 2,\n        dy = d[1] - this.height / 2;\n    return d3.lab(100 - (dx * dx + dy * dy) / 5000, dx / 10, dy / 10);\n  }\n\n  /**\n   * render a frame by vertices\n   * @private\n   */\n  _render() {\n    let paths = this.graph.selectAll('path')\n        .attr('stroke-linejoin', 'round')\n        .attr('stroke-linecap', 'butt')\n        .data(this.voronoi(this.vertices).triangles());\n\n    if (paths.nodes().length < 1) {\n      paths = paths.enter().append('path');\n    }\n\n    paths\n        .attr('fill', d => {\n          return this._color(d3.polygonCentroid(d3.polygonHull(d)))\n        })\n        .attr('d', d =>`M${d.join('L')}Z`);\n\n    // vertices generated at every render circle\n    this._nextVertices();\n  }\n\n  /**\n   * generate the next vertices\n   * @private\n   */\n  _nextVertices() {\n    if (!this.renderCount--) {\n      this.symbols = this.symbols.map(() => Math.random() > 0.5 ? 1 : -1);\n      this.renderCount = 10 * this.FPS;\n    }\n\n    this.vertices = this.vertices.map((v, i) => {\n      const dx = Math.random() / 5;\n      const dy = Math.random() / 5;\n\n      const x = v[0] + this.symbols[i] * dx;\n      const y = v[1] + this.symbols[i] * dy;\n\n      return [x, y];\n    });\n  }\n\n}\n\n// 'module' is always defined by webpack\nwindow.Qnimate = module.exports = Qnimate;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/qnimate.js\n **/","// https://d3js.org Version 4.0.0-alpha.50. Copyright 2016 Mike Bostock.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3 = global.d3 || {})));\n}(this, function (exports) { 'use strict';\n\n  var version = \"4.0.0-alpha.50\";\n\n  function ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(compare) {\n    if (compare.length === 1) compare = ascendingComparator(compare);\n    return {\n      left: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1;\n          else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (lo == null) lo = 0;\n        if (hi == null) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid;\n          else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n\n  function ascendingComparator(f) {\n    return function(d, x) {\n      return ascending(f(d), x);\n    };\n  }\n\n  var ascendingBisect = bisector(ascending);\n  var bisectRight = ascendingBisect.right;\n  var bisectLeft = ascendingBisect.left;\n\n  function descending(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  function variance(array, f) {\n    var n = array.length,\n        m = 0,\n        a,\n        d,\n        s = 0,\n        i = -1,\n        j = 0;\n\n    if (f == null) {\n      while (++i < n) {\n        if (!isNaN(a = number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    else {\n      while (++i < n) {\n        if (!isNaN(a = number(f(array[i], i, array)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n\n    if (j > 1) return s / (j - 1);\n  }\n\n  function deviation(array, f) {\n    var v = variance(array, f);\n    return v ? Math.sqrt(v) : v;\n  }\n\n  function extent(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b,\n        c;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n\n    return [a, c];\n  }\n\n  var array = Array.prototype;\n\n  var slice = array.slice;\n  var map = array.map;\n\n  function constant(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function identity(x) {\n    return x;\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  var e10 = Math.sqrt(50);\n  var e5 = Math.sqrt(10);\n  var e2 = Math.sqrt(2);\n  function ticks(start, stop, count) {\n    var step = tickStep(start, stop, count);\n    return range(\n      Math.ceil(start / step) * step,\n      Math.floor(stop / step) * step + step / 2, // inclusive\n      step\n    );\n  }\n\n  function tickStep(start, stop, count) {\n    var step0 = Math.abs(stop - start) / Math.max(0, count),\n        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n        error = step0 / step1;\n    if (error >= e10) step1 *= 10;\n    else if (error >= e5) step1 *= 5;\n    else if (error >= e2) step1 *= 2;\n    return stop < start ? -step1 : step1;\n  }\n\n  function sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n  }\n\n  function histogram() {\n    var value = identity,\n        domain = extent,\n        threshold = sturges;\n\n    function histogram(data) {\n      var i,\n          n = data.length,\n          x,\n          values = new Array(n);\n\n      for (i = 0; i < n; ++i) {\n        values[i] = value(data[i], i, data);\n      }\n\n      var xz = domain(values),\n          x0 = xz[0],\n          x1 = xz[1],\n          tz = threshold(values, x0, x1);\n\n      // Convert number of thresholds into uniform thresholds.\n      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);\n\n      // Remove any thresholds outside the domain.\n      var m = tz.length;\n      while (tz[0] <= x0) tz.shift(), --m;\n      while (tz[m - 1] >= x1) tz.pop(), --m;\n\n      var bins = new Array(m + 1),\n          bin;\n\n      // Initialize bins.\n      for (i = 0; i <= m; ++i) {\n        bin = bins[i] = [];\n        bin.x0 = i > 0 ? tz[i - 1] : x0;\n        bin.x1 = i < m ? tz[i] : x1;\n      }\n\n      // Assign data to bins by value, ignoring any outside the domain.\n      for (i = 0; i < n; ++i) {\n        x = values[i];\n        if (x0 <= x && x <= x1) {\n          bins[bisectRight(tz, x, 0, m)].push(data[i]);\n        }\n      }\n\n      return bins;\n    }\n\n    histogram.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n    };\n\n    histogram.domain = function(_) {\n      return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n    };\n\n    histogram.thresholds = function(_) {\n      return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n    };\n\n    return histogram;\n  }\n\n  function threshold(array, p, f) {\n    if (f == null) f = number;\n    if (!(n = array.length)) return;\n    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);\n    if (p >= 1) return +f(array[n - 1], n - 1, array);\n    var n,\n        h = (n - 1) * p,\n        i = Math.floor(h),\n        a = +f(array[i], i, array),\n        b = +f(array[i + 1], i + 1, array);\n    return a + (b - a) * (h - i);\n  }\n\n  function freedmanDiaconis(values, min, max) {\n    values = map.call(values, number).sort(ascending);\n    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function scott(values, min, max) {\n    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));\n  }\n\n  function max(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;\n    }\n\n    return a;\n  }\n\n  function mean(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1,\n        j = n;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;\n    }\n\n    if (j) return s / j;\n  }\n\n  function median(array, f) {\n    var numbers = [],\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);\n    }\n\n    else {\n      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);\n    }\n\n    return threshold(numbers.sort(ascending), 0.5);\n  }\n\n  function merge(arrays) {\n    var n = arrays.length,\n        m,\n        i = -1,\n        j = 0,\n        merged,\n        array;\n\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n\n    return merged;\n  }\n\n  function min(array, f) {\n    var i = -1,\n        n = array.length,\n        a,\n        b;\n\n    if (f == null) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    }\n\n    else {\n      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }\n      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;\n    }\n\n    return a;\n  }\n\n  function pairs(array) {\n    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [p, p = array[++i]];\n    return pairs;\n  }\n\n  function permute(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  }\n\n  function scan(array, compare) {\n    if (!(n = array.length)) return;\n    var i = 0,\n        n,\n        j = 0,\n        xi,\n        xj = array[j];\n\n    if (!compare) compare = ascending;\n\n    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;\n\n    if (compare(xj, xj) === 0) return j;\n  }\n\n  function shuffle(array, i0, i1) {\n    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n\n    return array;\n  }\n\n  function sum(array, f) {\n    var s = 0,\n        n = array.length,\n        a,\n        i = -1;\n\n    if (f == null) {\n      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.\n    }\n\n    else {\n      while (++i < n) if (a = +f(array[i], i, array)) s += a;\n    }\n\n    return s;\n  }\n\n  function transpose(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  }\n\n  function length(d) {\n    return d.length;\n  }\n\n  function zip() {\n    return transpose(arguments);\n  }\n\n  var prefix = \"$\";\n\n  function Map() {}\n\n  Map.prototype = map$1.prototype = {\n    constructor: Map,\n    has: function(key) {\n      return (prefix + key) in this;\n    },\n    get: function(key) {\n      return this[prefix + key];\n    },\n    set: function(key, value) {\n      this[prefix + key] = value;\n      return this;\n    },\n    remove: function(key) {\n      var property = prefix + key;\n      return property in this && delete this[property];\n    },\n    clear: function() {\n      for (var property in this) if (property[0] === prefix) delete this[property];\n    },\n    keys: function() {\n      var keys = [];\n      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n      return keys;\n    },\n    values: function() {\n      var values = [];\n      for (var property in this) if (property[0] === prefix) values.push(this[property]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n      return entries;\n    },\n    size: function() {\n      var size = 0;\n      for (var property in this) if (property[0] === prefix) ++size;\n      return size;\n    },\n    empty: function() {\n      for (var property in this) if (property[0] === prefix) return false;\n      return true;\n    },\n    each: function(f) {\n      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n    }\n  };\n\n  function map$1(object, f) {\n    var map = new Map;\n\n    // Copy constructor.\n    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n    // Index array by numeric index or specified key function.\n    else if (Array.isArray(object)) {\n      var i = -1,\n          n = object.length,\n          o;\n\n      if (f == null) while (++i < n) map.set(i, object[i]);\n      else while (++i < n) map.set(f(o = object[i], i, object), o);\n    }\n\n    // Convert object to map.\n    else if (object) for (var key in object) map.set(key, object[key]);\n\n    return map;\n  }\n\n  function nest() {\n    var keys = [],\n        sortKeys = [],\n        sortValues,\n        rollup,\n        nest;\n\n    function apply(array, depth, createResult, setResult) {\n      if (depth >= keys.length) return rollup != null\n          ? rollup(array) : (sortValues != null\n          ? array.sort(sortValues)\n          : array);\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = map$1(),\n          values,\n          result = createResult();\n\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n          values.push(value);\n        } else {\n          valuesByKey.set(keyValue, [value]);\n        }\n      }\n\n      valuesByKey.each(function(values, key) {\n        setResult(result, key, apply(values, depth, createResult, setResult));\n      });\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array, sortKey = sortKeys[depth - 1];\n      if (rollup != null && depth >= keys.length) array = map.entries();\n      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n    }\n\n    return nest = {\n      object: function(array) { return apply(array, 0, createObject, setObject); },\n      map: function(array) { return apply(array, 0, createMap, setMap); },\n      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n      key: function(d) { keys.push(d); return nest; },\n      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n      sortValues: function(order) { sortValues = order; return nest; },\n      rollup: function(f) { rollup = f; return nest; }\n    };\n  }\n\n  function createObject() {\n    return {};\n  }\n\n  function setObject(object, key, value) {\n    object[key] = value;\n  }\n\n  function createMap() {\n    return map$1();\n  }\n\n  function setMap(map, key, value) {\n    map.set(key, value);\n  }\n\n  function Set() {}\n\n  var proto = map$1.prototype;\n\n  Set.prototype = set.prototype = {\n    constructor: Set,\n    has: proto.has,\n    add: function(value) {\n      value += \"\";\n      this[prefix + value] = value;\n      return this;\n    },\n    remove: proto.remove,\n    clear: proto.clear,\n    values: proto.keys,\n    size: proto.size,\n    empty: proto.empty,\n    each: proto.each\n  };\n\n  function set(object, f) {\n    var set = new Set;\n\n    // Copy constructor.\n    if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n    // Otherwise, assume it’s an array.\n    else if (object) {\n      var i = -1, n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);\n      else while (++i < n) set.add(f(object[i], i, object));\n    }\n\n    return set;\n  }\n\n  function keys(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  }\n\n  function values(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  }\n\n  function entries(map) {\n    var entries = [];\n    for (var key in map) entries.push({key: key, value: map[key]});\n    return entries;\n  }\n\n  function uniform(min, max) {\n    min = min == null ? 0 : +min;\n    max = max == null ? 1 : +max;\n    if (arguments.length === 1) max = min, min = 0;\n    else max -= min;\n    return function() {\n      return Math.random() * max + min;\n    };\n  }\n\n  function normal(mu, sigma) {\n    var x, r;\n    mu = mu == null ? 0 : +mu;\n    sigma = sigma == null ? 1 : +sigma;\n    return function() {\n      var y;\n\n      // If available, use the second previously-generated uniform random.\n      if (x != null) y = x, x = null;\n\n      // Otherwise, generate a new x and y.\n      else do {\n        x = Math.random() * 2 - 1;\n        y = Math.random() * 2 - 1;\n        r = x * x + y * y;\n      } while (!r || r > 1);\n\n      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n    };\n  }\n\n  function logNormal() {\n    var randomNormal = normal.apply(this, arguments);\n    return function() {\n      return Math.exp(randomNormal());\n    };\n  }\n\n  function irwinHall(n) {\n    return function() {\n      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();\n      return sum;\n    };\n  }\n\n  function bates(n) {\n    var randomIrwinHall = irwinHall(n);\n    return function() {\n      return randomIrwinHall() / n;\n    };\n  }\n\n  function exponential(lambda) {\n    return function() {\n      return -Math.log(1 - Math.random()) / lambda;\n    };\n  }\n\n  function linear(t) {\n    return +t;\n  }\n\n  function quadIn(t) {\n    return t * t;\n  }\n\n  function quadOut(t) {\n    return t * (2 - t);\n  }\n\n  function quadInOut(t) {\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\n  }\n\n  function cubicIn(t) {\n    return t * t * t;\n  }\n\n  function cubicOut(t) {\n    return --t * t * t + 1;\n  }\n\n  function easeCubicInOut(t) {\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n  }\n\n  var exponent = 3;\n\n  var polyIn = (function custom(e) {\n    e = +e;\n\n    function polyIn(t) {\n      return Math.pow(t, e);\n    }\n\n    polyIn.exponent = custom;\n\n    return polyIn;\n  })(exponent);\n\n  var polyOut = (function custom(e) {\n    e = +e;\n\n    function polyOut(t) {\n      return 1 - Math.pow(1 - t, e);\n    }\n\n    polyOut.exponent = custom;\n\n    return polyOut;\n  })(exponent);\n\n  var polyInOut = (function custom(e) {\n    e = +e;\n\n    function polyInOut(t) {\n      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\n    }\n\n    polyInOut.exponent = custom;\n\n    return polyInOut;\n  })(exponent);\n\n  var pi = Math.PI;\n  var halfPi = pi / 2;\n  function sinIn(t) {\n    return 1 - Math.cos(t * halfPi);\n  }\n\n  function sinOut(t) {\n    return Math.sin(t * halfPi);\n  }\n\n  function sinInOut(t) {\n    return (1 - Math.cos(pi * t)) / 2;\n  }\n\n  function expIn(t) {\n    return Math.pow(2, 10 * t - 10);\n  }\n\n  function expOut(t) {\n    return 1 - Math.pow(2, -10 * t);\n  }\n\n  function expInOut(t) {\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\n  }\n\n  function circleIn(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  function circleOut(t) {\n    return Math.sqrt(1 - --t * t);\n  }\n\n  function circleInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\n  }\n\n  var b1 = 4 / 11;\n  var b2 = 6 / 11;\n  var b3 = 8 / 11;\n  var b4 = 3 / 4;\n  var b5 = 9 / 11;\n  var b6 = 10 / 11;\n  var b7 = 15 / 16;\n  var b8 = 21 / 22;\n  var b9 = 63 / 64;\n  var b0 = 1 / b1 / b1;\n  function bounceIn(t) {\n    return 1 - bounceOut(1 - t);\n  }\n\n  function bounceOut(t) {\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\n  }\n\n  function bounceInOut(t) {\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\n  }\n\n  var overshoot = 1.70158;\n\n  var backIn = (function custom(s) {\n    s = +s;\n\n    function backIn(t) {\n      return t * t * ((s + 1) * t - s);\n    }\n\n    backIn.overshoot = custom;\n\n    return backIn;\n  })(overshoot);\n\n  var backOut = (function custom(s) {\n    s = +s;\n\n    function backOut(t) {\n      return --t * t * ((s + 1) * t + s) + 1;\n    }\n\n    backOut.overshoot = custom;\n\n    return backOut;\n  })(overshoot);\n\n  var backInOut = (function custom(s) {\n    s = +s;\n\n    function backInOut(t) {\n      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;\n    }\n\n    backInOut.overshoot = custom;\n\n    return backInOut;\n  })(overshoot);\n\n  var tau = 2 * Math.PI;\n  var amplitude = 1;\n  var period = 0.3;\n  var elasticIn = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticIn(t) {\n      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);\n    }\n\n    elasticIn.amplitude = function(a) { return custom(a, p * tau); };\n    elasticIn.period = function(p) { return custom(a, p); };\n\n    return elasticIn;\n  })(amplitude, period);\n\n  var elasticOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticOut(t) {\n      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);\n    }\n\n    elasticOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticOut.period = function(p) { return custom(a, p); };\n\n    return elasticOut;\n  })(amplitude, period);\n\n  var elasticInOut = (function custom(a, p) {\n    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);\n\n    function elasticInOut(t) {\n      return ((t = t * 2 - 1) < 0\n          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)\n          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;\n    }\n\n    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };\n    elasticInOut.period = function(p) { return custom(a, p); };\n\n    return elasticInOut;\n  })(amplitude, period);\n\n  function area(polygon) {\n    var i = -1,\n        n = polygon.length,\n        a,\n        b = polygon[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n\n    return area / 2;\n  }\n\n  function centroid(polygon) {\n    var i = -1,\n        n = polygon.length,\n        x = 0,\n        y = 0,\n        a,\n        b = polygon[n - 1],\n        c,\n        k = 0;\n\n    while (++i < n) {\n      a = b;\n      b = polygon[i];\n      k += c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n\n    return k *= 3, [x / k, y / k];\n  }\n\n  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n  // right, +y is up). Returns a positive value if ABC is counter-clockwise,\n  // negative if clockwise, and zero if the points are collinear.\n  function cross(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n\n  function lexicographicOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n\n  // Computes the upper convex hull per the monotone chain algorithm.\n  // Assumes points.length >= 3, is sorted by x, unique in y.\n  // Returns an array of indices into points in left-to-right order.\n  function computeUpperHullIndexes(points) {\n    var n = points.length,\n        indexes = [0, 1],\n        size = 2;\n\n    for (var i = 2; i < n; ++i) {\n      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n      indexes[size++] = i;\n    }\n\n    return indexes.slice(0, size); // remove popped points\n  }\n\n  function hull(points) {\n    if ((n = points.length) < 3) return null;\n\n    var i,\n        n,\n        sortedPoints = new Array(n),\n        flippedPoints = new Array(n);\n\n    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n    sortedPoints.sort(lexicographicOrder);\n    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n    var upperIndexes = computeUpperHullIndexes(sortedPoints),\n        lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n    // Construct the hull polygon, removing possible duplicate endpoints.\n    var skipLeft = lowerIndexes[0] === upperIndexes[0],\n        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n        hull = [];\n\n    // Add upper hull in right-to-l order.\n    // Then add lower hull in left-to-right order.\n    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n    return hull;\n  }\n\n  function contains(polygon, point) {\n    var n = polygon.length,\n        p = polygon[n - 1],\n        x = point[0], y = point[1],\n        x0 = p[0], y0 = p[1],\n        x1, y1,\n        inside = false;\n\n    for (var i = 0; i < n; ++i) {\n      p = polygon[i], x1 = p[0], y1 = p[1];\n      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n      x0 = x1, y0 = y1;\n    }\n\n    return inside;\n  }\n\n  function length$1(polygon) {\n    var i = -1,\n        n = polygon.length,\n        b = polygon[n - 1],\n        xa,\n        ya,\n        xb = b[0],\n        yb = b[1],\n        perimeter = 0;\n\n    while (++i < n) {\n      xa = xb;\n      ya = yb;\n      b = polygon[i];\n      xb = b[0];\n      yb = b[1];\n      xa -= xb;\n      ya -= yb;\n      perimeter += Math.sqrt(xa * xa + ya * ya);\n    }\n\n    return perimeter;\n  }\n\nvar   pi$1 = Math.PI;\nvar   tau$1 = 2 * pi$1;\n  var epsilon = 1e-6;\n  var tauEpsilon = tau$1 - epsilon;\n  function Path() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = [];\n  }\n\n  function path() {\n    return new Path;\n  }\n\n  Path.prototype = path.prototype = {\n    constructor: Path,\n    moveTo: function(x, y) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y);\n    },\n    closePath: function() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._.push(\"Z\");\n      }\n    },\n    lineTo: function(x, y) {\n      this._.push(\"L\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this._.push(\"Q\", +x1, \",\", +y1, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this._.push(\"C\", +x1, \",\", +y1, \",\", +x2, \",\", +y2, \",\", this._x1 = +x, \",\", this._y1 = +y);\n    },\n    arcTo: function(x1, y1, x2, y2, r) {\n      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n      var x0 = this._x1,\n          y0 = this._y1,\n          x21 = x2 - x1,\n          y21 = y2 - y1,\n          x01 = x0 - x1,\n          y01 = y0 - y1,\n          l01_2 = x01 * x01 + y01 * y01;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x1,y1).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n      else if (!(l01_2 > epsilon));\n\n      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n      // Equivalently, is (x1,y1) coincident with (x2,y2)?\n      // Or, is the radius zero? Line to (x1,y1).\n      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n        this._.push(\n          \"L\", this._x1 = x1, \",\", this._y1 = y1\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        var x20 = x2 - x0,\n            y20 = y2 - y0,\n            l21_2 = x21 * x21 + y21 * y21,\n            l20_2 = x20 * x20 + y20 * y20,\n            l21 = Math.sqrt(l21_2),\n            l01 = Math.sqrt(l01_2),\n            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n            t01 = l / l01,\n            t21 = l / l21;\n\n        // If the start tangent is not coincident with (x0,y0), line to.\n        if (Math.abs(t01 - 1) > epsilon) {\n          this._.push(\n            \"L\", x1 + t01 * x01, \",\", y1 + t01 * y01\n          );\n        }\n\n        this._.push(\n          \"A\", r, \",\", r, \",0,0,\", +(y01 * x20 > x01 * y20), \",\", this._x1 = x1 + t21 * x21, \",\", this._y1 = y1 + t21 * y21\n        );\n      }\n    },\n    arc: function(x, y, r, a0, a1, ccw) {\n      x = +x, y = +y, r = +r;\n      var dx = r * Math.cos(a0),\n          dy = r * Math.sin(a0),\n          x0 = x + dx,\n          y0 = y + dy,\n          cw = 1 ^ ccw,\n          da = ccw ? a0 - a1 : a1 - a0;\n\n      // Is the radius negative? Error.\n      if (r < 0) throw new Error(\"negative radius: \" + r);\n\n      // Is this path empty? Move to (x0,y0).\n      if (this._x1 === null) {\n        this._.push(\n          \"M\", x0, \",\", y0\n        );\n      }\n\n      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n        this._.push(\n          \"L\", x0, \",\", y0\n        );\n      }\n\n      // Is this arc empty? We’re done.\n      if (!r) return;\n\n      // Is this a complete circle? Draw two arcs to complete the circle.\n      if (da > tauEpsilon) {\n        this._.push(\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", x - dx, \",\", y - dy,\n          \"A\", r, \",\", r, \",0,1,\", cw, \",\", this._x1 = x0, \",\", this._y1 = y0\n        );\n      }\n\n      // Otherwise, draw an arc!\n      else {\n        if (da < 0) da = da % tau$1 + tau$1;\n        this._.push(\n          \"A\", r, \",\", r, \",0,\", +(da >= pi$1), \",\", cw, \",\", this._x1 = x + r * Math.cos(a1), \",\", this._y1 = y + r * Math.sin(a1)\n        );\n      }\n    },\n    rect: function(x, y, w, h) {\n      this._.push(\"M\", this._x0 = this._x1 = +x, \",\", this._y0 = this._y1 = +y, \"h\", +w, \"v\", +h, \"h\", -w, \"Z\");\n    },\n    toString: function() {\n      return this._.join(\"\");\n    }\n  };\n\n  function tree_add(d) {\n    var x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n    return add(this.cover(x, y), x, y, d);\n  }\n\n  function add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n    var parent,\n        node = tree._root,\n        leaf = {data: d},\n        x0 = tree._x0,\n        y0 = tree._y0,\n        x1 = tree._x1,\n        y1 = tree._y1,\n        xm,\n        ym,\n        xp,\n        yp,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n\n    // Find the existing leaf for the new point, or add it.\n    while (node.length) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n  }\n\n  function addAll(data) {\n    var d, i, n = data.length,\n        x,\n        y,\n        xz = new Array(n),\n        yz = new Array(n),\n        x0 = Infinity,\n        y0 = Infinity,\n        x1 = -Infinity,\n        y1 = -Infinity;\n\n    // Compute the points and their extent.\n    for (i = 0; i < n; ++i) {\n      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n      xz[i] = x;\n      yz[i] = y;\n      if (x < x0) x0 = x;\n      if (x > x1) x1 = x;\n      if (y < y0) y0 = y;\n      if (y > y1) y1 = y;\n    }\n\n    // If there were no (valid) points, inherit the existing extent.\n    if (x1 < x0) x0 = this._x0, x1 = this._x1;\n    if (y1 < y0) y0 = this._y0, y1 = this._y1;\n\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n\n    // Add the new points.\n    for (i = 0; i < n; ++i) {\n      add(this, xz[i], yz[i], data[i]);\n    }\n\n    return this;\n  }\n\n  function tree_cover(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n    var x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1;\n\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n      x1 = (x0 = Math.floor(x)) + 1;\n      y1 = (y0 = Math.floor(y)) + 1;\n    }\n\n    // Otherwise, double repeatedly to cover.\n    else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n        case 0: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n          break;\n        }\n        case 1: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n          break;\n        }\n        case 2: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n          break;\n        }\n        case 3: {\n          do parent = new Array(4), parent[i] = node, node = parent;\n          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n          break;\n        }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    }\n\n    // If the quadtree covers the point already, just return.\n    else return this;\n\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n  }\n\n  function tree_data() {\n    var data = [];\n    this.visit(function(node) {\n      if (!node.length) do data.push(node.data); while (node = node.next)\n    });\n    return data;\n  }\n\n  function tree_extent(_) {\n    return arguments.length\n        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n  }\n\n  function Quad(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  function tree_find(x, y, radius) {\n    var data,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1,\n        y1,\n        x2,\n        y2,\n        x3 = this._x1,\n        y3 = this._y1,\n        quads = [],\n        node = this._root,\n        q,\n        i;\n\n    if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n      x0 = x - radius, y0 = y - radius;\n      x3 = x + radius, y3 = y + radius;\n      radius *= radius;\n    }\n\n    while (q = quads.pop()) {\n\n      // Stop searching if this quadrant can’t contain a closer node.\n      if (!(node = q.node)\n          || (x1 = q.x0) > x3\n          || (y1 = q.y0) > y3\n          || (x2 = q.x1) < x0\n          || (y2 = q.y1) < y0) continue;\n\n      // Bisect the current quadrant.\n      if (node.length) {\n        var xm = (x1 + x2) / 2,\n            ym = (y1 + y2) / 2;\n\n        quads.push(\n          new Quad(node[3], xm, ym, x2, y2),\n          new Quad(node[2], x1, ym, xm, y2),\n          new Quad(node[1], xm, y1, x2, ym),\n          new Quad(node[0], x1, y1, xm, ym)\n        );\n\n        // Visit the closest quadrant first.\n        if (i = (y >= ym) << 1 | (x >= xm)) {\n          q = quads[quads.length - 1];\n          quads[quads.length - 1] = quads[quads.length - 1 - i];\n          quads[quads.length - 1 - i] = q;\n        }\n      }\n\n      // Visit this point. (Visiting coincident points isn’t necessary!)\n      else {\n        var dx = x - +this._x.call(null, node.data),\n            dy = y - +this._y.call(null, node.data),\n            d2 = dx * dx + dy * dy;\n        if (d2 < radius) {\n          var d = Math.sqrt(radius = d2);\n          x0 = x - d, y0 = y - d;\n          x3 = x + d, y3 = y + d;\n          data = node.data;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function tree_remove(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n    var parent,\n        node = this._root,\n        retainer,\n        previous,\n        next,\n        x0 = this._x0,\n        y0 = this._y0,\n        x1 = this._x1,\n        y1 = this._y1,\n        x,\n        y,\n        xm,\n        ym,\n        right,\n        bottom,\n        i,\n        j;\n\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while (true) {\n      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n      if (!node.length) break;\n      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n    }\n\n    // Find the point to remove.\n    while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n        && node === (parent[3] || parent[2] || parent[1] || parent[0])\n        && !node.length) {\n      if (retainer) retainer[j] = node;\n      else this._root = node;\n    }\n\n    return this;\n  }\n\n  function removeAll(data) {\n    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n    return this;\n  }\n\n  function tree_root() {\n    return this._root;\n  }\n\n  function tree_size() {\n    var size = 0;\n    this.visit(function(node) {\n      if (!node.length) do ++size; while (node = node.next)\n    });\n    return size;\n  }\n\n  function tree_visit(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      }\n    }\n    return this;\n  }\n\n  function tree_visitAfter(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n    while (q = quads.pop()) {\n      var node = q.node;\n      if (node.length) {\n        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      }\n      next.push(q);\n    }\n    while (q = next.pop()) {\n      callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    }\n    return this;\n  }\n\n  function defaultX(d) {\n    return d[0];\n  }\n\n  function tree_x(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n  }\n\n  function defaultY(d) {\n    return d[1];\n  }\n\n  function tree_y(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n  }\n\n  function quadtree(nodes, x, y) {\n    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n  }\n\n  function Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n  }\n\n  function leaf_copy(leaf) {\n    var copy = {data: leaf.data}, next = copy;\n    while (leaf = leaf.next) next = next.next = {data: leaf.data};\n    return copy;\n  }\n\n  var treeProto = quadtree.prototype = Quadtree.prototype;\n\n  treeProto.copy = function() {\n    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n        node = this._root,\n        nodes,\n        child;\n\n    if (!node) return copy;\n\n    if (!node.length) return copy._root = leaf_copy(node), copy;\n\n    nodes = [{source: node, target: copy._root = new Array(4)}];\n    while (node = nodes.pop()) {\n      for (var i = 0; i < 4; ++i) {\n        if (child = node.source[i]) {\n          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n          else node.target[i] = leaf_copy(child);\n        }\n      }\n    }\n\n    return copy;\n  };\n\n  treeProto.add = tree_add;\n  treeProto.addAll = addAll;\n  treeProto.cover = tree_cover;\n  treeProto.data = tree_data;\n  treeProto.extent = tree_extent;\n  treeProto.find = tree_find;\n  treeProto.remove = tree_remove;\n  treeProto.removeAll = removeAll;\n  treeProto.root = tree_root;\n  treeProto.size = tree_size;\n  treeProto.visit = tree_visit;\n  treeProto.visitAfter = tree_visitAfter;\n  treeProto.x = tree_x;\n  treeProto.y = tree_y;\n\n  var slice$1 = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    if (!(size >= 1)) throw new Error;\n    this._size = size;\n    this._call =\n    this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting =\n    this._active =\n    this._ended =\n    this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      if (this._error != null) return this;\n      var t = slice$1.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function() {\n      if (this._error == null) abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) try { start(q); } // let the current task complete\n    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function(e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);\n        else maybeNotify(q);\n      }\n    };\n  }\n\n  function abort(q, e) {\n    var i = q._tasks.length, t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) try { t.abort(); }\n        catch (e) { /* ignore */ }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) q._call(q._error, q._data);\n  }\n\n  function queue(concurrency) {\n    return new Queue(arguments.length ? +concurrency : Infinity);\n  }\n\n  function constant$1(x) {\n    return function constant() {\n      return x;\n    };\n  }\n\n  var epsilon$1 = 1e-12;\n  var pi$2 = Math.PI;\n  var halfPi$1 = pi$2 / 2;\n  var tau$2 = 2 * pi$2;\n\n  function arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n\n  function arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n\n  function arcStartAngle(d) {\n    return d.startAngle;\n  }\n\n  function arcEndAngle(d) {\n    return d.endAngle;\n  }\n\n  function arcPadAngle(d) {\n    return d && d.padAngle; // Note: optional!\n  }\n\n  function asin(x) {\n    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);\n  }\n\n  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var x10 = x1 - x0, y10 = y1 - y0,\n        x32 = x3 - x2, y32 = y3 - y2,\n        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n    return [x0 + t * x10, y0 + t * y10];\n  }\n\n  // Compute perpendicular offset line of length rc.\n  // http://mathworld.wolfram.com/Circle-LineIntersection.html\n  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n    var x01 = x0 - x1,\n        y01 = y0 - y1,\n        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),\n        ox = lo * y01,\n        oy = -lo * x01,\n        x11 = x0 + ox,\n        y11 = y0 + oy,\n        x10 = x1 + ox,\n        y10 = y1 + oy,\n        x00 = (x11 + x10) / 2,\n        y00 = (y11 + y10) / 2,\n        dx = x10 - x11,\n        dy = y10 - y11,\n        d2 = dx * dx + dy * dy,\n        r = r1 - rc,\n        D = x11 * y10 - x10 * y11,\n        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),\n        cx0 = (D * dy - dx * d) / d2,\n        cy0 = (-D * dx - dy * d) / d2,\n        cx1 = (D * dy + dx * d) / d2,\n        cy1 = (-D * dx + dy * d) / d2,\n        dx0 = cx0 - x00,\n        dy0 = cy0 - y00,\n        dx1 = cx1 - x00,\n        dy1 = cy1 - y00;\n\n    // Pick the closer of the two intersection points.\n    // TODO Is there a faster way to determine which intersection to use?\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n    return {\n      cx: cx0,\n      cy: cy0,\n      x01: -ox,\n      y01: -oy,\n      x11: cx0 * (r1 / r - 1),\n      y11: cy0 * (r1 / r - 1)\n    };\n  }\n\n  function arc() {\n    var innerRadius = arcInnerRadius,\n        outerRadius = arcOuterRadius,\n        cornerRadius = constant$1(0),\n        padRadius = null,\n        startAngle = arcStartAngle,\n        endAngle = arcEndAngle,\n        padAngle = arcPadAngle,\n        context = null;\n\n    function arc() {\n      var buffer,\n          r,\n          r0 = +innerRadius.apply(this, arguments),\n          r1 = +outerRadius.apply(this, arguments),\n          a0 = startAngle.apply(this, arguments) - halfPi$1,\n          a1 = endAngle.apply(this, arguments) - halfPi$1,\n          da = Math.abs(a1 - a0),\n          cw = a1 > a0;\n\n      if (!context) context = buffer = path();\n\n      // Ensure that the outer radius is always larger than the inner radius.\n      if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n      // Is it a point?\n      if (!(r1 > epsilon$1)) context.moveTo(0, 0);\n\n      // Or is it a circle or annulus?\n      else if (da > tau$2 - epsilon$1) {\n        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));\n        context.arc(0, 0, r1, a0, a1, !cw);\n        if (r0 > epsilon$1) {\n          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));\n          context.arc(0, 0, r0, a1, a0, cw);\n        }\n      }\n\n      // Or is it a circular or annular sector?\n      else {\n        var a01 = a0,\n            a11 = a1,\n            a00 = a0,\n            a10 = a1,\n            da0 = da,\n            da1 = da,\n            ap = padAngle.apply(this, arguments) / 2,\n            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),\n            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n            rc0 = rc,\n            rc1 = rc,\n            t0,\n            t1;\n\n        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n        if (rp > epsilon$1) {\n          var p0 = asin(rp / r0 * Math.sin(ap)),\n              p1 = asin(rp / r1 * Math.sin(ap));\n          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n          else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n          else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n        }\n\n        var x01 = r1 * Math.cos(a01),\n            y01 = r1 * Math.sin(a01),\n            x10 = r0 * Math.cos(a10),\n            y10 = r0 * Math.sin(a10);\n\n        // Apply rounded corners?\n        if (rc > epsilon$1) {\n          var x11 = r1 * Math.cos(a11),\n              y11 = r1 * Math.sin(a11),\n              x00 = r0 * Math.cos(a00),\n              y00 = r0 * Math.sin(a00);\n\n          // Restrict the corner radius according to the sector angle.\n          if (da < pi$2) {\n            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n                ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),\n                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n          }\n        }\n\n        // Is the sector collapsed to a line?\n        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);\n\n        // Does the sector’s outer ring have rounded corners?\n        else if (rc1 > epsilon$1) {\n          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the outer ring just a circular arc?\n        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n        // Is there no inner ring, and it’s a circular sector?\n        // Or perhaps it’s an annular sector collapsed due to padding?\n        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);\n\n        // Does the sector’s inner ring (or point) have rounded corners?\n        else if (rc0 > epsilon$1) {\n          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n          // Have the corners merged?\n          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);\n\n          // Otherwise, draw the two corners and the ring.\n          else {\n            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);\n            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);\n          }\n        }\n\n        // Or is the inner ring just a circular arc?\n        else context.arc(0, 0, r0, a10, a00, cw);\n      }\n\n      context.closePath();\n\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;\n      return [Math.cos(a) * r, Math.sin(a) * r];\n    };\n\n    arc.innerRadius = function(_) {\n      return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : innerRadius;\n    };\n\n    arc.outerRadius = function(_) {\n      return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : outerRadius;\n    };\n\n    arc.cornerRadius = function(_) {\n      return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant$1(+_), arc) : cornerRadius;\n    };\n\n    arc.padRadius = function(_) {\n      return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), arc) : padRadius;\n    };\n\n    arc.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : startAngle;\n    };\n\n    arc.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : endAngle;\n    };\n\n    arc.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), arc) : padAngle;\n    };\n\n    arc.context = function(_) {\n      return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n    };\n\n    return arc;\n  }\n\n  function Linear(context) {\n    this._context = context;\n  }\n\n  Linear.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: this._context.lineTo(x, y); break;\n      }\n    }\n  };\n\n  function curveLinear(context) {\n    return new Linear(context);\n  }\n\n  function x(p) {\n    return p[0];\n  }\n\n  function y(p) {\n    return p[1];\n  }\n\n  function line() {\n    var x$$ = x,\n        y$$ = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function line(data) {\n      var i,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer;\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) output.lineStart();\n          else output.lineEnd();\n        }\n        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    line.x = function(_) {\n      return arguments.length ? (x$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : x$$;\n    };\n\n    line.y = function(_) {\n      return arguments.length ? (y$$ = typeof _ === \"function\" ? _ : constant$1(+_), line) : y$$;\n    };\n\n    line.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), line) : defined;\n    };\n\n    line.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n    };\n\n    line.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n    };\n\n    return line;\n  }\n\n  function area$1() {\n    var x0 = x,\n        x1 = null,\n        y0 = constant$1(0),\n        y1 = y,\n        defined = constant$1(true),\n        context = null,\n        curve = curveLinear,\n        output = null;\n\n    function area(data) {\n      var i,\n          j,\n          k,\n          n = data.length,\n          d,\n          defined0 = false,\n          buffer,\n          x0z = new Array(n),\n          y0z = new Array(n);\n\n      if (context == null) output = curve(buffer = path());\n\n      for (i = 0; i <= n; ++i) {\n        if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n          if (defined0 = !defined0) {\n            j = i;\n            output.areaStart();\n            output.lineStart();\n          } else {\n            output.lineEnd();\n            output.lineStart();\n            for (k = i - 1; k >= j; --k) {\n              output.point(x0z[k], y0z[k]);\n            }\n            output.lineEnd();\n            output.areaEnd();\n          }\n        }\n        if (defined0) {\n          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n        }\n      }\n\n      if (buffer) return output = null, buffer + \"\" || null;\n    }\n\n    function arealine() {\n      return line().defined(defined).curve(curve).context(context);\n    }\n\n    area.x = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), x1 = null, area) : x0;\n    };\n\n    area.x0 = function(_) {\n      return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : x0;\n    };\n\n    area.x1 = function(_) {\n      return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : x1;\n    };\n\n    area.y = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), y1 = null, area) : y0;\n    };\n\n    area.y0 = function(_) {\n      return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant$1(+_), area) : y0;\n    };\n\n    area.y1 = function(_) {\n      return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant$1(+_), area) : y1;\n    };\n\n    area.lineX0 =\n    area.lineY0 = function() {\n      return arealine().x(x0).y(y0);\n    };\n\n    area.lineY1 = function() {\n      return arealine().x(x0).y(y1);\n    };\n\n    area.lineX1 = function() {\n      return arealine().x(x1).y(y0);\n    };\n\n    area.defined = function(_) {\n      return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant$1(!!_), area) : defined;\n    };\n\n    area.curve = function(_) {\n      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n    };\n\n    area.context = function(_) {\n      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n    };\n\n    return area;\n  }\n\n  function descending$1(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  }\n\n  function identity$1(d) {\n    return d;\n  }\n\n  function pie() {\n    var value = identity$1,\n        sortValues = descending$1,\n        sort = null,\n        startAngle = constant$1(0),\n        endAngle = constant$1(tau$2),\n        padAngle = constant$1(0);\n\n    function pie(data) {\n      var i,\n          n = data.length,\n          j,\n          k,\n          sum = 0,\n          index = new Array(n),\n          arcs = new Array(n),\n          a0 = +startAngle.apply(this, arguments),\n          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),\n          a1,\n          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n          pa = p * (da < 0 ? -1 : 1),\n          v;\n\n      for (i = 0; i < n; ++i) {\n        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n          sum += v;\n        }\n      }\n\n      // Optionally sort the arcs by previously-computed values or by data.\n      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n      // Compute the arcs! They are stored in the original data's order.\n      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n          data: data[j],\n          index: i,\n          value: v,\n          startAngle: a0,\n          endAngle: a1,\n          padAngle: p\n        };\n      }\n\n      return arcs;\n    }\n\n    pie.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), pie) : value;\n    };\n\n    pie.sortValues = function(_) {\n      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n    };\n\n    pie.sort = function(_) {\n      return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n    };\n\n    pie.startAngle = function(_) {\n      return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : startAngle;\n    };\n\n    pie.endAngle = function(_) {\n      return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : endAngle;\n    };\n\n    pie.padAngle = function(_) {\n      return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant$1(+_), pie) : padAngle;\n    };\n\n    return pie;\n  }\n\n  var curveRadialLinear = curveRadial(curveLinear);\n\n  function Radial(curve) {\n    this._curve = curve;\n  }\n\n  Radial.prototype = {\n    areaStart: function() {\n      this._curve.areaStart();\n    },\n    areaEnd: function() {\n      this._curve.areaEnd();\n    },\n    lineStart: function() {\n      this._curve.lineStart();\n    },\n    lineEnd: function() {\n      this._curve.lineEnd();\n    },\n    point: function(a, r) {\n      this._curve.point(r * Math.sin(a), r * -Math.cos(a));\n    }\n  };\n\n  function curveRadial(curve) {\n\n    function radial(context) {\n      return new Radial(curve(context));\n    }\n\n    radial._curve = curve;\n\n    return radial;\n  }\n\n  function radialLine(l) {\n    var c = l.curve;\n\n    l.angle = l.x, delete l.x;\n    l.radius = l.y, delete l.y;\n\n    l.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return l;\n  }\n\n  function radialLine$1() {\n    return radialLine(line().curve(curveRadialLinear));\n  }\n\n  function radialArea() {\n    var a = area$1().curve(curveRadialLinear),\n        c = a.curve,\n        x0 = a.lineX0,\n        x1 = a.lineX1,\n        y0 = a.lineY0,\n        y1 = a.lineY1;\n\n    a.angle = a.x, delete a.x;\n    a.startAngle = a.x0, delete a.x0;\n    a.endAngle = a.x1, delete a.x1;\n    a.radius = a.y, delete a.y;\n    a.innerRadius = a.y0, delete a.y0;\n    a.outerRadius = a.y1, delete a.y1;\n    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;\n    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;\n    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;\n    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;\n\n    a.curve = function(_) {\n      return arguments.length ? c(curveRadial(_)) : c()._curve;\n    };\n\n    return a;\n  }\n\n  var circle = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / pi$2);\n      context.moveTo(r, 0);\n      context.arc(0, 0, r, 0, tau$2);\n    }\n  };\n\n  var cross$1 = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / 5) / 2;\n      context.moveTo(-3 * r, -r);\n      context.lineTo(-r, -r);\n      context.lineTo(-r, -3 * r);\n      context.lineTo(r, -3 * r);\n      context.lineTo(r, -r);\n      context.lineTo(3 * r, -r);\n      context.lineTo(3 * r, r);\n      context.lineTo(r, r);\n      context.lineTo(r, 3 * r);\n      context.lineTo(-r, 3 * r);\n      context.lineTo(-r, r);\n      context.lineTo(-3 * r, r);\n      context.closePath();\n    }\n  };\n\n  var tan30 = Math.sqrt(1 / 3);\n  var tan30_2 = tan30 * 2;\n  var diamond = {\n    draw: function(context, size) {\n      var y = Math.sqrt(size / tan30_2),\n          x = y * tan30;\n      context.moveTo(0, -y);\n      context.lineTo(x, 0);\n      context.lineTo(0, y);\n      context.lineTo(-x, 0);\n      context.closePath();\n    }\n  };\n\n  var ka = 0.89081309152928522810;\n  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);\n  var kx = Math.sin(tau$2 / 10) * kr;\n  var ky = -Math.cos(tau$2 / 10) * kr;\n  var star = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size * ka),\n          x = kx * r,\n          y = ky * r;\n      context.moveTo(0, -r);\n      context.lineTo(x, y);\n      for (var i = 1; i < 5; ++i) {\n        var a = tau$2 * i / 5,\n            c = Math.cos(a),\n            s = Math.sin(a);\n        context.lineTo(s * r, -c * r);\n        context.lineTo(c * x - s * y, s * x + c * y);\n      }\n      context.closePath();\n    }\n  };\n\n  var square = {\n    draw: function(context, size) {\n      var w = Math.sqrt(size),\n          x = -w / 2;\n      context.rect(x, x, w, w);\n    }\n  };\n\n  var sqrt3 = Math.sqrt(3);\n\n  var triangle = {\n    draw: function(context, size) {\n      var y = -Math.sqrt(size / (sqrt3 * 3));\n      context.moveTo(0, y * 2);\n      context.lineTo(-sqrt3 * y, -y);\n      context.lineTo(sqrt3 * y, -y);\n      context.closePath();\n    }\n  };\n\n  var c = -0.5;\n  var s = Math.sqrt(3) / 2;\n  var k = 1 / Math.sqrt(12);\n  var a = (k / 2 + 1) * 3;\n  var wye = {\n    draw: function(context, size) {\n      var r = Math.sqrt(size / a),\n          x0 = r / 2,\n          y0 = r * k,\n          x1 = x0,\n          y1 = r * k + r,\n          x2 = -x1,\n          y2 = y1;\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);\n      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);\n      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);\n      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);\n      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);\n      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);\n      context.closePath();\n    }\n  };\n\n  var symbols = [\n    circle,\n    cross$1,\n    diamond,\n    square,\n    star,\n    triangle,\n    wye\n  ];\n\n  function symbol() {\n    var type = constant$1(circle),\n        size = constant$1(64),\n        context = null;\n\n    function symbol() {\n      var buffer;\n      if (!context) context = buffer = path();\n      type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n      if (buffer) return context = null, buffer + \"\" || null;\n    }\n\n    symbol.type = function(_) {\n      return arguments.length ? (type = typeof _ === \"function\" ? _ : constant$1(_), symbol) : type;\n    };\n\n    symbol.size = function(_) {\n      return arguments.length ? (size = typeof _ === \"function\" ? _ : constant$1(+_), symbol) : size;\n    };\n\n    symbol.context = function(_) {\n      return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n    };\n\n    return symbol;\n  }\n\n  function noop() {}\n\n  function point(that, x, y) {\n    that._context.bezierCurveTo(\n      (2 * that._x0 + that._x1) / 3,\n      (2 * that._y0 + that._y1) / 3,\n      (that._x0 + 2 * that._x1) / 3,\n      (that._y0 + 2 * that._y1) / 3,\n      (that._x0 + 4 * that._x1 + x) / 6,\n      (that._y0 + 4 * that._y1 + y) / 6\n    );\n  }\n\n  function Basis(context) {\n    this._context = context;\n  }\n\n  Basis.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 3: point(this, this._x1, this._y1); // proceed\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basis(context) {\n    return new Basis(context);\n  }\n\n  function BasisClosed(context) {\n    this._context = context;\n  }\n\n  BasisClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x2, this._y2);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);\n          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x2, this._y2);\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;\n        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;\n        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisClosed(context) {\n    return new BasisClosed(context);\n  }\n\n  function BasisOpen(context) {\n    this._context = context;\n  }\n\n  BasisOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;\n        case 3: this._point = 4; // proceed\n        default: point(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n    }\n  };\n\n  function basisOpen(context) {\n    return new BasisOpen(context);\n  }\n\n  function Bundle(context, beta) {\n    this._basis = new Basis(context);\n    this._beta = beta;\n  }\n\n  Bundle.prototype = {\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n      this._basis.lineStart();\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          j = x.length - 1;\n\n      if (j > 0) {\n        var x0 = x[0],\n            y0 = y[0],\n            dx = x[j] - x0,\n            dy = y[j] - y0,\n            i = -1,\n            t;\n\n        while (++i <= j) {\n          t = i / j;\n          this._basis.point(\n            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),\n            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)\n          );\n        }\n      }\n\n      this._x = this._y = null;\n      this._basis.lineEnd();\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  var bundle = (function custom(beta) {\n\n    function bundle(context) {\n      return beta === 1 ? new Basis(context) : new Bundle(context, beta);\n    }\n\n    bundle.beta = function(beta) {\n      return custom(+beta);\n    };\n\n    return bundle;\n  })(0.85);\n\n  function point$1(that, x, y) {\n    that._context.bezierCurveTo(\n      that._x1 + that._k * (that._x2 - that._x0),\n      that._y1 + that._k * (that._y2 - that._y0),\n      that._x2 + that._k * (that._x1 - x),\n      that._y2 + that._k * (that._y1 - y),\n      that._x2,\n      that._y2\n    );\n  }\n\n  function Cardinal(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  Cardinal.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: point$1(this, this._x1, this._y1); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n        case 2: this._point = 3; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinal = (function custom(tension) {\n\n    function cardinal(context) {\n      return new Cardinal(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalClosed(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalClosed = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalClosed(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function CardinalOpen(context, tension) {\n    this._context = context;\n    this._k = (1 - tension) / 6;\n  }\n\n  CardinalOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$1(this, x, y); break;\n      }\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var cardinalOpen = (function custom(tension) {\n\n    function cardinal(context) {\n      return new CardinalOpen(context, tension);\n    }\n\n    cardinal.tension = function(tension) {\n      return custom(+tension);\n    };\n\n    return cardinal;\n  })(0);\n\n  function point$2(that, x, y) {\n    var x1 = that._x1,\n        y1 = that._y1,\n        x2 = that._x2,\n        y2 = that._y2;\n\n    if (that._l01_a > epsilon$1) {\n      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,\n          n = 3 * that._l01_a * (that._l01_a + that._l12_a);\n      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;\n      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;\n    }\n\n    if (that._l23_a > epsilon$1) {\n      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,\n          m = 3 * that._l23_a * (that._l23_a + that._l12_a);\n      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;\n      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;\n    }\n\n    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);\n  }\n\n  function CatmullRom(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRom.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x2, this._y2); break;\n        case 3: this.point(this, this._x2, this._y2); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRom = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomClosed(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =\n      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 1: {\n          this._context.moveTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 2: {\n          this._context.lineTo(this._x3, this._y3);\n          this._context.closePath();\n          break;\n        }\n        case 3: {\n          this.point(this._x3, this._y3);\n          this.point(this._x4, this._y4);\n          this.point(this._x5, this._y5);\n          break;\n        }\n      }\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;\n        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;\n        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomClosed = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function CatmullRomOpen(context, alpha) {\n    this._context = context;\n    this._alpha = alpha;\n  }\n\n  CatmullRomOpen.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 = this._x2 =\n      this._y0 = this._y1 = this._y2 = NaN;\n      this._l01_a = this._l12_a = this._l23_a =\n      this._l01_2a = this._l12_2a = this._l23_2a =\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n\n      if (this._point) {\n        var x23 = this._x2 - x,\n            y23 = this._y2 - y;\n        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));\n      }\n\n      switch (this._point) {\n        case 0: this._point = 1; break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;\n        case 3: this._point = 4; // proceed\n        default: point$2(this, x, y); break;\n      }\n\n      this._l01_a = this._l12_a, this._l12_a = this._l23_a;\n      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;\n      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n    }\n  };\n\n  var catmullRomOpen = (function custom(alpha) {\n\n    function catmullRom(context) {\n      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);\n    }\n\n    catmullRom.alpha = function(alpha) {\n      return custom(+alpha);\n    };\n\n    return catmullRom;\n  })(0.5);\n\n  function LinearClosed(context) {\n    this._context = context;\n  }\n\n  LinearClosed.prototype = {\n    areaStart: noop,\n    areaEnd: noop,\n    lineStart: function() {\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (this._point) this._context.closePath();\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      if (this._point) this._context.lineTo(x, y);\n      else this._point = 1, this._context.moveTo(x, y);\n    }\n  };\n\n  function linearClosed(context) {\n    return new LinearClosed(context);\n  }\n\n  function sign(x) {\n    return x < 0 ? -1 : 1;\n  }\n\n  // Calculate the slopes of the tangents (Hermite-type interpolation) based on\n  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n  // NOV(II), P. 443, 1990.\n  function slope3(that, x2, y2) {\n    var h0 = that._x1 - that._x0,\n        h1 = x2 - that._x1,\n        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n        p = (s0 * h1 + s1 * h0) / (h0 + h1);\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n  }\n\n  // Calculate a one-sided slope.\n  function slope2(that, t) {\n    var h = that._x1 - that._x0;\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n  }\n\n  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n  // \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\n  function point$3(that, t0, t1) {\n    var x0 = that._x0,\n        y0 = that._y0,\n        x1 = that._x1,\n        y1 = that._y1,\n        dx = (x1 - x0) / 3;\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n  }\n\n  function MonotoneX(context) {\n    this._context = context;\n  }\n\n  MonotoneX.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x0 = this._x1 =\n      this._y0 = this._y1 =\n      this._t0 = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      switch (this._point) {\n        case 2: this._context.lineTo(this._x1, this._y1); break;\n        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;\n      }\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      var t1 = NaN;\n\n      x = +x, y = +y;\n      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; break;\n        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;\n      }\n\n      this._x0 = this._x1, this._x1 = x;\n      this._y0 = this._y1, this._y1 = y;\n      this._t0 = t1;\n    }\n  }\n\n  function MonotoneY(context) {\n    this._context = new ReflectContext(context);\n  }\n\n  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n    MonotoneX.prototype.point.call(this, y, x);\n  };\n\n  function ReflectContext(context) {\n    this._context = context;\n  }\n\n  ReflectContext.prototype = {\n    moveTo: function(x, y) { this._context.moveTo(y, x); },\n    closePath: function() { this._context.closePath(); },\n    lineTo: function(x, y) { this._context.lineTo(y, x); },\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n  };\n\n  function monotoneX(context) {\n    return new MonotoneX(context);\n  }\n\n  function monotoneY(context) {\n    return new MonotoneY(context);\n  }\n\n  function Natural(context) {\n    this._context = context;\n  }\n\n  Natural.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = [];\n      this._y = [];\n    },\n    lineEnd: function() {\n      var x = this._x,\n          y = this._y,\n          n = x.length;\n\n      if (n) {\n        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n        if (n === 2) {\n          this._context.lineTo(x[1], y[1]);\n        } else {\n          var px = controlPoints(x),\n              py = controlPoints(y);\n          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n          }\n        }\n      }\n\n      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n      this._line = 1 - this._line;\n      this._x = this._y = null;\n    },\n    point: function(x, y) {\n      this._x.push(+x);\n      this._y.push(+y);\n    }\n  };\n\n  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.\n  function controlPoints(x) {\n    var i,\n        n = x.length - 1,\n        m,\n        a = new Array(n),\n        b = new Array(n),\n        r = new Array(n);\n    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n    a[n - 1] = r[n - 1] / b[n - 1];\n    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n    b[n - 1] = (x[n] + a[n - 1]) / 2;\n    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n    return [a, b];\n  }\n\n  function natural(context) {\n    return new Natural(context);\n  }\n\n  function Step(context, t) {\n    this._context = context;\n    this._t = t;\n  }\n\n  Step.prototype = {\n    areaStart: function() {\n      this._line = 0;\n    },\n    areaEnd: function() {\n      this._line = NaN;\n    },\n    lineStart: function() {\n      this._x = this._y = NaN;\n      this._point = 0;\n    },\n    lineEnd: function() {\n      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n    },\n    point: function(x, y) {\n      x = +x, y = +y;\n      switch (this._point) {\n        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n        case 1: this._point = 2; // proceed\n        default: {\n          if (this._t <= 0) {\n            this._context.lineTo(this._x, y);\n            this._context.lineTo(x, y);\n          } else {\n            var x1 = this._x * (1 - this._t) + x * this._t;\n            this._context.lineTo(x1, this._y);\n            this._context.lineTo(x1, y);\n          }\n          break;\n        }\n      }\n      this._x = x, this._y = y;\n    }\n  };\n\n  function step(context) {\n    return new Step(context, 0.5);\n  }\n\n  function stepBefore(context) {\n    return new Step(context, 0);\n  }\n\n  function stepAfter(context) {\n    return new Step(context, 1);\n  }\n\n  var slice$2 = Array.prototype.slice;\n\n  function none(series, order) {\n    if (!((n = series.length) > 1)) return;\n    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n      s0 = s1, s1 = series[order[i]];\n      for (var j = 0; j < m; ++j) {\n        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n      }\n    }\n  }\n\n  function none$1(series) {\n    var n = series.length, o = new Array(n);\n    while (--n >= 0) o[n] = n;\n    return o;\n  }\n\n  function stackValue(d, key) {\n    return d[key];\n  }\n\n  function stack() {\n    var keys = constant$1([]),\n        order = none$1,\n        offset = none,\n        value = stackValue;\n\n    function stack(data) {\n      var kz = keys.apply(this, arguments),\n          i,\n          m = data.length,\n          n = kz.length,\n          sz = new Array(n),\n          oz;\n\n      for (i = 0; i < n; ++i) {\n        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n          si[j] = sij = [0, +value(data[j], ki, j, data)];\n          sij.data = data[j];\n        }\n        si.key = ki;\n      }\n\n      for (i = 0, oz = order(sz); i < n; ++i) {\n        sz[oz[i]].index = i;\n      }\n\n      offset(sz, oz);\n      return sz;\n    }\n\n    stack.keys = function(_) {\n      return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : keys;\n    };\n\n    stack.value = function(_) {\n      return arguments.length ? (value = typeof _ === \"function\" ? _ : constant$1(+_), stack) : value;\n    };\n\n    stack.order = function(_) {\n      return arguments.length ? (order = _ == null ? none$1 : typeof _ === \"function\" ? _ : constant$1(slice$2.call(_)), stack) : order;\n    };\n\n    stack.offset = function(_) {\n      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;\n    };\n\n    return stack;\n  }\n\n  function expand(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {\n      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;\n      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;\n    }\n    none(series, order);\n  }\n\n  function silhouette(series, order) {\n    if (!((n = series.length) > 0)) return;\n    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {\n      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;\n      s0[j][1] += s0[j][0] = -y / 2;\n    }\n    none(series, order);\n  }\n\n  function wiggle(series, order) {\n    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;\n    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {\n      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {\n        var si = series[order[i]],\n            sij0 = si[j][1] || 0,\n            sij1 = si[j - 1][1] || 0,\n            s3 = (sij0 - sij1) / 2;\n        for (var k = 0; k < i; ++k) {\n          var sk = series[order[k]],\n              skj0 = sk[j][1] || 0,\n              skj1 = sk[j - 1][1] || 0;\n          s3 += skj0 - skj1;\n        }\n        s1 += sij0, s2 += s3 * sij0;\n      }\n      s0[j - 1][1] += s0[j - 1][0] = y;\n      if (s1) y -= s2 / s1;\n    }\n    s0[j - 1][1] += s0[j - 1][0] = y;\n    none(series, order);\n  }\n\n  function ascending$1(series) {\n    var sums = series.map(sum$1);\n    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });\n  }\n\n  function sum$1(series) {\n    var s = 0, i = -1, n = series.length, v;\n    while (++i < n) if (v = +series[i][1]) s += v;\n    return s;\n  }\n\n  function descending$2(series) {\n    return ascending$1(series).reverse();\n  }\n\n  function insideOut(series) {\n    var n = series.length,\n        i,\n        j,\n        sums = series.map(sum$1),\n        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n        top = 0,\n        bottom = 0,\n        tops = [],\n        bottoms = [];\n\n    for (i = 0; i < n; ++i) {\n      j = order[i];\n      if (top < bottom) {\n        top += sums[j];\n        tops.push(j);\n      } else {\n        bottom += sums[j];\n        bottoms.push(j);\n      }\n    }\n\n    return bottoms.reverse().concat(tops);\n  }\n\n  function reverse(series) {\n    return none$1(series).reverse();\n  }\n\n  function define(constructor, factory, prototype) {\n    constructor.prototype = factory.prototype = prototype;\n    prototype.constructor = constructor;\n  }\n\n  function extend(parent, definition) {\n    var prototype = Object.create(parent.prototype);\n    for (var key in definition) prototype[key] = definition[key];\n    return prototype;\n  }\n\n  function Color() {}\n\n  var darker = 0.7;\n  var brighter = 1 / darker;\n\n  var reHex3 = /^#([0-9a-f]{3})$/;\n  var reHex6 = /^#([0-9a-f]{6})$/;\n  var reRgbInteger = /^rgb\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*\\)$/;\n  var reRgbPercent = /^rgb\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reRgbaInteger = /^rgba\\(\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reRgbaPercent = /^rgba\\(\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var reHslPercent = /^hsl\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n  var reHslaPercent = /^hsla\\(\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)%\\s*,\\s*([-+]?\\d+(?:\\.\\d+)?)\\s*\\)$/;\n  var named = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32\n  };\n\n  define(Color, color, {\n    displayable: function() {\n      return this.rgb().displayable();\n    },\n    toString: function() {\n      return this.rgb() + \"\";\n    }\n  });\n\n  function color(format) {\n    var m;\n    format = (format + \"\").trim().toLowerCase();\n    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n        : named.hasOwnProperty(format) ? rgbn(named[format])\n        : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n        : null;\n  }\n\n  function rgbn(n) {\n    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n  }\n\n  function rgba(r, g, b, a) {\n    if (a <= 0) r = g = b = NaN;\n    return new Rgb(r, g, b, a);\n  }\n\n  function rgbConvert(o) {\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Rgb;\n    o = o.rgb();\n    return new Rgb(o.r, o.g, o.b, o.opacity);\n  }\n\n  function colorRgb(r, g, b, opacity) {\n    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n  }\n\n  function Rgb(r, g, b, opacity) {\n    this.r = +r;\n    this.g = +g;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Rgb, colorRgb, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n    },\n    rgb: function() {\n      return this;\n    },\n    displayable: function() {\n      return (0 <= this.r && this.r <= 255)\n          && (0 <= this.g && this.g <= 255)\n          && (0 <= this.b && this.b <= 255)\n          && (0 <= this.opacity && this.opacity <= 1);\n    },\n    toString: function() {\n      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n      return (a === 1 ? \"rgb(\" : \"rgba(\")\n          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n          + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n          + (a === 1 ? \")\" : \", \" + a + \")\");\n    }\n  }));\n\n  function hsla(h, s, l, a) {\n    if (a <= 0) h = s = l = NaN;\n    else if (l <= 0 || l >= 1) h = s = NaN;\n    else if (s <= 0) h = NaN;\n    return new Hsl(h, s, l, a);\n  }\n\n  function hslConvert(o) {\n    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Color)) o = color(o);\n    if (!o) return new Hsl;\n    if (o instanceof Hsl) return o;\n    o = o.rgb();\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        min = Math.min(r, g, b),\n        max = Math.max(r, g, b),\n        h = NaN,\n        s = max - min,\n        l = (max + min) / 2;\n    if (s) {\n      if (r === max) h = (g - b) / s + (g < b) * 6;\n      else if (g === max) h = (b - r) / s + 2;\n      else h = (r - g) / s + 4;\n      s /= l < 0.5 ? max + min : 2 - max - min;\n      h *= 60;\n    } else {\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new Hsl(h, s, l, o.opacity);\n  }\n\n  function colorHsl(h, s, l, opacity) {\n    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hsl(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hsl, colorHsl, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Hsl(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = this.h % 360 + (this.h < 0) * 360,\n          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n          l = this.l,\n          m2 = l + (l < 0.5 ? l : 1 - l) * s,\n          m1 = 2 * l - m2;\n      return new Rgb(\n        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n        hsl2rgb(h, m1, m2),\n        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n        this.opacity\n      );\n    },\n    displayable: function() {\n      return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n          && (0 <= this.l && this.l <= 1)\n          && (0 <= this.opacity && this.opacity <= 1);\n    }\n  }));\n\n  /* From FvD 13.37, CSS Color Module Level 3 */\n  function hsl2rgb(h, m1, m2) {\n    return (h < 60 ? m1 + (m2 - m1) * h / 60\n        : h < 180 ? m2\n        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n        : m1) * 255;\n  }\n\n  var deg2rad = Math.PI / 180;\n  var rad2deg = 180 / Math.PI;\n\n  var Kn = 18;\n  var Xn = 0.950470;\n  var Yn = 1;\n  var Zn = 1.088830;\n  var t0 = 4 / 29;\n  var t1 = 6 / 29;\n  var t2 = 3 * t1 * t1;\n  var t3 = t1 * t1 * t1;\n  function labConvert(o) {\n    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n    if (o instanceof Hcl) {\n      var h = o.h * deg2rad;\n      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n    }\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var b = rgb2xyz(o.r),\n        a = rgb2xyz(o.g),\n        l = rgb2xyz(o.b),\n        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),\n        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),\n        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);\n    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n  }\n\n  function lab(l, a, b, opacity) {\n    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n  }\n\n  function Lab(l, a, b, opacity) {\n    this.l = +l;\n    this.a = +a;\n    this.b = +b;\n    this.opacity = +opacity;\n  }\n\n  define(Lab, lab, extend(Color, {\n    brighter: function(k) {\n      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    darker: function(k) {\n      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);\n    },\n    rgb: function() {\n      var y = (this.l + 16) / 116,\n          x = isNaN(this.a) ? y : y + this.a / 500,\n          z = isNaN(this.b) ? y : y - this.b / 200;\n      y = Yn * lab2xyz(y);\n      x = Xn * lab2xyz(x);\n      z = Zn * lab2xyz(z);\n      return new Rgb(\n        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB\n        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),\n        this.opacity\n      );\n    }\n  }));\n\n  function xyz2lab(t) {\n    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n  }\n\n  function lab2xyz(t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n  }\n\n  function xyz2rgb(x) {\n    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n  }\n\n  function rgb2xyz(x) {\n    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n  }\n\n  function hclConvert(o) {\n    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n    if (!(o instanceof Lab)) o = labConvert(o);\n    var h = Math.atan2(o.b, o.a) * rad2deg;\n    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n  }\n\n  function colorHcl(h, c, l, opacity) {\n    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n  }\n\n  function Hcl(h, c, l, opacity) {\n    this.h = +h;\n    this.c = +c;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Hcl, colorHcl, extend(Color, {\n    brighter: function(k) {\n      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);\n    },\n    darker: function(k) {\n      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);\n    },\n    rgb: function() {\n      return labConvert(this).rgb();\n    }\n  }));\n\n  var A = -0.14861;\n  var B = +1.78277;\n  var C = -0.29227;\n  var D = -0.90649;\n  var E = +1.97294;\n  var ED = E * D;\n  var EB = E * B;\n  var BC_DA = B * C - D * A;\n  function cubehelixConvert(o) {\n    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n    if (!(o instanceof Rgb)) o = rgbConvert(o);\n    var r = o.r / 255,\n        g = o.g / 255,\n        b = o.b / 255,\n        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n        bl = b - l,\n        k = (E * (g - l) - C * bl) / D,\n        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n  }\n\n  function cubehelix(h, s, l, opacity) {\n    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n  }\n\n  function Cubehelix(h, s, l, opacity) {\n    this.h = +h;\n    this.s = +s;\n    this.l = +l;\n    this.opacity = +opacity;\n  }\n\n  define(Cubehelix, cubehelix, extend(Color, {\n    brighter: function(k) {\n      k = k == null ? brighter : Math.pow(brighter, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    darker: function(k) {\n      k = k == null ? darker : Math.pow(darker, k);\n      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n    },\n    rgb: function() {\n      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n          l = +this.l,\n          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n          cosh = Math.cos(h),\n          sinh = Math.sin(h);\n      return new Rgb(\n        255 * (l + a * (A * cosh + B * sinh)),\n        255 * (l + a * (C * cosh + D * sinh)),\n        255 * (l + a * (E * cosh)),\n        this.opacity\n      );\n    }\n  }));\n\n  function basis$1(t1, v0, v1, v2, v3) {\n    var t2 = t1 * t1, t3 = t2 * t1;\n    return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n        + (4 - 6 * t2 + 3 * t3) * v1\n        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n        + t3 * v3) / 6;\n  }\n\n  function basis$2(values) {\n    var n = values.length - 1;\n    return function(t) {\n      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n          v1 = values[i],\n          v2 = values[i + 1],\n          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function basisClosed$1(values) {\n    var n = values.length;\n    return function(t) {\n      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n          v0 = values[(i + n - 1) % n],\n          v1 = values[i % n],\n          v2 = values[(i + 1) % n],\n          v3 = values[(i + 2) % n];\n      return basis$1((t - i / n) * n, v0, v1, v2, v3);\n    };\n  }\n\n  function constant$2(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function linear$1(a, d) {\n    return function(t) {\n      return a + t * d;\n    };\n  }\n\n  function exponential$1(a, b, y) {\n    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n      return Math.pow(a + t * b, y);\n    };\n  }\n\n  function hue(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  function gamma(y) {\n    return (y = +y) === 1 ? nogamma : function(a, b) {\n      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);\n    };\n  }\n\n  function nogamma(a, b) {\n    var d = b - a;\n    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);\n  }\n\n  var interpolateRgb = (function rgbGamma(y) {\n    var color = gamma(y);\n\n    function rgb(start, end) {\n      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n          g = color(start.g, end.g),\n          b = color(start.b, end.b),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.r = r(t);\n        start.g = g(t);\n        start.b = b(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    rgb.gamma = rgbGamma;\n\n    return rgb;\n  })(1);\n\n  function rgbSpline(spline) {\n    return function(colors) {\n      var n = colors.length,\n          r = new Array(n),\n          g = new Array(n),\n          b = new Array(n),\n          i, color;\n      for (i = 0; i < n; ++i) {\n        color = colorRgb(colors[i]);\n        r[i] = color.r || 0;\n        g[i] = color.g || 0;\n        b[i] = color.b || 0;\n      }\n      r = spline(r);\n      g = spline(g);\n      b = spline(b);\n      color.opacity = 1;\n      return function(t) {\n        color.r = r(t);\n        color.g = g(t);\n        color.b = b(t);\n        return color + \"\";\n      };\n    };\n  }\n\n  var rgbBasis = rgbSpline(basis$2);\n  var rgbBasisClosed = rgbSpline(basisClosed$1);\n\n  function array$1(a, b) {\n    var nb = b ? b.length : 0,\n        na = a ? Math.min(nb, a.length) : 0,\n        x = new Array(nb),\n        c = new Array(nb),\n        i;\n\n    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);\n    for (; i < nb; ++i) c[i] = b[i];\n\n    return function(t) {\n      for (i = 0; i < na; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n\n  function interpolateNumber(a, b) {\n    return a = +a, b -= a, function(t) {\n      return a + b * t;\n    };\n  }\n\n  function object(a, b) {\n    var i = {},\n        c = {},\n        k;\n\n    if (a === null || typeof a !== \"object\") a = {};\n    if (b === null || typeof b !== \"object\") b = {};\n\n    for (k in b) {\n      if (k in a) {\n        i[k] = interpolate(a[k], b[k]);\n      } else {\n        c[k] = b[k];\n      }\n    }\n\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n\n  var reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;\n  var reB = new RegExp(reA.source, \"g\");\n  function zero(b) {\n    return function() {\n      return b;\n    };\n  }\n\n  function one(b) {\n    return function(t) {\n      return b(t) + \"\";\n    };\n  }\n\n  function interpolateString(a, b) {\n    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n        am, // current match in a\n        bm, // current match in b\n        bs, // string preceding current number in b, if any\n        i = -1, // index in s\n        s = [], // string constants and placeholders\n        q = []; // number interpolators\n\n    // Coerce inputs to strings.\n    a = a + \"\", b = b + \"\";\n\n    // Interpolate pairs of numbers in a & b.\n    while ((am = reA.exec(a))\n        && (bm = reB.exec(b))) {\n      if ((bs = bm.index) > bi) { // a string precedes the next number in b\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; // coalesce with previous string\n        else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n        if (s[i]) s[i] += bm; // coalesce with previous string\n        else s[++i] = bm;\n      } else { // interpolate non-matching numbers\n        s[++i] = null;\n        q.push({i: i, x: interpolateNumber(am, bm)});\n      }\n      bi = reB.lastIndex;\n    }\n\n    // Add remains of b.\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    // Special optimization for only a single match.\n    // Otherwise, interpolate each of the numbers and rejoin the string.\n    return s.length < 2 ? (q[0]\n        ? one(q[0].x)\n        : zero(b))\n        : (b = q.length, function(t) {\n            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n            return s.join(\"\");\n          });\n  }\n\n  function interpolate(a, b) {\n    var t = typeof b, c;\n    return b == null || t === \"boolean\" ? constant$2(b)\n        : (t === \"number\" ? interpolateNumber\n        : t === \"string\" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)\n        : b instanceof color ? interpolateRgb\n        : Array.isArray(b) ? array$1\n        : object)(a, b);\n  }\n\n  function interpolateRound(a, b) {\n    return a = +a, b -= a, function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n\n  var degrees = 180 / Math.PI;\n\n  var identity$2 = {\n    translateX: 0,\n    translateY: 0,\n    rotate: 0,\n    skewX: 0,\n    scaleX: 1,\n    scaleY: 1\n  };\n\n  function decompose(a, b, c, d, e, f) {\n    var scaleX, scaleY, skewX;\n    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n    return {\n      translateX: e,\n      translateY: f,\n      rotate: Math.atan2(b, a) * degrees,\n      skewX: Math.atan(skewX) * degrees,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var cssNode;\n  var cssRoot;\n  var cssView;\n  var svgNode;\n  function parseCss(value) {\n    if (value === \"none\") return identity$2;\n    if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n    cssNode.style.transform = value;\n    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n    cssRoot.removeChild(cssNode);\n    var m = value.slice(7, -1).split(\",\");\n    return decompose(+m[0], +m[1], +m[2], +m[3], +m[4], +m[5]);\n  }\n\n  function parseSvg(value) {\n    if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    svgNode.setAttribute(\"transform\", value == null ? \"\" : value);\n    var m = svgNode.transform.baseVal.consolidate().matrix;\n    return decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n  }\n\n  function interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n    function pop(s) {\n      return s.length ? s.pop() + \" \" : \"\";\n    }\n\n    function translate(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb || yb) {\n        s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n      }\n    }\n\n    function rotate(a, b, s, q) {\n      if (a !== b) {\n        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n        q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"rotate(\" + b + degParen);\n      }\n    }\n\n    function skewX(a, b, s, q) {\n      if (a !== b) {\n        q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: interpolateNumber(a, b)});\n      } else if (b) {\n        s.push(pop(s) + \"skewX(\" + b + degParen);\n      }\n    }\n\n    function scale(xa, ya, xb, yb, s, q) {\n      if (xa !== xb || ya !== yb) {\n        var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});\n      } else if (xb !== 1 || yb !== 1) {\n        s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n      }\n    }\n\n    return function(a, b) {\n      var s = [], // string constants and placeholders\n          q = []; // number interpolators\n      a = parse(a), b = parse(b);\n      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n      rotate(a.rotate, b.rotate, s, q);\n      skewX(a.skewX, b.skewX, s, q);\n      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n      a = b = null; // gc\n      return function(t) {\n        var i = -1, n = q.length, o;\n        while (++i < n) s[(o = q[i]).i] = o.x(t);\n        return s.join(\"\");\n      };\n    };\n  }\n\n  var interpolateTransform$1 = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\n  var interpolateTransform$2 = interpolateTransform(parseSvg, \", \", \")\", \")\");\n\n  var rho = Math.SQRT2;\n  var rho2 = 2;\n  var rho4 = 4;\n  var epsilon2 = 1e-12;\n  function cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n\n  function sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n\n  function tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function interpolateZoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000;\n\n    return i;\n  }\n\n  function hsl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n          s = nogamma(start.s, end.s),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hsl$1 = hsl(hue);\n  var hslLong = hsl(nogamma);\n\n  function lab$1(start, end) {\n    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),\n        a = nogamma(start.a, end.a),\n        b = nogamma(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.l = l(t);\n      start.a = a(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  function hcl(hue) {\n    return function(start, end) {\n      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n          c = nogamma(start.c, end.c),\n          l = nogamma(start.l, end.l),\n          opacity = nogamma(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.c = c(t);\n        start.l = l(t);\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n  }\n\n  var hcl$1 = hcl(hue);\n  var hclLong = hcl(nogamma);\n\n  function cubehelix$1(hue) {\n    return (function cubehelixGamma(y) {\n      y = +y;\n\n      function cubehelix$$(start, end) {\n        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),\n            s = nogamma(start.s, end.s),\n            l = nogamma(start.l, end.l),\n            opacity = nogamma(start.opacity, end.opacity);\n        return function(t) {\n          start.h = h(t);\n          start.s = s(t);\n          start.l = l(Math.pow(t, y));\n          start.opacity = opacity(t);\n          return start + \"\";\n        };\n      }\n\n      cubehelix$$.gamma = cubehelixGamma;\n\n      return cubehelix$$;\n    })(1);\n  }\n\n  var cubehelix$2 = cubehelix$1(hue);\n  var interpolateCubehelixLong = cubehelix$1(nogamma);\n\n  function quantize(interpolate, n) {\n    var samples = new Array(n);\n    for (var i = 0; i < n; ++i) samples[i] = interpolate(i / (n - 1));\n    return samples;\n  }\n\n  var noop$1 = {value: function() {}};\n\n  function dispatch() {\n    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n      if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n      _[t] = [];\n    }\n    return new Dispatch(_);\n  }\n\n  function Dispatch(_) {\n    this._ = _;\n  }\n\n  function parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n      return {type: t, name: name};\n    });\n  }\n\n  Dispatch.prototype = dispatch.prototype = {\n    constructor: Dispatch,\n    on: function(typename, callback) {\n      var _ = this._,\n          T = parseTypenames(typename + \"\", _),\n          t,\n          i = -1,\n          n = T.length;\n\n      // If no callback was specified, return the callback of the given type and name.\n      if (arguments.length < 2) {\n        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n        return;\n      }\n\n      // If a type was specified, set the callback for the given type and name.\n      // Otherwise, if a null callback was specified, remove callbacks of the given name.\n      if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n      while (++i < n) {\n        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);\n        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);\n      }\n\n      return this;\n    },\n    copy: function() {\n      var copy = {}, _ = this._;\n      for (var t in _) copy[t] = _[t].slice();\n      return new Dispatch(copy);\n    },\n    call: function(type, that) {\n      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n      if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n    }\n  };\n\n  function get(type, name) {\n    for (var i = 0, n = type.length, c; i < n; ++i) {\n      if ((c = type[i]).name === name) {\n        return c.value;\n      }\n    }\n  }\n\n  function set$1(type, name, callback) {\n    for (var i = 0, n = type.length; i < n; ++i) {\n      if (type[i].name === name) {\n        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n      }\n    }\n    if (callback != null) type.push({name: name, value: callback});\n    return type;\n  }\n\n  function objectConverter(columns) {\n    return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n      return JSON.stringify(name) + \": d[\" + i + \"]\";\n    }).join(\",\") + \"}\");\n  }\n\n  function customConverter(columns, f) {\n    var object = objectConverter(columns);\n    return function(row, i) {\n      return f(object(row), i, columns);\n    };\n  }\n\n  // Compute unique columns in order of discovery.\n  function inferColumns(rows) {\n    var columnSet = Object.create(null),\n        columns = [];\n\n    rows.forEach(function(row) {\n      for (var column in row) {\n        if (!(column in columnSet)) {\n          columns.push(columnSet[column] = column);\n        }\n      }\n    });\n\n    return columns;\n  }\n\n  function dsv(delimiter) {\n    var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n]\"),\n        delimiterCode = delimiter.charCodeAt(0);\n\n    function parse(text, f) {\n      var convert, columns, rows = parseRows(text, function(row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n      rows.columns = columns;\n      return rows;\n    }\n\n    function parseRows(text, f) {\n      var EOL = {}, // sentinel value for end-of-line\n          EOF = {}, // sentinel value for end-of-file\n          rows = [], // output rows\n          N = text.length,\n          I = 0, // current character index\n          n = 0, // the current line number\n          t, // the current token\n          eol; // is the current token followed by EOL?\n\n      function token() {\n        if (I >= N) return EOF; // special case: end of file\n        if (eol) return eol = false, EOL; // special case: end of line\n\n        // special case: quotes\n        var j = I, c;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, \"\\\"\");\n        }\n\n        // common case: find next delimiter or newline\n        while (I < N) {\n          var k = 1;\n          c = text.charCodeAt(I++);\n          if (c === 10) eol = true; // \\n\n          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \\r|\\r\\n\n          else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n\n        // special case: last token before EOF\n        return text.slice(j);\n      }\n\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n\n      return rows;\n    }\n\n    function format(rows, columns) {\n      if (columns == null) columns = inferColumns(rows);\n      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n        return columns.map(function(column) {\n          return formatValue(row[column]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    }\n\n    function formatRows(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    }\n\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n\n    function formatValue(text) {\n      return text == null ? \"\"\n          : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\\\"/g, \"\\\"\\\"\") + \"\\\"\"\n          : text;\n    }\n\n    return {\n      parse: parse,\n      parseRows: parseRows,\n      format: format,\n      formatRows: formatRows\n    };\n  }\n\n  var csv = dsv(\",\");\n\n  var csvParse = csv.parse;\n  var csvParseRows = csv.parseRows;\n  var csvFormat = csv.format;\n  var csvFormatRows = csv.formatRows;\n\n  var tsv = dsv(\"\\t\");\n\n  var tsvParse = tsv.parse;\n  var tsvParseRows = tsv.parseRows;\n  var tsvFormat = tsv.format;\n  var tsvFormatRows = tsv.formatRows;\n\n  function request(url, callback) {\n    var request,\n        event = dispatch(\"beforesend\", \"progress\", \"load\", \"error\"),\n        mimeType,\n        headers = map$1(),\n        xhr = new XMLHttpRequest,\n        user = null,\n        password = null,\n        response,\n        responseType,\n        timeout = 0;\n\n    // If IE does not support CORS, use XDomainRequest.\n    if (typeof XDomainRequest !== \"undefined\"\n        && !(\"withCredentials\" in xhr)\n        && /^(http(s)?:)?\\/\\//.test(url)) xhr = new XDomainRequest;\n\n    \"onload\" in xhr\n        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond\n        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };\n\n    function respond(o) {\n      var status = xhr.status, result;\n      if (!status && hasResponse(xhr)\n          || status >= 200 && status < 300\n          || status === 304) {\n        if (response) {\n          try {\n            result = response.call(request, xhr);\n          } catch (e) {\n            event.call(\"error\", request, e);\n            return;\n          }\n        } else {\n          result = xhr;\n        }\n        event.call(\"load\", request, result);\n      } else {\n        event.call(\"error\", request, o);\n      }\n    }\n\n    xhr.onprogress = function(e) {\n      event.call(\"progress\", request, e);\n    };\n\n    request = {\n      header: function(name, value) {\n        name = (name + \"\").toLowerCase();\n        if (arguments.length < 2) return headers.get(name);\n        if (value == null) headers.remove(name);\n        else headers.set(name, value + \"\");\n        return request;\n      },\n\n      // If mimeType is non-null and no Accept header is set, a default is used.\n      mimeType: function(value) {\n        if (!arguments.length) return mimeType;\n        mimeType = value == null ? null : value + \"\";\n        return request;\n      },\n\n      // Specifies what type the response value should take;\n      // for instance, arraybuffer, blob, document, or text.\n      responseType: function(value) {\n        if (!arguments.length) return responseType;\n        responseType = value;\n        return request;\n      },\n\n      timeout: function(value) {\n        if (!arguments.length) return timeout;\n        timeout = +value;\n        return request;\n      },\n\n      user: function(value) {\n        return arguments.length < 1 ? user : (user = value == null ? null : value + \"\", request);\n      },\n\n      password: function(value) {\n        return arguments.length < 1 ? password : (password = value == null ? null : value + \"\", request);\n      },\n\n      // Specify how to convert the response content to a specific type;\n      // changes the callback value on \"load\" events.\n      response: function(value) {\n        response = value;\n        return request;\n      },\n\n      // Alias for send(\"GET\", …).\n      get: function(data, callback) {\n        return request.send(\"GET\", data, callback);\n      },\n\n      // Alias for send(\"POST\", …).\n      post: function(data, callback) {\n        return request.send(\"POST\", data, callback);\n      },\n\n      // If callback is non-null, it will be used for error and load events.\n      send: function(method, data, callback) {\n        if (!callback && typeof data === \"function\") callback = data, data = null;\n        if (callback && callback.length === 1) callback = fixCallback(callback);\n        xhr.open(method, url, true, user, password);\n        if (mimeType != null && !headers.has(\"accept\")) headers.set(\"accept\", mimeType + \",*/*\");\n        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });\n        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);\n        if (responseType != null) xhr.responseType = responseType;\n        if (timeout > 0) xhr.timeout = timeout;\n        if (callback) request.on(\"error\", callback).on(\"load\", function(xhr) { callback(null, xhr); });\n        event.call(\"beforesend\", request, xhr);\n        xhr.send(data == null ? null : data);\n        return request;\n      },\n\n      abort: function() {\n        xhr.abort();\n        return request;\n      },\n\n      on: function() {\n        var value = event.on.apply(event, arguments);\n        return value === event ? request : value;\n      }\n    };\n\n    return callback\n        ? request.get(callback)\n        : request;\n  }\n\n  function fixCallback(callback) {\n    return function(error, xhr) {\n      callback(error == null ? xhr : null);\n    };\n  }\n\n  function hasResponse(xhr) {\n    var type = xhr.responseType;\n    return type && type !== \"text\"\n        ? xhr.response // null on error\n        : xhr.responseText; // \"\" on error\n  }\n\n  function type(defaultMimeType, response) {\n    return function(url, callback) {\n      var r = request(url).mimeType(defaultMimeType).response(response);\n      return callback ? r.get(callback) : r;\n    };\n  }\n\n  var html = type(\"text/html\", function(xhr) {\n    return document.createRange().createContextualFragment(xhr.responseText);\n  });\n\n  var json = type(\"application/json\", function(xhr) {\n    return JSON.parse(xhr.responseText);\n  });\n\n  var text = type(\"text/plain\", function(xhr) {\n    return xhr.responseText;\n  });\n\n  var xml = type(\"application/xml\", function(xhr) {\n    var xml = xhr.responseXML;\n    if (!xml) throw new Error(\"parse error\");\n    return xml;\n  });\n\n  function dsv$1(defaultMimeType, parse) {\n    return function(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var r = request(url).mimeType(defaultMimeType);\n      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };\n      r.row(row);\n      return callback ? r.get(callback) : r;\n    };\n  }\n\n  function responseOf(parse, row) {\n    return function(request) {\n      return parse(request.responseText, row);\n    };\n  }\n\n  var csv$1 = dsv$1(\"text/csv\", csvParse);\n\n  var tsv$1 = dsv$1(\"text/tab-separated-values\", tsvParse);\n\n  var frame = 0;\n  var timeout = 0;\n  var interval = 0;\n  var pokeDelay = 1000;\n  var taskHead;\n  var taskTail;\n  var clockLast = 0;\n  var clockNow = 0;\n  var clockSkew = 0;\n  var clock = typeof performance === \"object\" ? performance : Date;\n  var setFrame = typeof requestAnimationFrame === \"function\"\n          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)\n          : function(f) { setTimeout(f, 17); };\n  function now() {\n    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n  }\n\n  function clearNow() {\n    clockNow = 0;\n  }\n\n  function Timer() {\n    this._call =\n    this._time =\n    this._next = null;\n  }\n\n  Timer.prototype = timer.prototype = {\n    constructor: Timer,\n    restart: function(callback, delay, time) {\n      if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n      if (!this._next && taskTail !== this) {\n        if (taskTail) taskTail._next = this;\n        else taskHead = this;\n        taskTail = this;\n      }\n      this._call = callback;\n      this._time = time;\n      sleep();\n    },\n    stop: function() {\n      if (this._call) {\n        this._call = null;\n        this._time = Infinity;\n        sleep();\n      }\n    }\n  };\n\n  function timer(callback, delay, time) {\n    var t = new Timer;\n    t.restart(callback, delay, time);\n    return t;\n  }\n\n  function timerFlush() {\n    now(); // Get the current time, if not already set.\n    ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = taskHead, e;\n    while (t) {\n      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n      t = t._next;\n    }\n    --frame;\n  }\n\n  function wake(time) {\n    clockNow = (clockLast = time || clock.now()) + clockSkew;\n    frame = timeout = 0;\n    try {\n      timerFlush();\n    } finally {\n      frame = 0;\n      nap();\n      clockNow = 0;\n    }\n  }\n\n  function poke$1() {\n    var now = clock.now(), delay = now - clockLast;\n    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n  }\n\n  function nap() {\n    var t0, t1 = taskHead, t2, time = Infinity;\n    while (t1) {\n      if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n      } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : taskHead = t2;\n      }\n    }\n    taskTail = t0;\n    sleep(time);\n  }\n\n  function sleep(time) {\n    if (frame) return; // Soonest alarm already set, or will be.\n    if (timeout) timeout = clearTimeout(timeout);\n    var delay = time - clockNow;\n    if (delay > 24) {\n      if (time < Infinity) timeout = setTimeout(wake, delay);\n      if (interval) interval = clearInterval(interval);\n    } else {\n      if (!interval) interval = setInterval(poke$1, pokeDelay);\n      frame = 1, setFrame(wake);\n    }\n  }\n\n  function timeout$1(callback, delay, time) {\n    var t = new Timer;\n    delay = delay == null ? 0 : +delay;\n    t.restart(function(elapsed) {\n      t.stop();\n      callback(elapsed + delay);\n    }, delay, time);\n    return t;\n  }\n\n  function interval$1(callback, delay, time) {\n    var t = new Timer, total = delay;\n    if (delay == null) return t.restart(callback, delay, time), t;\n    delay = +delay, time = time == null ? now() : +time;\n    t.restart(function tick(elapsed) {\n      elapsed += total;\n      t.restart(tick, total += delay, time);\n      callback(elapsed);\n    }, delay, time);\n    return t;\n  }\n\nvar   t0$1 = new Date;\nvar   t1$1 = new Date;\n  function newInterval(floori, offseti, count, field) {\n\n    function interval(date) {\n      return floori(date = new Date(+date)), date;\n    }\n\n    interval.floor = interval;\n\n    interval.ceil = function(date) {\n      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n    };\n\n    interval.round = function(date) {\n      var d0 = interval(date),\n          d1 = interval.ceil(date);\n      return date - d0 < d1 - date ? d0 : d1;\n    };\n\n    interval.offset = function(date, step) {\n      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n    };\n\n    interval.range = function(start, stop, step) {\n      var range = [];\n      start = interval.ceil(start);\n      step = step == null ? 1 : Math.floor(step);\n      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)\n      return range;\n    };\n\n    interval.filter = function(test) {\n      return newInterval(function(date) {\n        while (floori(date), !test(date)) date.setTime(date - 1);\n      }, function(date, step) {\n        while (--step >= 0) while (offseti(date, 1), !test(date));\n      });\n    };\n\n    if (count) {\n      interval.count = function(start, end) {\n        t0$1.setTime(+start), t1$1.setTime(+end);\n        floori(t0$1), floori(t1$1);\n        return Math.floor(count(t0$1, t1$1));\n      };\n\n      interval.every = function(step) {\n        step = Math.floor(step);\n        return !isFinite(step) || !(step > 0) ? null\n            : !(step > 1) ? interval\n            : interval.filter(field\n                ? function(d) { return field(d) % step === 0; }\n                : function(d) { return interval.count(0, d) % step === 0; });\n      };\n    }\n\n    return interval;\n  }\n\n  var millisecond = newInterval(function() {\n    // noop\n  }, function(date, step) {\n    date.setTime(+date + step);\n  }, function(start, end) {\n    return end - start;\n  });\n\n  // An optimized implementation for this simple case.\n  millisecond.every = function(k) {\n    k = Math.floor(k);\n    if (!isFinite(k) || !(k > 0)) return null;\n    if (!(k > 1)) return millisecond;\n    return newInterval(function(date) {\n      date.setTime(Math.floor(date / k) * k);\n    }, function(date, step) {\n      date.setTime(+date + step * k);\n    }, function(start, end) {\n      return (end - start) / k;\n    });\n  };\n\n  var milliseconds = millisecond.range;\n\n  var durationSecond = 1e3;\n  var durationMinute = 6e4;\n  var durationHour = 36e5;\n  var durationDay = 864e5;\n  var durationWeek = 6048e5;\n\n  var second = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationSecond) * durationSecond);\n  }, function(date, step) {\n    date.setTime(+date + step * durationSecond);\n  }, function(start, end) {\n    return (end - start) / durationSecond;\n  }, function(date) {\n    return date.getUTCSeconds();\n  });\n\n  var seconds = second.range;\n\n  var minute = newInterval(function(date) {\n    date.setTime(Math.floor(date / durationMinute) * durationMinute);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getMinutes();\n  });\n\n  var minutes = minute.range;\n\n  var hour = newInterval(function(date) {\n    var offset = date.getTimezoneOffset() * durationMinute % durationHour;\n    if (offset < 0) offset += durationHour;\n    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getHours();\n  });\n\n  var hours = hour.range;\n\n  var day = newInterval(function(date) {\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n\n  var days = day.range;\n\n  function weekday(i) {\n    return newInterval(function(date) {\n      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setDate(date.getDate() + step * 7);\n    }, function(start, end) {\n      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n    });\n  }\n\n  var timeWeek = weekday(0);\n  var timeMonday = weekday(1);\n  var tuesday = weekday(2);\n  var wednesday = weekday(3);\n  var thursday = weekday(4);\n  var friday = weekday(5);\n  var saturday = weekday(6);\n\n  var sundays = timeWeek.range;\n  var mondays = timeMonday.range;\n  var tuesdays = tuesday.range;\n  var wednesdays = wednesday.range;\n  var thursdays = thursday.range;\n  var fridays = friday.range;\n  var saturdays = saturday.range;\n\n  var month = newInterval(function(date) {\n    date.setDate(1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setMonth(date.getMonth() + step);\n  }, function(start, end) {\n    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n  }, function(date) {\n    return date.getMonth();\n  });\n\n  var months = month.range;\n\n  var year = newInterval(function(date) {\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step);\n  }, function(start, end) {\n    return end.getFullYear() - start.getFullYear();\n  }, function(date) {\n    return date.getFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  year.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n      date.setMonth(0, 1);\n      date.setHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setFullYear(date.getFullYear() + step * k);\n    });\n  };\n\n  var years = year.range;\n\n  var utcMinute = newInterval(function(date) {\n    date.setUTCSeconds(0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationMinute);\n  }, function(start, end) {\n    return (end - start) / durationMinute;\n  }, function(date) {\n    return date.getUTCMinutes();\n  });\n\n  var utcMinutes = utcMinute.range;\n\n  var utcHour = newInterval(function(date) {\n    date.setUTCMinutes(0, 0, 0);\n  }, function(date, step) {\n    date.setTime(+date + step * durationHour);\n  }, function(start, end) {\n    return (end - start) / durationHour;\n  }, function(date) {\n    return date.getUTCHours();\n  });\n\n  var utcHours = utcHour.range;\n\n  var utcDay = newInterval(function(date) {\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step);\n  }, function(start, end) {\n    return (end - start) / durationDay;\n  }, function(date) {\n    return date.getUTCDate() - 1;\n  });\n\n  var utcDays = utcDay.range;\n\n  function utcWeekday(i) {\n    return newInterval(function(date) {\n      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCDate(date.getUTCDate() + step * 7);\n    }, function(start, end) {\n      return (end - start) / durationWeek;\n    });\n  }\n\n  var utcWeek = utcWeekday(0);\n  var utcMonday = utcWeekday(1);\n  var utcTuesday = utcWeekday(2);\n  var utcWednesday = utcWeekday(3);\n  var utcThursday = utcWeekday(4);\n  var utcFriday = utcWeekday(5);\n  var utcSaturday = utcWeekday(6);\n\n  var utcSundays = utcWeek.range;\n  var utcMondays = utcMonday.range;\n  var utcTuesdays = utcTuesday.range;\n  var utcWednesdays = utcWednesday.range;\n  var utcThursdays = utcThursday.range;\n  var utcFridays = utcFriday.range;\n  var utcSaturdays = utcSaturday.range;\n\n  var utcMonth = newInterval(function(date) {\n    date.setUTCDate(1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCMonth(date.getUTCMonth() + step);\n  }, function(start, end) {\n    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n  }, function(date) {\n    return date.getUTCMonth();\n  });\n\n  var utcMonths = utcMonth.range;\n\n  var utcYear = newInterval(function(date) {\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step);\n  }, function(start, end) {\n    return end.getUTCFullYear() - start.getUTCFullYear();\n  }, function(date) {\n    return date.getUTCFullYear();\n  });\n\n  // An optimized implementation for this simple case.\n  utcYear.every = function(k) {\n    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {\n      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n      date.setUTCMonth(0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n    }, function(date, step) {\n      date.setUTCFullYear(date.getUTCFullYear() + step * k);\n    });\n  };\n\n  var utcYears = utcYear.range;\n\n  // Computes the decimal coefficient and exponent of the specified number x with\n  // significant digits p, where x is positive and p is in [1, 21] or undefined.\n  // For example, formatDecimal(1.23) returns [\"123\", 0].\n  function formatDecimal(x, p) {\n    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n    var i, coefficient = x.slice(0, i);\n\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n      +x.slice(i + 1)\n    ];\n  }\n\n  function exponent$1(x) {\n    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n  }\n\n  function formatGroup(grouping, thousands) {\n    return function(value, width) {\n      var i = value.length,\n          t = [],\n          j = 0,\n          g = grouping[0],\n          length = 0;\n\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = grouping[j = (j + 1) % grouping.length];\n      }\n\n      return t.reverse().join(thousands);\n    };\n  }\n\n  function formatDefault(x, p) {\n    x = x.toPrecision(p);\n\n    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {\n      switch (x[i]) {\n        case \".\": i0 = i1 = i; break;\n        case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n        case \"e\": break out;\n        default: if (i0 > 0) i0 = 0; break;\n      }\n    }\n\n    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;\n  }\n\n  var prefixExponent;\n\n  function formatPrefixAuto(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1],\n        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n        n = coefficient.length;\n    return i === n ? coefficient\n        : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n        : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n        : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n  }\n\n  function formatRounded(x, p) {\n    var d = formatDecimal(x, p);\n    if (!d) return x + \"\";\n    var coefficient = d[0],\n        exponent = d[1];\n    return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n        : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n  }\n\n  var formatTypes = {\n    \"\": formatDefault,\n    \"%\": function(x, p) { return (x * 100).toFixed(p); },\n    \"b\": function(x) { return Math.round(x).toString(2); },\n    \"c\": function(x) { return x + \"\"; },\n    \"d\": function(x) { return Math.round(x).toString(10); },\n    \"e\": function(x, p) { return x.toExponential(p); },\n    \"f\": function(x, p) { return x.toFixed(p); },\n    \"g\": function(x, p) { return x.toPrecision(p); },\n    \"o\": function(x) { return Math.round(x).toString(8); },\n    \"p\": function(x, p) { return formatRounded(x * 100, p); },\n    \"r\": formatRounded,\n    \"s\": formatPrefixAuto,\n    \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n    \"x\": function(x) { return Math.round(x).toString(16); }\n  };\n\n  // [[fill]align][sign][symbol][0][width][,][.precision][type]\n  var re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\n  function formatSpecifier(specifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  function FormatSpecifier(specifier) {\n    if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n    var match,\n        fill = match[1] || \" \",\n        align = match[2] || \">\",\n        sign = match[3] || \"-\",\n        symbol = match[4] || \"\",\n        zero = !!match[5],\n        width = match[6] && +match[6],\n        comma = !!match[7],\n        precision = match[8] && +match[8].slice(1),\n        type = match[9] || \"\";\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // Map invalid types to the default format.\n    else if (!formatTypes[type]) type = \"\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    this.fill = fill;\n    this.align = align;\n    this.sign = sign;\n    this.symbol = symbol;\n    this.zero = zero;\n    this.width = width;\n    this.comma = comma;\n    this.precision = precision;\n    this.type = type;\n  }\n\n  FormatSpecifier.prototype.toString = function() {\n    return this.fill\n        + this.align\n        + this.sign\n        + this.symbol\n        + (this.zero ? \"0\" : \"\")\n        + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n        + (this.comma ? \",\" : \"\")\n        + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n        + this.type;\n  };\n\n  var prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xB5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\n  function identity$3(x) {\n    return x;\n  }\n\n  var defaultLocale = formatLocale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [3],\n    currency: [\"$\", \"\"]\n  });\n\n  var format = defaultLocale.format;\n  var formatPrefix = defaultLocale.formatPrefix;\n\n  function formatLocale(locale) {\n    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,\n        currency = locale.currency,\n        decimal = locale.decimal;\n\n    function newFormat(specifier) {\n      specifier = formatSpecifier(specifier);\n\n      var fill = specifier.fill,\n          align = specifier.align,\n          sign = specifier.sign,\n          symbol = specifier.symbol,\n          zero = specifier.zero,\n          width = specifier.width,\n          comma = specifier.comma,\n          precision = specifier.precision,\n          type = specifier.type;\n\n      // Compute the prefix and suffix.\n      // For SI-prefix, the suffix is lazily computed.\n      var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n          suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? \"%\" : \"\";\n\n      // What format function should we use?\n      // Is this an integer type?\n      // Can this type generate exponential notation?\n      var formatType = formatTypes[type],\n          maybeSuffix = !type || /[defgprs%]/.test(type);\n\n      // Set the default precision if not specified,\n      // or clamp the specified precision to the supported range.\n      // For significant precision, it must be in [1, 21].\n      // For fixed precision, it must be in [0, 20].\n      precision = precision == null ? (type ? 6 : 12)\n          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n          : Math.max(0, Math.min(20, precision));\n\n      function format(value) {\n        var valuePrefix = prefix,\n            valueSuffix = suffix,\n            i, n, c;\n\n        if (type === \"c\") {\n          valueSuffix = formatType(value) + valueSuffix;\n          value = \"\";\n        } else {\n          value = +value;\n\n          // Convert negative to positive, and compute the prefix.\n          // Note that -0 is not less than 0, but 1 / -0 is!\n          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);\n\n          // Perform the initial formatting.\n          value = formatType(value, precision);\n\n          // If the original value was negative, it may be rounded to zero during\n          // formatting; treat this as (positive) zero.\n          if (valueNegative) {\n            i = -1, n = value.length;\n            valueNegative = false;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), (48 < c && c < 58)\n                  || (type === \"x\" && 96 < c && c < 103)\n                  || (type === \"X\" && 64 < c && c < 71)) {\n                valueNegative = true;\n                break;\n              }\n            }\n          }\n\n          // Compute the prefix and suffix.\n          valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n          valueSuffix = valueSuffix + (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n          // Break the formatted value into the integer “value” part that can be\n          // grouped, and fractional or exponential “suffix” part that is not.\n          if (maybeSuffix) {\n            i = -1, n = value.length;\n            while (++i < n) {\n              if (c = value.charCodeAt(i), 48 > c || c > 57) {\n                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                value = value.slice(0, i);\n                break;\n              }\n            }\n          }\n        }\n\n        // If the fill character is not \"0\", grouping is applied before padding.\n        if (comma && !zero) value = group(value, Infinity);\n\n        // Compute the padding.\n        var length = valuePrefix.length + value.length + valueSuffix.length,\n            padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n        // If the fill character is \"0\", grouping is applied after padding.\n        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n        // Reconstruct the final output based on the desired alignment.\n        switch (align) {\n          case \"<\": return valuePrefix + value + valueSuffix + padding;\n          case \"=\": return valuePrefix + padding + value + valueSuffix;\n          case \"^\": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n        }\n        return padding + valuePrefix + value + valueSuffix;\n      }\n\n      format.toString = function() {\n        return specifier + \"\";\n      };\n\n      return format;\n    }\n\n    function formatPrefix(specifier, value) {\n      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,\n          k = Math.pow(10, -e),\n          prefix = prefixes[8 + e / 3];\n      return function(value) {\n        return f(k * value) + prefix;\n      };\n    }\n\n    return {\n      format: newFormat,\n      formatPrefix: formatPrefix\n    };\n  }\n\n  function precisionFixed(step) {\n    return Math.max(0, -exponent$1(Math.abs(step)));\n  }\n\n  function precisionPrefix(step, value) {\n    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));\n  }\n\n  function precisionRound(step, max) {\n    step = Math.abs(step), max = Math.abs(max) - step;\n    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;\n  }\n\n  var defaultLocale$1 = formatLocale$1({\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [\"AM\", \"PM\"],\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  });\n\n  var timeFormat = defaultLocale$1.format;\n  var timeParse = defaultLocale$1.parse;\n  var utcFormat = defaultLocale$1.utcFormat;\n  var utcParse = defaultLocale$1.utcParse;\n\n  function localDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n      date.setFullYear(d.y);\n      return date;\n    }\n    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n  }\n\n  function utcDate(d) {\n    if (0 <= d.y && d.y < 100) {\n      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n      date.setUTCFullYear(d.y);\n      return date;\n    }\n    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n  }\n\n  function newYear(y) {\n    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n  }\n\n  function formatLocale$1(locale) {\n    var locale_dateTime = locale.dateTime,\n        locale_date = locale.date,\n        locale_time = locale.time,\n        locale_periods = locale.periods,\n        locale_weekdays = locale.days,\n        locale_shortWeekdays = locale.shortDays,\n        locale_months = locale.months,\n        locale_shortMonths = locale.shortMonths;\n\n    var periodRe = formatRe(locale_periods),\n        periodLookup = formatLookup(locale_periods),\n        weekdayRe = formatRe(locale_weekdays),\n        weekdayLookup = formatLookup(locale_weekdays),\n        shortWeekdayRe = formatRe(locale_shortWeekdays),\n        shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n        monthRe = formatRe(locale_months),\n        monthLookup = formatLookup(locale_months),\n        shortMonthRe = formatRe(locale_shortMonths),\n        shortMonthLookup = formatLookup(locale_shortMonths);\n\n    var formats = {\n      \"a\": formatShortWeekday,\n      \"A\": formatWeekday,\n      \"b\": formatShortMonth,\n      \"B\": formatMonth,\n      \"c\": null,\n      \"d\": formatDayOfMonth,\n      \"e\": formatDayOfMonth,\n      \"H\": formatHour24,\n      \"I\": formatHour12,\n      \"j\": formatDayOfYear,\n      \"L\": formatMilliseconds,\n      \"m\": formatMonthNumber,\n      \"M\": formatMinutes,\n      \"p\": formatPeriod,\n      \"S\": formatSeconds,\n      \"U\": formatWeekNumberSunday,\n      \"w\": formatWeekdayNumber,\n      \"W\": formatWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatYear,\n      \"Y\": formatFullYear,\n      \"Z\": formatZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var utcFormats = {\n      \"a\": formatUTCShortWeekday,\n      \"A\": formatUTCWeekday,\n      \"b\": formatUTCShortMonth,\n      \"B\": formatUTCMonth,\n      \"c\": null,\n      \"d\": formatUTCDayOfMonth,\n      \"e\": formatUTCDayOfMonth,\n      \"H\": formatUTCHour24,\n      \"I\": formatUTCHour12,\n      \"j\": formatUTCDayOfYear,\n      \"L\": formatUTCMilliseconds,\n      \"m\": formatUTCMonthNumber,\n      \"M\": formatUTCMinutes,\n      \"p\": formatUTCPeriod,\n      \"S\": formatUTCSeconds,\n      \"U\": formatUTCWeekNumberSunday,\n      \"w\": formatUTCWeekdayNumber,\n      \"W\": formatUTCWeekNumberMonday,\n      \"x\": null,\n      \"X\": null,\n      \"y\": formatUTCYear,\n      \"Y\": formatUTCFullYear,\n      \"Z\": formatUTCZone,\n      \"%\": formatLiteralPercent\n    };\n\n    var parses = {\n      \"a\": parseShortWeekday,\n      \"A\": parseWeekday,\n      \"b\": parseShortMonth,\n      \"B\": parseMonth,\n      \"c\": parseLocaleDateTime,\n      \"d\": parseDayOfMonth,\n      \"e\": parseDayOfMonth,\n      \"H\": parseHour24,\n      \"I\": parseHour24,\n      \"j\": parseDayOfYear,\n      \"L\": parseMilliseconds,\n      \"m\": parseMonthNumber,\n      \"M\": parseMinutes,\n      \"p\": parsePeriod,\n      \"S\": parseSeconds,\n      \"U\": parseWeekNumberSunday,\n      \"w\": parseWeekdayNumber,\n      \"W\": parseWeekNumberMonday,\n      \"x\": parseLocaleDate,\n      \"X\": parseLocaleTime,\n      \"y\": parseYear,\n      \"Y\": parseFullYear,\n      \"Z\": parseZone,\n      \"%\": parseLiteralPercent\n    };\n\n    // These recursive directive definitions must be deferred.\n    formats.x = newFormat(locale_date, formats);\n    formats.X = newFormat(locale_time, formats);\n    formats.c = newFormat(locale_dateTime, formats);\n    utcFormats.x = newFormat(locale_date, utcFormats);\n    utcFormats.X = newFormat(locale_time, utcFormats);\n    utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n    function newFormat(specifier, formats) {\n      return function(date) {\n        var string = [],\n            i = -1,\n            j = 0,\n            n = specifier.length,\n            c,\n            pad,\n            format;\n\n        if (!(date instanceof Date)) date = new Date(+date);\n\n        while (++i < n) {\n          if (specifier.charCodeAt(i) === 37) {\n            string.push(specifier.slice(j, i));\n            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n            else pad = c === \"e\" ? \" \" : \"0\";\n            if (format = formats[c]) c = format(date, pad);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n\n        string.push(specifier.slice(j, i));\n        return string.join(\"\");\n      };\n    }\n\n    function newParse(specifier, newDate) {\n      return function(string) {\n        var d = newYear(1900),\n            i = parseSpecifier(d, specifier, string += \"\", 0);\n        if (i != string.length) return null;\n\n        // The am-pm flag is 0 for AM, and 1 for PM.\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n        // Convert day-of-week and week-of-year to day-of-year.\n        if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          var day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n          d.m = 0;\n          d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n        }\n\n        // If a time zone is specified, all fields are interpreted as UTC and then\n        // offset according to the specified time zone.\n        if (\"Z\" in d) {\n          d.H += d.Z / 100 | 0;\n          d.M += d.Z % 100;\n          return utcDate(d);\n        }\n\n        // Otherwise, all fields are in local time.\n        return newDate(d);\n      };\n    }\n\n    function parseSpecifier(d, specifier, string, j) {\n      var i = 0,\n          n = specifier.length,\n          m = string.length,\n          c,\n          parse;\n\n      while (i < n) {\n        if (j >= m) return -1;\n        c = specifier.charCodeAt(i++);\n        if (c === 37) {\n          c = specifier.charAt(i++);\n          parse = parses[c in pads ? specifier.charAt(i++) : c];\n          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n\n      return j;\n    }\n\n    function parsePeriod(d, string, i) {\n      var n = periodRe.exec(string.slice(i));\n      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortWeekday(d, string, i) {\n      var n = shortWeekdayRe.exec(string.slice(i));\n      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseWeekday(d, string, i) {\n      var n = weekdayRe.exec(string.slice(i));\n      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseShortMonth(d, string, i) {\n      var n = shortMonthRe.exec(string.slice(i));\n      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseMonth(d, string, i) {\n      var n = monthRe.exec(string.slice(i));\n      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n    }\n\n    function parseLocaleDateTime(d, string, i) {\n      return parseSpecifier(d, locale_dateTime, string, i);\n    }\n\n    function parseLocaleDate(d, string, i) {\n      return parseSpecifier(d, locale_date, string, i);\n    }\n\n    function parseLocaleTime(d, string, i) {\n      return parseSpecifier(d, locale_time, string, i);\n    }\n\n    function formatShortWeekday(d) {\n      return locale_shortWeekdays[d.getDay()];\n    }\n\n    function formatWeekday(d) {\n      return locale_weekdays[d.getDay()];\n    }\n\n    function formatShortMonth(d) {\n      return locale_shortMonths[d.getMonth()];\n    }\n\n    function formatMonth(d) {\n      return locale_months[d.getMonth()];\n    }\n\n    function formatPeriod(d) {\n      return locale_periods[+(d.getHours() >= 12)];\n    }\n\n    function formatUTCShortWeekday(d) {\n      return locale_shortWeekdays[d.getUTCDay()];\n    }\n\n    function formatUTCWeekday(d) {\n      return locale_weekdays[d.getUTCDay()];\n    }\n\n    function formatUTCShortMonth(d) {\n      return locale_shortMonths[d.getUTCMonth()];\n    }\n\n    function formatUTCMonth(d) {\n      return locale_months[d.getUTCMonth()];\n    }\n\n    function formatUTCPeriod(d) {\n      return locale_periods[+(d.getUTCHours() >= 12)];\n    }\n\n    return {\n      format: function(specifier) {\n        var f = newFormat(specifier += \"\", formats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      parse: function(specifier) {\n        var p = newParse(specifier += \"\", localDate);\n        p.toString = function() { return specifier; };\n        return p;\n      },\n      utcFormat: function(specifier) {\n        var f = newFormat(specifier += \"\", utcFormats);\n        f.toString = function() { return specifier; };\n        return f;\n      },\n      utcParse: function(specifier) {\n        var p = newParse(specifier, utcDate);\n        p.toString = function() { return specifier; };\n        return p;\n      }\n    };\n  }\n\n  var pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"};\n  var numberRe = /^\\s*\\d+/;\n  var percentRe = /^%/;\n  var requoteRe = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  function pad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\",\n        string = (sign ? -value : value) + \"\",\n        length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n\n  function requote(s) {\n    return s.replace(requoteRe, \"\\\\$&\");\n  }\n\n  function formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n  }\n\n  function formatLookup(names) {\n    var map = {}, i = -1, n = names.length;\n    while (++i < n) map[names[i].toLowerCase()] = i;\n    return map;\n  }\n\n  function parseWeekdayNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 1));\n    return n ? (d.w = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberSunday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.U = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseWeekNumberMonday(d, string, i) {\n    var n = numberRe.exec(string.slice(i));\n    return n ? (d.W = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseFullYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 4));\n    return n ? (d.y = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n  }\n\n  function parseZone(d, string, i) {\n    var n = /^(Z)|([+-]\\d\\d)(?:\\:?(\\d\\d))?/.exec(string.slice(i, i + 6));\n    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n  }\n\n  function parseMonthNumber(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n  }\n\n  function parseDayOfMonth(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseDayOfYear(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseHour24(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.H = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMinutes(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.M = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseSeconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 2));\n    return n ? (d.S = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseMilliseconds(d, string, i) {\n    var n = numberRe.exec(string.slice(i, i + 3));\n    return n ? (d.L = +n[0], i + n[0].length) : -1;\n  }\n\n  function parseLiteralPercent(d, string, i) {\n    var n = percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n\n  function formatDayOfMonth(d, p) {\n    return pad(d.getDate(), p, 2);\n  }\n\n  function formatHour24(d, p) {\n    return pad(d.getHours(), p, 2);\n  }\n\n  function formatHour12(d, p) {\n    return pad(d.getHours() % 12 || 12, p, 2);\n  }\n\n  function formatDayOfYear(d, p) {\n    return pad(1 + day.count(year(d), d), p, 3);\n  }\n\n  function formatMilliseconds(d, p) {\n    return pad(d.getMilliseconds(), p, 3);\n  }\n\n  function formatMonthNumber(d, p) {\n    return pad(d.getMonth() + 1, p, 2);\n  }\n\n  function formatMinutes(d, p) {\n    return pad(d.getMinutes(), p, 2);\n  }\n\n  function formatSeconds(d, p) {\n    return pad(d.getSeconds(), p, 2);\n  }\n\n  function formatWeekNumberSunday(d, p) {\n    return pad(timeWeek.count(year(d), d), p, 2);\n  }\n\n  function formatWeekdayNumber(d) {\n    return d.getDay();\n  }\n\n  function formatWeekNumberMonday(d, p) {\n    return pad(timeMonday.count(year(d), d), p, 2);\n  }\n\n  function formatYear(d, p) {\n    return pad(d.getFullYear() % 100, p, 2);\n  }\n\n  function formatFullYear(d, p) {\n    return pad(d.getFullYear() % 10000, p, 4);\n  }\n\n  function formatZone(d) {\n    var z = d.getTimezoneOffset();\n    return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n        + pad(z / 60 | 0, \"0\", 2)\n        + pad(z % 60, \"0\", 2);\n  }\n\n  function formatUTCDayOfMonth(d, p) {\n    return pad(d.getUTCDate(), p, 2);\n  }\n\n  function formatUTCHour24(d, p) {\n    return pad(d.getUTCHours(), p, 2);\n  }\n\n  function formatUTCHour12(d, p) {\n    return pad(d.getUTCHours() % 12 || 12, p, 2);\n  }\n\n  function formatUTCDayOfYear(d, p) {\n    return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n  }\n\n  function formatUTCMilliseconds(d, p) {\n    return pad(d.getUTCMilliseconds(), p, 3);\n  }\n\n  function formatUTCMonthNumber(d, p) {\n    return pad(d.getUTCMonth() + 1, p, 2);\n  }\n\n  function formatUTCMinutes(d, p) {\n    return pad(d.getUTCMinutes(), p, 2);\n  }\n\n  function formatUTCSeconds(d, p) {\n    return pad(d.getUTCSeconds(), p, 2);\n  }\n\n  function formatUTCWeekNumberSunday(d, p) {\n    return pad(utcWeek.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCWeekdayNumber(d) {\n    return d.getUTCDay();\n  }\n\n  function formatUTCWeekNumberMonday(d, p) {\n    return pad(utcMonday.count(utcYear(d), d), p, 2);\n  }\n\n  function formatUTCYear(d, p) {\n    return pad(d.getUTCFullYear() % 100, p, 2);\n  }\n\n  function formatUTCFullYear(d, p) {\n    return pad(d.getUTCFullYear() % 10000, p, 4);\n  }\n\n  function formatUTCZone() {\n    return \"+0000\";\n  }\n\n  function formatLiteralPercent() {\n    return \"%\";\n  }\n\n  var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\n  function formatIsoNative(date) {\n    return date.toISOString();\n  }\n\n  var formatIso = Date.prototype.toISOString\n      ? formatIsoNative\n      : utcFormat(isoSpecifier);\n\n  function parseIsoNative(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  }\n\n  var parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n      ? parseIsoNative\n      : utcParse(isoSpecifier);\n\n  var array$2 = Array.prototype;\n\n  var map$2 = array$2.map;\n  var slice$3 = array$2.slice;\n\n  var implicit = {name: \"implicit\"};\n\n  function ordinal(range) {\n    var index = map$1(),\n        domain = [],\n        unknown = implicit;\n\n    range = range == null ? [] : slice$3.call(range);\n\n    function scale(d) {\n      var key = d + \"\", i = index.get(key);\n      if (!i) {\n        if (unknown !== implicit) return unknown;\n        index.set(key, i = domain.push(d));\n      }\n      return range[(i - 1) % range.length];\n    }\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [], index = map$1();\n      var i = -1, n = _.length, d, key;\n      while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n      return scale;\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();\n    };\n\n    scale.unknown = function(_) {\n      return arguments.length ? (unknown = _, scale) : unknown;\n    };\n\n    scale.copy = function() {\n      return ordinal()\n          .domain(domain)\n          .range(range)\n          .unknown(unknown);\n    };\n\n    return scale;\n  }\n\n  function band() {\n    var scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range,\n        range$$ = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n\n    delete scale.unknown;\n\n    function rescale() {\n      var n = domain().length,\n          reverse = range$$[1] < range$$[0],\n          start = range$$[reverse - 0],\n          stop = range$$[1 - reverse];\n      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n      if (round) step = Math.floor(step);\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n      var values = range(n).map(function(i) { return start + step * i; });\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range$$ = [+_[0], +_[1]], round = true, rescale();\n    };\n\n    scale.bandwidth = function() {\n      return bandwidth;\n    };\n\n    scale.step = function() {\n      return step;\n    };\n\n    scale.round = function(_) {\n      return arguments.length ? (round = !!_, rescale()) : round;\n    };\n\n    scale.padding = function(_) {\n      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingInner = function(_) {\n      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;\n    };\n\n    scale.paddingOuter = function(_) {\n      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;\n    };\n\n    scale.align = function(_) {\n      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n    };\n\n    scale.copy = function() {\n      return band()\n          .domain(domain())\n          .range(range$$)\n          .round(round)\n          .paddingInner(paddingInner)\n          .paddingOuter(paddingOuter)\n          .align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    var copy = scale.copy;\n\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n    delete scale.paddingOuter;\n\n    scale.copy = function() {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point$4() {\n    return pointish(band().paddingInner(1));\n  }\n\n  function constant$3(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function number$1(x) {\n    return +x;\n  }\n\n  var unit = [0, 1];\n\n  function deinterpolate(a, b) {\n    return (b -= (a = +a))\n        ? function(x) { return (x - a) / b; }\n        : constant$3(b);\n  }\n\n  function deinterpolateClamp(deinterpolate) {\n    return function(a, b) {\n      var d = deinterpolate(a = +a, b = +b);\n      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n    };\n  }\n\n  function reinterpolateClamp(reinterpolate) {\n    return function(a, b) {\n      var r = reinterpolate(a = +a, b = +b);\n      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n    };\n  }\n\n  function bimap(domain, range, deinterpolate, reinterpolate) {\n    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n    return function(x) { return r0(d0(x)); };\n  }\n\n  function polymap(domain, range, deinterpolate, reinterpolate) {\n    var j = Math.min(domain.length, range.length) - 1,\n        d = new Array(j),\n        r = new Array(j),\n        i = -1;\n\n    // Reverse descending domains.\n    if (domain[j] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n\n    while (++i < j) {\n      d[i] = deinterpolate(domain[i], domain[i + 1]);\n      r[i] = reinterpolate(range[i], range[i + 1]);\n    }\n\n    return function(x) {\n      var i = bisectRight(domain, x, 1, j) - 1;\n      return r[i](d[i](x));\n    };\n  }\n\n  function copy(source, target) {\n    return target\n        .domain(source.domain())\n        .range(source.range())\n        .interpolate(source.interpolate())\n        .clamp(source.clamp());\n  }\n\n  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\n  function continuous(deinterpolate$$, reinterpolate) {\n    var domain = unit,\n        range = unit,\n        interpolate$$ = interpolate,\n        clamp = false,\n        piecewise,\n        output,\n        input;\n\n    function rescale() {\n      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n      output = input = null;\n      return scale;\n    }\n\n    function scale(x) {\n      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);\n    }\n\n    scale.invert = function(y) {\n      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.rangeRound = function(_) {\n      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, rescale()) : clamp;\n    };\n\n    scale.interpolate = function(_) {\n      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;\n    };\n\n    return rescale();\n  }\n\n  function tickFormat(domain, count, specifier) {\n    var start = domain[0],\n        stop = domain[domain.length - 1],\n        step = tickStep(start, stop, count == null ? 10 : count),\n        precision;\n    specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n    switch (specifier.type) {\n      case \"s\": {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return formatPrefix(specifier, value);\n      }\n      case \"\":\n      case \"e\":\n      case \"g\":\n      case \"p\":\n      case \"r\": {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n      case \"f\":\n      case \"%\": {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n    }\n    return format(specifier);\n  }\n\n  function linearish(scale) {\n    var domain = scale.domain;\n\n    scale.ticks = function(count) {\n      var d = domain();\n      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return tickFormat(domain(), count, specifier);\n    };\n\n    scale.nice = function(count) {\n      var d = domain(),\n          i = d.length - 1,\n          n = count == null ? 10 : count,\n          start = d[0],\n          stop = d[i],\n          step = tickStep(start, stop, n);\n\n      if (step) {\n        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n        d[0] = Math.floor(start / step) * step;\n        d[i] = Math.ceil(stop / step) * step;\n        domain(d);\n      }\n\n      return scale;\n    };\n\n    return scale;\n  }\n\n  function linear$2() {\n    var scale = continuous(deinterpolate, interpolateNumber);\n\n    scale.copy = function() {\n      return copy(scale, linear$2());\n    };\n\n    return linearish(scale);\n  }\n\n  function identity$4() {\n    var domain = [0, 1];\n\n    function scale(x) {\n      return +x;\n    }\n\n    scale.invert = scale;\n\n    scale.domain = scale.range = function(_) {\n      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();\n    };\n\n    scale.copy = function() {\n      return identity$4().domain(domain);\n    };\n\n    return linearish(scale);\n  }\n\n  function nice(domain, interval) {\n    domain = domain.slice();\n\n    var i0 = 0,\n        i1 = domain.length - 1,\n        x0 = domain[i0],\n        x1 = domain[i1],\n        t;\n\n    if (x1 < x0) {\n      t = i0, i0 = i1, i1 = t;\n      t = x0, x0 = x1, x1 = t;\n    }\n\n    domain[i0] = interval.floor(x0);\n    domain[i1] = interval.ceil(x1);\n    return domain;\n  }\n\n  function deinterpolate$1(a, b) {\n    return (b = Math.log(b / a))\n        ? function(x) { return Math.log(x / a) / b; }\n        : constant$3(b);\n  }\n\n  function reinterpolate(a, b) {\n    return a < 0\n        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }\n        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };\n  }\n\n  function pow10(x) {\n    return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n  }\n\n  function powp(base) {\n    return base === 10 ? pow10\n        : base === Math.E ? Math.exp\n        : function(x) { return Math.pow(base, x); };\n  }\n\n  function logp(base) {\n    return base === Math.E ? Math.log\n        : base === 10 && Math.log10\n        || base === 2 && Math.log2\n        || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n  }\n\n  function reflect(f) {\n    return function(x) {\n      return -f(-x);\n    };\n  }\n\n  function log() {\n    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),\n        domain = scale.domain,\n        base = 10,\n        logs = logp(10),\n        pows = powp(10);\n\n    function rescale() {\n      logs = logp(base), pows = powp(base);\n      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);\n      return scale;\n    }\n\n    scale.base = function(_) {\n      return arguments.length ? (base = +_, rescale()) : base;\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain(_), rescale()) : domain();\n    };\n\n    scale.ticks = function(count) {\n      var d = domain(),\n          u = d[0],\n          v = d[d.length - 1],\n          r;\n\n      if (r = v < u) i = u, u = v, v = i;\n\n      var i = logs(u),\n          j = logs(v),\n          p,\n          k,\n          t,\n          n = count == null ? 10 : +count,\n          z = [];\n\n      if (!(base % 1) && j - i < n) {\n        i = Math.round(i) - 1, j = Math.round(j) + 1;\n        if (u > 0) for (; i < j; ++i) {\n          for (k = 1, p = pows(i); k < base; ++k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        } else for (; i < j; ++i) {\n          for (k = base - 1, p = pows(i); k >= 1; --k) {\n            t = p * k;\n            if (t < u) continue;\n            if (t > v) break;\n            z.push(t);\n          }\n        }\n        if (r) z.reverse();\n      } else {\n        z = ticks(i, j, Math.min(j - i, n)).map(pows);\n      }\n\n      return z;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n      if (typeof specifier !== \"function\") specifier = format(specifier);\n      if (count === Infinity) return specifier;\n      if (count == null) count = 10;\n      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n      return function(d) {\n        var i = d / pows(Math.round(logs(d)));\n        if (i * base < base - 0.5) i *= base;\n        return i <= k ? specifier(d) : \"\";\n      };\n    };\n\n    scale.nice = function() {\n      return domain(nice(domain(), {\n        floor: function(x) { return pows(Math.floor(logs(x))); },\n        ceil: function(x) { return pows(Math.ceil(logs(x))); }\n      }));\n    };\n\n    scale.copy = function() {\n      return copy(scale, log().base(base));\n    };\n\n    return scale;\n  }\n\n  function raise(x, exponent) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  }\n\n  function pow() {\n    var exponent = 1,\n        scale = continuous(deinterpolate, reinterpolate),\n        domain = scale.domain;\n\n    function deinterpolate(a, b) {\n      return (b = raise(b, exponent) - (a = raise(a, exponent)))\n          ? function(x) { return (raise(x, exponent) - a) / b; }\n          : constant$3(b);\n    }\n\n    function reinterpolate(a, b) {\n      b = raise(b, exponent) - (a = raise(a, exponent));\n      return function(t) { return raise(a + b * t, 1 / exponent); };\n    }\n\n    scale.exponent = function(_) {\n      return arguments.length ? (exponent = +_, domain(domain())) : exponent;\n    };\n\n    scale.copy = function() {\n      return copy(scale, pow().exponent(exponent));\n    };\n\n    return linearish(scale);\n  }\n\n  function sqrt() {\n    return pow().exponent(0.5);\n  }\n\n  function quantile() {\n    var domain = [],\n        range = [],\n        thresholds = [];\n\n    function rescale() {\n      var i = 0, n = Math.max(1, range.length);\n      thresholds = new Array(n - 1);\n      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n      return scale;\n    }\n\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];\n    }\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN] : [\n        i > 0 ? thresholds[i - 1] : domain[0],\n        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n      ];\n    };\n\n    scale.domain = function(_) {\n      if (!arguments.length) return domain.slice();\n      domain = [];\n      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n      domain.sort(ascending);\n      return rescale();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();\n    };\n\n    scale.quantiles = function() {\n      return thresholds.slice();\n    };\n\n    scale.copy = function() {\n      return quantile()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\n  function quantize$1() {\n    var x0 = 0,\n        x1 = 1,\n        n = 1,\n        domain = [0.5],\n        range = [0, 1];\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    function rescale() {\n      var i = -1;\n      domain = new Array(n);\n      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n      return scale;\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return i < 0 ? [NaN, NaN]\n          : i < 1 ? [x0, domain[0]]\n          : i >= n ? [domain[n - 1], x1]\n          : [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return quantize$1()\n          .domain([x0, x1])\n          .range(range);\n    };\n\n    return linearish(scale);\n  }\n\n  function threshold$1() {\n    var domain = [0.5],\n        range = [0, 1],\n        n = 1;\n\n    function scale(x) {\n      if (x <= x) return range[bisectRight(domain, x, 0, n)];\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n    };\n\n    scale.range = function(_) {\n      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n    };\n\n    scale.invertExtent = function(y) {\n      var i = range.indexOf(y);\n      return [domain[i - 1], domain[i]];\n    };\n\n    scale.copy = function() {\n      return threshold$1()\n          .domain(domain)\n          .range(range);\n    };\n\n    return scale;\n  }\n\nvar   durationSecond$1 = 1000;\nvar   durationMinute$1 = durationSecond$1 * 60;\nvar   durationHour$1 = durationMinute$1 * 60;\nvar   durationDay$1 = durationHour$1 * 24;\nvar   durationWeek$1 = durationDay$1 * 7;\n  var durationMonth = durationDay$1 * 30;\n  var durationYear = durationDay$1 * 365;\n  function date(t) {\n    return new Date(t);\n  }\n\n  function number$2(t) {\n    return t instanceof Date ? +t : +new Date(+t);\n  }\n\n  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n    var scale = continuous(deinterpolate, interpolateNumber),\n        invert = scale.invert,\n        domain = scale.domain;\n\n    var formatMillisecond = format(\".%L\"),\n        formatSecond = format(\":%S\"),\n        formatMinute = format(\"%I:%M\"),\n        formatHour = format(\"%I %p\"),\n        formatDay = format(\"%a %d\"),\n        formatWeek = format(\"%b %d\"),\n        formatMonth = format(\"%B\"),\n        formatYear = format(\"%Y\");\n\n    var tickIntervals = [\n      [second,  1,      durationSecond$1],\n      [second,  5,  5 * durationSecond$1],\n      [second, 15, 15 * durationSecond$1],\n      [second, 30, 30 * durationSecond$1],\n      [minute,  1,      durationMinute$1],\n      [minute,  5,  5 * durationMinute$1],\n      [minute, 15, 15 * durationMinute$1],\n      [minute, 30, 30 * durationMinute$1],\n      [  hour,  1,      durationHour$1  ],\n      [  hour,  3,  3 * durationHour$1  ],\n      [  hour,  6,  6 * durationHour$1  ],\n      [  hour, 12, 12 * durationHour$1  ],\n      [   day,  1,      durationDay$1   ],\n      [   day,  2,  2 * durationDay$1   ],\n      [  week,  1,      durationWeek$1  ],\n      [ month,  1,      durationMonth ],\n      [ month,  3,  3 * durationMonth ],\n      [  year,  1,      durationYear  ]\n    ];\n\n    function tickFormat(date) {\n      return (second(date) < date ? formatMillisecond\n          : minute(date) < date ? formatSecond\n          : hour(date) < date ? formatMinute\n          : day(date) < date ? formatHour\n          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n          : year(date) < date ? formatMonth\n          : formatYear)(date);\n    }\n\n    function tickInterval(interval, start, stop, step) {\n      if (interval == null) interval = 10;\n\n      // If a desired tick count is specified, pick a reasonable tick interval\n      // based on the extent of the domain and a rough estimate of tick size.\n      // Otherwise, assume interval is already a time interval and use it.\n      if (typeof interval === \"number\") {\n        var target = Math.abs(stop - start) / interval,\n            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n        if (i === tickIntervals.length) {\n          step = tickStep(start / durationYear, stop / durationYear, interval);\n          interval = year;\n        } else if (i) {\n          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n          step = i[1];\n          interval = i[0];\n        } else {\n          step = tickStep(start, stop, interval);\n          interval = millisecond;\n        }\n      }\n\n      return step == null ? interval : interval.every(step);\n    }\n\n    scale.invert = function(y) {\n      return new Date(invert(y));\n    };\n\n    scale.domain = function(_) {\n      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date);\n    };\n\n    scale.ticks = function(interval, step) {\n      var d = domain(),\n          t0 = d[0],\n          t1 = d[d.length - 1],\n          r = t1 < t0,\n          t;\n      if (r) t = t0, t0 = t1, t1 = t;\n      t = tickInterval(interval, t0, t1, step);\n      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n      return r ? t.reverse() : t;\n    };\n\n    scale.tickFormat = function(count, specifier) {\n      return specifier == null ? tickFormat : format(specifier);\n    };\n\n    scale.nice = function(interval, step) {\n      var d = domain();\n      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n          ? domain(nice(d, interval))\n          : scale;\n    };\n\n    scale.copy = function() {\n      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n    };\n\n    return scale;\n  }\n\n  function time() {\n    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);\n  }\n\n  function utcTime() {\n    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);\n  }\n\n  function colors(s) {\n    return s.match(/.{6}/g).map(function(x) {\n      return \"#\" + x;\n    });\n  }\n\n  var category10 = colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n\n  var category20b = colors(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\");\n\n  var category20c = colors(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\");\n\n  var category20 = colors(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\");\n\n  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n\n  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\n  var rainbow = cubehelix();\n\n  function rainbow$1(t) {\n    if (t < 0 || t > 1) t -= Math.floor(t);\n    var ts = Math.abs(t - 0.5);\n    rainbow.h = 360 * t - 100;\n    rainbow.s = 1.5 - 1.5 * ts;\n    rainbow.l = 0.8 - 0.9 * ts;\n    return rainbow + \"\";\n  }\n\n  function ramp(range) {\n    var n = range.length;\n    return function(t) {\n      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n    };\n  }\n\n  var viridis = ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\n  var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\n  var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\n  var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n\n  function sequential(interpolate) {\n    var x0 = 0,\n        x1 = 1,\n        clamp = false;\n\n    function scale(x) {\n      var t = (x - x0) / (x1 - x0);\n      return interpolate(clamp ? Math.max(0, Math.min(1, t)) : t);\n    }\n\n    scale.domain = function(_) {\n      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];\n    };\n\n    scale.clamp = function(_) {\n      return arguments.length ? (clamp = !!_, scale) : clamp;\n    };\n\n    scale.copy = function() {\n      return sequential(interpolate).domain([x0, x1]).clamp(clamp);\n    };\n\n    return linearish(scale);\n  }\n\n  var xhtml = \"http://www.w3.org/1999/xhtml\";\n\n  var namespaces = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: xhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n\n  function namespace(name) {\n    var prefix = name += \"\", i = prefix.indexOf(\":\");\n    if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n  }\n\n  function creatorInherit(name) {\n    return function() {\n      var document = this.ownerDocument,\n          uri = this.namespaceURI;\n      return uri === xhtml && document.documentElement.namespaceURI === xhtml\n          ? document.createElement(name)\n          : document.createElementNS(uri, name);\n    };\n  }\n\n  function creatorFixed(fullname) {\n    return function() {\n      return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n    };\n  }\n\n  function creator(name) {\n    var fullname = namespace(name);\n    return (fullname.local\n        ? creatorFixed\n        : creatorInherit)(fullname);\n  }\n\n  var nextId = 0;\n\n  function local() {\n    return new Local;\n  }\n\n  function Local() {\n    this._ = \"@\" + (++nextId).toString(36);\n  }\n\n  Local.prototype = local.prototype = {\n    constructor: Local,\n    get: function(node) {\n      var id = this._;\n      while (!(id in node)) if (!(node = node.parentNode)) return;\n      return node[id];\n    },\n    set: function(node, value) {\n      return node[this._] = value;\n    },\n    remove: function(node) {\n      return this._ in node && delete node[this._];\n    },\n    toString: function() {\n      return this._;\n    }\n  };\n\n  var matcher = function(selector) {\n    return function() {\n      return this.matches(selector);\n    };\n  };\n\n  if (typeof document !== \"undefined\") {\n    var element = document.documentElement;\n    if (!element.matches) {\n      var vendorMatches = element.webkitMatchesSelector\n          || element.msMatchesSelector\n          || element.mozMatchesSelector\n          || element.oMatchesSelector;\n      matcher = function(selector) {\n        return function() {\n          return vendorMatches.call(this, selector);\n        };\n      };\n    }\n  }\n\n  var matcher$1 = matcher;\n\n  var filterEvents = {};\n\n  exports.event = null;\n\n  if (typeof document !== \"undefined\") {\n    var element$1 = document.documentElement;\n    if (!(\"onmouseenter\" in element$1)) {\n      filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n    }\n  }\n\n  function filterContextListener(listener, index, group) {\n    listener = contextListener(listener, index, group);\n    return function(event) {\n      var related = event.relatedTarget;\n      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n        listener.call(this, event);\n      }\n    };\n  }\n\n  function contextListener(listener, index, group) {\n    return function(event1) {\n      var event0 = exports.event; // Events can be reentrant (e.g., focus).\n      exports.event = event1;\n      try {\n        listener.call(this, this.__data__, index, group);\n      } finally {\n        exports.event = event0;\n      }\n    };\n  }\n\n  function parseTypenames$1(typenames) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n      var name = \"\", i = t.indexOf(\".\");\n      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n      return {type: t, name: name};\n    });\n  }\n\n  function onRemove(typename) {\n    return function() {\n      var on = this.__on;\n      if (!on) return;\n      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n        } else {\n          on[++i] = o;\n        }\n      }\n      if (++i) on.length = i;\n      else delete this.__on;\n    };\n  }\n\n  function onAdd(typename, value, capture) {\n    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n    return function(d, i, group) {\n      var on = this.__on, o, listener = wrap(value, i, group);\n      if (on) for (var j = 0, m = on.length; j < m; ++j) {\n        if ((o = on[j]).type === typename.type && o.name === typename.name) {\n          this.removeEventListener(o.type, o.listener, o.capture);\n          this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n          o.value = value;\n          return;\n        }\n      }\n      this.addEventListener(typename.type, listener, capture);\n      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n      if (!on) this.__on = [o];\n      else on.push(o);\n    };\n  }\n\n  function selection_on(typename, value, capture) {\n    var typenames = parseTypenames$1(typename + \"\"), i, n = typenames.length, t;\n\n    if (arguments.length < 2) {\n      var on = this.node().__on;\n      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n        for (i = 0, o = on[j]; i < n; ++i) {\n          if ((t = typenames[i]).type === o.type && t.name === o.name) {\n            return o.value;\n          }\n        }\n      }\n      return;\n    }\n\n    on = value ? onAdd : onRemove;\n    if (capture == null) capture = false;\n    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n    return this;\n  }\n\n  function customEvent(event1, listener, that, args) {\n    var event0 = exports.event;\n    event1.sourceEvent = exports.event;\n    exports.event = event1;\n    try {\n      return listener.apply(that, args);\n    } finally {\n      exports.event = event0;\n    }\n  }\n\n  function sourceEvent() {\n    var current = exports.event, source;\n    while (source = current.sourceEvent) current = source;\n    return current;\n  }\n\n  function point$5(node, event) {\n    var svg = node.ownerSVGElement || node;\n\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n\n    var rect = node.getBoundingClientRect();\n    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n  }\n\n  function mouse(node) {\n    var event = sourceEvent();\n    if (event.changedTouches) event = event.changedTouches[0];\n    return point$5(node, event);\n  }\n\n  function selector(selector) {\n    return function() {\n      return this.querySelector(selector);\n    };\n  }\n\n  function selection_select(select) {\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function selectorAll(selector) {\n    return function() {\n      return this.querySelectorAll(selector);\n    };\n  }\n\n  function selection_selectAll(select) {\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          subgroups.push(select.call(node, node.__data__, i, group));\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, parents);\n  }\n\n  function selection_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup.push(node);\n        }\n      }\n    }\n\n    return new Selection(subgroups, this._parents);\n  }\n\n  function constant$4(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  var keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\n  function bindIndex(parent, group, enter, update, exit, data) {\n    var i = 0,\n        node,\n        groupLength = group.length,\n        dataLength = data.length;\n\n    // Put any non-null nodes that fit into update.\n    // Put any null nodes into enter.\n    // Put any remaining data into enter.\n    for (; i < dataLength; ++i) {\n      if (node = group[i]) {\n        node.__data__ = data[i];\n        update[i] = node;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Put any non-null nodes that don’t fit into exit.\n    for (; i < groupLength; ++i) {\n      if (node = group[i]) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function bindKey(parent, group, enter, update, exit, data, key) {\n    var i,\n        node,\n        nodeByKeyValue = {},\n        groupLength = group.length,\n        dataLength = data.length,\n        keyValues = new Array(groupLength),\n        keyValue;\n\n    // Compute the key for each node.\n    // If multiple nodes have the same key, the duplicates are added to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if (node = group[i]) {\n        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n        if (keyValue in nodeByKeyValue) {\n          exit[i] = node;\n        } else {\n          nodeByKeyValue[keyValue] = node;\n        }\n      }\n    }\n\n    // Compute the key for each datum.\n    // If there a node associated with this key, join and add it to update.\n    // If there is not (or the key is a duplicate), add it to enter.\n    for (i = 0; i < dataLength; ++i) {\n      keyValue = keyPrefix + key.call(parent, data[i], i, data);\n      if (node = nodeByKeyValue[keyValue]) {\n        update[i] = node;\n        node.__data__ = data[i];\n        nodeByKeyValue[keyValue] = null;\n      } else {\n        enter[i] = new EnterNode(parent, data[i]);\n      }\n    }\n\n    // Add any remaining nodes that were not bound to data to exit.\n    for (i = 0; i < groupLength; ++i) {\n      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n        exit[i] = node;\n      }\n    }\n  }\n\n  function selection_data(value, key) {\n    if (!value) {\n      data = new Array(this.size()), j = -1;\n      this.each(function(d) { data[++j] = d; });\n      return data;\n    }\n\n    var bind = key ? bindKey : bindIndex,\n        parents = this._parents,\n        groups = this._groups;\n\n    if (typeof value !== \"function\") value = constant$4(value);\n\n    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n      var parent = parents[j],\n          group = groups[j],\n          groupLength = group.length,\n          data = value.call(parent, parent && parent.__data__, j, parents),\n          dataLength = data.length,\n          enterGroup = enter[j] = new Array(dataLength),\n          updateGroup = update[j] = new Array(dataLength),\n          exitGroup = exit[j] = new Array(groupLength);\n\n      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n      // Now connect the enter nodes to their following update node, such that\n      // appendChild can insert the materialized enter node before this node,\n      // rather than at the end of the parent node.\n      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n        if (previous = enterGroup[i0]) {\n          if (i0 >= i1) i1 = i0 + 1;\n          while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n          previous._next = next || null;\n        }\n      }\n    }\n\n    update = new Selection(update, parents);\n    update._enter = enter;\n    update._exit = exit;\n    return update;\n  }\n\n  function EnterNode(parent, datum) {\n    this.ownerDocument = parent.ownerDocument;\n    this.namespaceURI = parent.namespaceURI;\n    this._next = null;\n    this._parent = parent;\n    this.__data__ = datum;\n  }\n\n  EnterNode.prototype = {\n    constructor: EnterNode,\n    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n    querySelector: function(selector) { return this._parent.querySelector(selector); },\n    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n  };\n\n  function sparse(update) {\n    return new Array(update.length);\n  }\n\n  function selection_enter() {\n    return new Selection(this._enter || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_exit() {\n    return new Selection(this._exit || this._groups.map(sparse), this._parents);\n  }\n\n  function selection_merge(selection) {\n\n    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Selection(merges, this._parents);\n  }\n\n  function selection_order() {\n\n    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function selection_sort(compare) {\n    if (!compare) compare = ascending$2;\n\n    function compareNode(a, b) {\n      return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n    }\n\n    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          sortgroup[i] = node;\n        }\n      }\n      sortgroup.sort(compareNode);\n    }\n\n    return new Selection(sortgroups, this._parents).order();\n  }\n\n  function ascending$2(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function selection_call() {\n    var callback = arguments[0];\n    arguments[0] = this;\n    callback.apply(null, arguments);\n    return this;\n  }\n\n  function selection_nodes() {\n    var nodes = new Array(this.size()), i = -1;\n    this.each(function() { nodes[++i] = this; });\n    return nodes;\n  }\n\n  function selection_node() {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n\n    return null;\n  }\n\n  function selection_size() {\n    var size = 0;\n    this.each(function() { ++size; });\n    return size;\n  }\n\n  function selection_empty() {\n    return !this.node();\n  }\n\n  function selection_each(callback) {\n\n    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n        if (node = group[i]) callback.call(node, node.__data__, i, group);\n      }\n    }\n\n    return this;\n  }\n\n  function attrRemove(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant(name, value) {\n    return function() {\n      this.setAttribute(name, value);\n    };\n  }\n\n  function attrConstantNS(fullname, value) {\n    return function() {\n      this.setAttributeNS(fullname.space, fullname.local, value);\n    };\n  }\n\n  function attrFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttribute(name);\n      else this.setAttribute(name, v);\n    };\n  }\n\n  function attrFunctionNS(fullname, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n      else this.setAttributeNS(fullname.space, fullname.local, v);\n    };\n  }\n\n  function selection_attr(name, value) {\n    var fullname = namespace(name);\n\n    if (arguments.length < 2) {\n      var node = this.node();\n      return fullname.local\n          ? node.getAttributeNS(fullname.space, fullname.local)\n          : node.getAttribute(fullname);\n    }\n\n    return this.each((value == null\n        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS : attrFunction)\n        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n  }\n\n  function window(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n  }\n\n  function styleRemove(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant(name, value, priority) {\n    return function() {\n      this.style.setProperty(name, value, priority);\n    };\n  }\n\n  function styleFunction(name, value, priority) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) this.style.removeProperty(name);\n      else this.style.setProperty(name, v, priority);\n    };\n  }\n\n  function selection_style(name, value, priority) {\n    var node;\n    return arguments.length > 1\n        ? this.each((value == null\n              ? styleRemove : typeof value === \"function\"\n              ? styleFunction\n              : styleConstant)(name, value, priority == null ? \"\" : priority))\n        : window(node = this.node())\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n  }\n\n  function propertyRemove(name) {\n    return function() {\n      delete this[name];\n    };\n  }\n\n  function propertyConstant(name, value) {\n    return function() {\n      this[name] = value;\n    };\n  }\n\n  function propertyFunction(name, value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      if (v == null) delete this[name];\n      else this[name] = v;\n    };\n  }\n\n  function selection_property(name, value) {\n    return arguments.length > 1\n        ? this.each((value == null\n            ? propertyRemove : typeof value === \"function\"\n            ? propertyFunction\n            : propertyConstant)(name, value))\n        : this.node()[name];\n  }\n\n  function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n  }\n\n  function classList(node) {\n    return node.classList || new ClassList(node);\n  }\n\n  function ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n  }\n\n  ClassList.prototype = {\n    add: function(name) {\n      var i = this._names.indexOf(name);\n      if (i < 0) {\n        this._names.push(name);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    remove: function(name) {\n      var i = this._names.indexOf(name);\n      if (i >= 0) {\n        this._names.splice(i, 1);\n        this._node.setAttribute(\"class\", this._names.join(\" \"));\n      }\n    },\n    contains: function(name) {\n      return this._names.indexOf(name) >= 0;\n    }\n  };\n\n  function classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n  }\n\n  function classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n  }\n\n  function classedTrue(names) {\n    return function() {\n      classedAdd(this, names);\n    };\n  }\n\n  function classedFalse(names) {\n    return function() {\n      classedRemove(this, names);\n    };\n  }\n\n  function classedFunction(names, value) {\n    return function() {\n      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    };\n  }\n\n  function selection_classed(name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n      var list = classList(this.node()), i = -1, n = names.length;\n      while (++i < n) if (!list.contains(names[i])) return false;\n      return true;\n    }\n\n    return this.each((typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse)(names, value));\n  }\n\n  function textRemove() {\n    this.textContent = \"\";\n  }\n\n  function textConstant(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_text(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? textRemove : (typeof value === \"function\"\n            ? textFunction\n            : textConstant)(value))\n        : this.node().textContent;\n  }\n\n  function htmlRemove() {\n    this.innerHTML = \"\";\n  }\n\n  function htmlConstant(value) {\n    return function() {\n      this.innerHTML = value;\n    };\n  }\n\n  function htmlFunction(value) {\n    return function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    };\n  }\n\n  function selection_html(value) {\n    return arguments.length\n        ? this.each(value == null\n            ? htmlRemove : (typeof value === \"function\"\n            ? htmlFunction\n            : htmlConstant)(value))\n        : this.node().innerHTML;\n  }\n\n  function raise$1() {\n    if (this.nextSibling) this.parentNode.appendChild(this);\n  }\n\n  function selection_raise() {\n    return this.each(raise$1);\n  }\n\n  function lower() {\n    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n  }\n\n  function selection_lower() {\n    return this.each(lower);\n  }\n\n  function selection_append(name) {\n    var create = typeof name === \"function\" ? name : creator(name);\n    return this.select(function() {\n      return this.appendChild(create.apply(this, arguments));\n    });\n  }\n\n  function constantNull() {\n    return null;\n  }\n\n  function selection_insert(name, before) {\n    var create = typeof name === \"function\" ? name : creator(name),\n        select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n    return this.select(function() {\n      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n    });\n  }\n\n  function remove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n\n  function selection_remove() {\n    return this.each(remove);\n  }\n\n  function selection_datum(value) {\n    return arguments.length\n        ? this.property(\"__data__\", value)\n        : this.node().__data__;\n  }\n\n  function dispatchEvent(node, type, params) {\n    var window$$ = window(node),\n        event = window$$.CustomEvent;\n\n    if (event) {\n      event = new event(type, params);\n    } else {\n      event = window$$.document.createEvent(\"Event\");\n      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n      else event.initEvent(type, false, false);\n    }\n\n    node.dispatchEvent(event);\n  }\n\n  function dispatchConstant(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params);\n    };\n  }\n\n  function dispatchFunction(type, params) {\n    return function() {\n      return dispatchEvent(this, type, params.apply(this, arguments));\n    };\n  }\n\n  function selection_dispatch(type, params) {\n    return this.each((typeof params === \"function\"\n        ? dispatchFunction\n        : dispatchConstant)(type, params));\n  }\n\n  var root = [null];\n\n  function Selection(groups, parents) {\n    this._groups = groups;\n    this._parents = parents;\n  }\n\n  function selection() {\n    return new Selection([[document.documentElement]], root);\n  }\n\n  Selection.prototype = selection.prototype = {\n    constructor: Selection,\n    select: selection_select,\n    selectAll: selection_selectAll,\n    filter: selection_filter,\n    data: selection_data,\n    enter: selection_enter,\n    exit: selection_exit,\n    merge: selection_merge,\n    order: selection_order,\n    sort: selection_sort,\n    call: selection_call,\n    nodes: selection_nodes,\n    node: selection_node,\n    size: selection_size,\n    empty: selection_empty,\n    each: selection_each,\n    attr: selection_attr,\n    style: selection_style,\n    property: selection_property,\n    classed: selection_classed,\n    text: selection_text,\n    html: selection_html,\n    raise: selection_raise,\n    lower: selection_lower,\n    append: selection_append,\n    insert: selection_insert,\n    remove: selection_remove,\n    datum: selection_datum,\n    on: selection_on,\n    dispatch: selection_dispatch\n  };\n\n  function select(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n        : new Selection([[selector]], root);\n  }\n\n  function selectAll(selector) {\n    return typeof selector === \"string\"\n        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n        : new Selection([selector], root);\n  }\n\n  function touch(node, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;\n\n    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return point$5(node, touch);\n      }\n    }\n\n    return null;\n  }\n\n  function touches(node, touches) {\n    if (touches == null) touches = sourceEvent().touches;\n\n    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {\n      points[i] = point$5(node, touches[i]);\n    }\n\n    return points;\n  }\n\n  var emptyOn = dispatch(\"start\", \"end\", \"interrupt\");\n  var emptyTween = [];\n\n  var CREATED = 0;\n  var SCHEDULED = 1;\n  var STARTING = 2;\n  var STARTED = 3;\n  var ENDING = 4;\n  var ENDED = 5;\n\n  function schedule(node, name, id, index, group, timing) {\n    var schedules = node.__transition;\n    if (!schedules) node.__transition = {};\n    else if (id in schedules) return;\n    create(node, id, {\n      name: name,\n      index: index, // For context during callback.\n      group: group, // For context during callback.\n      on: emptyOn,\n      tween: emptyTween,\n      time: timing.time,\n      delay: timing.delay,\n      duration: timing.duration,\n      ease: timing.ease,\n      timer: null,\n      state: CREATED\n    });\n  }\n\n  function init(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function set$2(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function get$1(node, id) {\n    var schedule = node.__transition;\n    if (!schedule || !(schedule = schedule[id])) throw new Error(\"too late\");\n    return schedule;\n  }\n\n  function create(node, id, self) {\n    var schedules = node.__transition,\n        tween;\n\n    // Initialize the self timer when the transition is created.\n    // Note the actual delay is not known until the first callback!\n    schedules[id] = self;\n    self.timer = timer(schedule, 0, self.time);\n\n    // If the delay is greater than this first sleep, sleep some more;\n    // otherwise, start immediately.\n    function schedule(elapsed) {\n      self.state = SCHEDULED;\n      if (self.delay <= elapsed) start(elapsed - self.delay);\n      else self.timer.restart(start, self.delay, self.time);\n    }\n\n    function start(elapsed) {\n      var i, j, n, o;\n\n      for (i in schedules) {\n        o = schedules[i];\n        if (o.name !== self.name) continue;\n\n        // Interrupt the active transition, if any.\n        // Dispatch the interrupt event.\n        if (o.state === STARTED) {\n          o.state = ENDED;\n          o.timer.stop();\n          o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n          delete schedules[i];\n        }\n\n        // Cancel any pre-empted transitions. No interrupt event is dispatched\n        // because the cancelled transitions never started. Note that this also\n        // removes this transition from the pending list!\n        else if (+i < id) {\n          o.state = ENDED;\n          o.timer.stop();\n          delete schedules[i];\n        }\n      }\n\n      // Defer the first tick to end of the current frame; see mbostock/d3#1576.\n      // Note the transition may be canceled after start and before the first tick!\n      // Note this must be scheduled before the start event; see d3/d3-transition#16!\n      // Assuming this is successful, subsequent callbacks go straight to tick.\n      timeout$1(function() {\n        if (self.state === STARTED) {\n          self.timer.restart(tick, self.delay, self.time);\n          tick(elapsed);\n        }\n      });\n\n      // Dispatch the start event.\n      // Note this must be done before the tween are initialized.\n      self.state = STARTING;\n      self.on.call(\"start\", node, node.__data__, self.index, self.group);\n      if (self.state !== STARTING) return; // interrupted\n      self.state = STARTED;\n\n      // Initialize the tween, deleting null tween.\n      tween = new Array(n = self.tween.length);\n      for (i = 0, j = -1; i < n; ++i) {\n        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n          tween[++j] = o;\n        }\n      }\n      tween.length = j + 1;\n    }\n\n    function tick(elapsed) {\n      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),\n          i = -1,\n          n = tween.length;\n\n      while (++i < n) {\n        tween[i].call(null, t);\n      }\n\n      // Dispatch the end event.\n      if (self.state === ENDING) {\n        self.state = ENDED;\n        self.timer.stop();\n        self.on.call(\"end\", node, node.__data__, self.index, self.group);\n        for (i in schedules) if (+i !== id) return void delete schedules[id];\n        delete node.__transition;\n      }\n    }\n  }\n\n  function interrupt(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        active,\n        empty = true,\n        i;\n\n    if (!schedules) return;\n\n    name = name == null ? null : name + \"\";\n\n    for (i in schedules) {\n      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n      active = schedule.state === STARTED;\n      schedule.state = ENDED;\n      schedule.timer.stop();\n      if (active) schedule.on.call(\"interrupt\", node, node.__data__, schedule.index, schedule.group);\n      delete schedules[i];\n    }\n\n    if (empty) delete node.__transition;\n  }\n\n  function selection_interrupt(name) {\n    return this.each(function() {\n      interrupt(this, name);\n    });\n  }\n\n  function tweenRemove(id, name) {\n    var tween0, tween1;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = tween0 = tween;\n        for (var i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1 = tween1.slice();\n            tween1.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function tweenFunction(id, name, value) {\n    var tween0, tween1;\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      var schedule = set$2(this, id),\n          tween = schedule.tween;\n\n      // If this node shared tween with the previous node,\n      // just assign the updated shared tween and we’re done!\n      // Otherwise, copy-on-write.\n      if (tween !== tween0) {\n        tween1 = (tween0 = tween).slice();\n        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n          if (tween1[i].name === name) {\n            tween1[i] = t;\n            break;\n          }\n        }\n        if (i === n) tween1.push(t);\n      }\n\n      schedule.tween = tween1;\n    };\n  }\n\n  function transition_tween(name, value) {\n    var id = this._id;\n\n    name += \"\";\n\n    if (arguments.length < 2) {\n      var tween = get$1(this.node(), id).tween;\n      for (var i = 0, n = tween.length, t; i < n; ++i) {\n        if ((t = tween[i]).name === name) {\n          return t.value;\n        }\n      }\n      return null;\n    }\n\n    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n  }\n\n  function tweenValue(transition, name, value) {\n    var id = transition._id;\n\n    transition.each(function() {\n      var schedule = set$2(this, id);\n      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n    });\n\n    return function(node) {\n      return get$1(node, id).value[name];\n    };\n  }\n\n  function interpolate$1(a, b) {\n    var c;\n    return (typeof b === \"number\" ? interpolateNumber\n        : b instanceof color ? interpolateRgb\n        : (c = color(b)) ? (b = c, interpolateRgb)\n        : interpolateString)(a, b);\n  }\n\n  function attrRemove$1(name) {\n    return function() {\n      this.removeAttribute(name);\n    };\n  }\n\n  function attrRemoveNS$1(fullname) {\n    return function() {\n      this.removeAttributeNS(fullname.space, fullname.local);\n    };\n  }\n\n  function attrConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrConstantNS$1(fullname, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function attrFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttribute(name);\n      value0 = this.getAttribute(name);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function attrFunctionNS$1(fullname, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var value0, value1 = value(this);\n      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n      value0 = this.getAttributeNS(fullname.space, fullname.local);\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_attr(name, value) {\n    var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform$2 : interpolate$1;\n    return this.attrTween(name, typeof value === \"function\"\n        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)\n        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));\n  }\n\n  function attrTweenNS(fullname, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttributeNS(fullname.space, fullname.local, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function attrTween(name, value) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.setAttribute(name, i(t));\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_attrTween(name, value) {\n    var key = \"attr.\" + name;\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    var fullname = namespace(name);\n    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n  }\n\n  function delayFunction(id, value) {\n    return function() {\n      init(this, id).delay = +value.apply(this, arguments);\n    };\n  }\n\n  function delayConstant(id, value) {\n    return value = +value, function() {\n      init(this, id).delay = value;\n    };\n  }\n\n  function transition_delay(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? delayFunction\n            : delayConstant)(id, value))\n        : get$1(this.node(), id).delay;\n  }\n\n  function durationFunction(id, value) {\n    return function() {\n      set$2(this, id).duration = +value.apply(this, arguments);\n    };\n  }\n\n  function durationConstant(id, value) {\n    return value = +value, function() {\n      set$2(this, id).duration = value;\n    };\n  }\n\n  function transition_duration(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each((typeof value === \"function\"\n            ? durationFunction\n            : durationConstant)(id, value))\n        : get$1(this.node(), id).duration;\n  }\n\n  function easeConstant(id, value) {\n    if (typeof value !== \"function\") throw new Error;\n    return function() {\n      set$2(this, id).ease = value;\n    };\n  }\n\n  function transition_ease(value) {\n    var id = this._id;\n\n    return arguments.length\n        ? this.each(easeConstant(id, value))\n        : get$1(this.node(), id).ease;\n  }\n\n  function transition_filter(match) {\n    if (typeof match !== \"function\") match = matcher$1(match);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n          subgroup[i] = node;\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, this._name, this._id);\n  }\n\n  function transition_merge(transition) {\n    if (transition._id !== this._id) throw new Error;\n\n    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n        if (node = group0[i] || group1[i]) {\n          merge[i] = node;\n        }\n      }\n    }\n\n    for (; j < m0; ++j) {\n      merges[j] = groups0[j];\n    }\n\n    return new Transition(merges, this._parents, this._name, this._id);\n  }\n\n  function start$1(name) {\n    return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n      var i = t.indexOf(\".\");\n      if (i >= 0) t = t.slice(0, i);\n      return !t || t === \"start\";\n    });\n  }\n\n  function onFunction(id, name, listener) {\n    var on0, on1, sit = start$1(name) ? init : set$2;\n    return function() {\n      var schedule = sit(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n      schedule.on = on1;\n    };\n  }\n\n  function transition_on(name, listener) {\n    var id = this._id;\n\n    return arguments.length < 2\n        ? get$1(this.node(), id).on.on(name)\n        : this.each(onFunction(id, name, listener));\n  }\n\n  function removeFunction(id) {\n    return function() {\n      var parent = this.parentNode;\n      for (var i in this.__transition) if (+i !== id) return;\n      if (parent) parent.removeChild(this);\n    };\n  }\n\n  function transition_remove() {\n    return this.on(\"end.remove\", removeFunction(this._id));\n  }\n\n  function transition_select(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selector(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          subgroup[i] = subnode;\n          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));\n        }\n      }\n    }\n\n    return new Transition(subgroups, this._parents, name, id);\n  }\n\n  function transition_selectAll(select) {\n    var name = this._name,\n        id = this._id;\n\n    if (typeof select !== \"function\") select = selectorAll(select);\n\n    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {\n            if (child = children[k]) {\n              schedule(child, name, id, k, children, inherit);\n            }\n          }\n          subgroups.push(children);\n          parents.push(node);\n        }\n      }\n    }\n\n    return new Transition(subgroups, parents, name, id);\n  }\n\n  var Selection$1 = selection.prototype.constructor;\n\n  function transition_selection() {\n    return new Selection$1(this._groups, this._parents);\n  }\n\n  function styleRemove$1(name, interpolate) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function styleRemoveEnd(name) {\n    return function() {\n      this.style.removeProperty(name);\n    };\n  }\n\n  function styleConstant$1(name, interpolate, value1) {\n    var value00,\n        interpolate0;\n    return function() {\n      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);\n      return value0 === value1 ? null\n          : value0 === value00 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value1);\n    };\n  }\n\n  function styleFunction$1(name, interpolate, value) {\n    var value00,\n        value10,\n        interpolate0;\n    return function() {\n      var style = window(this).getComputedStyle(this, null),\n          value0 = style.getPropertyValue(name),\n          value1 = value(this);\n      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));\n      return value0 === value1 ? null\n          : value0 === value00 && value1 === value10 ? interpolate0\n          : interpolate0 = interpolate(value00 = value0, value10 = value1);\n    };\n  }\n\n  function transition_style(name, value, priority) {\n    var i = (name += \"\") === \"transform\" ? interpolateTransform$1 : interpolate$1;\n    return value == null ? this\n            .styleTween(name, styleRemove$1(name, i))\n            .on(\"end.style.\" + name, styleRemoveEnd(name))\n        : this.styleTween(name, typeof value === \"function\"\n            ? styleFunction$1(name, i, tweenValue(this, \"style.\" + name, value))\n            : styleConstant$1(name, i, value), priority);\n  }\n\n  function styleTween(name, value, priority) {\n    function tween() {\n      var node = this, i = value.apply(node, arguments);\n      return i && function(t) {\n        node.style.setProperty(name, i(t), priority);\n      };\n    }\n    tween._value = value;\n    return tween;\n  }\n\n  function transition_styleTween(name, value, priority) {\n    var key = \"style.\" + (name += \"\");\n    if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n    if (value == null) return this.tween(key, null);\n    if (typeof value !== \"function\") throw new Error;\n    return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n  }\n\n  function textConstant$1(value) {\n    return function() {\n      this.textContent = value;\n    };\n  }\n\n  function textFunction$1(value) {\n    return function() {\n      var value1 = value(this);\n      this.textContent = value1 == null ? \"\" : value1;\n    };\n  }\n\n  function transition_text(value) {\n    return this.tween(\"text\", typeof value === \"function\"\n        ? textFunction$1(tweenValue(this, \"text\", value))\n        : textConstant$1(value == null ? \"\" : value + \"\"));\n  }\n\n  function transition_transition() {\n    var name = this._name,\n        id0 = this._id,\n        id1 = newId();\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          var inherit = get$1(node, id0);\n          schedule(node, name, id1, i, group, {\n            time: inherit.time + inherit.delay + inherit.duration,\n            delay: 0,\n            duration: inherit.duration,\n            ease: inherit.ease\n          });\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id1);\n  }\n\n  var id = 0;\n\n  function Transition(groups, parents, name, id) {\n    this._groups = groups;\n    this._parents = parents;\n    this._name = name;\n    this._id = id;\n  }\n\n  function transition(name) {\n    return selection().transition(name);\n  }\n\n  function newId() {\n    return ++id;\n  }\n\n  var selection_prototype = selection.prototype;\n\n  Transition.prototype = transition.prototype = {\n    constructor: Transition,\n    select: transition_select,\n    selectAll: transition_selectAll,\n    filter: transition_filter,\n    merge: transition_merge,\n    selection: transition_selection,\n    transition: transition_transition,\n    call: selection_prototype.call,\n    nodes: selection_prototype.nodes,\n    node: selection_prototype.node,\n    size: selection_prototype.size,\n    empty: selection_prototype.empty,\n    each: selection_prototype.each,\n    on: transition_on,\n    attr: transition_attr,\n    attrTween: transition_attrTween,\n    style: transition_style,\n    styleTween: transition_styleTween,\n    text: transition_text,\n    remove: transition_remove,\n    tween: transition_tween,\n    delay: transition_delay,\n    duration: transition_duration,\n    ease: transition_ease\n  };\n\n  var defaultTiming = {\n    time: null, // Set on use.\n    delay: 0,\n    duration: 250,\n    ease: easeCubicInOut\n  };\n\n  function inherit(node, id) {\n    var timing;\n    while (!(timing = node.__transition) || !(timing = timing[id])) {\n      if (!(node = node.parentNode)) {\n        return defaultTiming.time = now(), defaultTiming;\n      }\n    }\n    return timing;\n  }\n\n  function selection_transition(name) {\n    var id,\n        timing;\n\n    if (name instanceof Transition) {\n      id = name._id, name = name._name;\n    } else {\n      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n    }\n\n    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n        if (node = group[i]) {\n          schedule(node, name, id, i, group, timing || inherit(node, id));\n        }\n      }\n    }\n\n    return new Transition(groups, this._parents, name, id);\n  }\n\n  selection.prototype.interrupt = selection_interrupt;\n  selection.prototype.transition = selection_transition;\n\n  var root$1 = [null];\n\n  function active(node, name) {\n    var schedules = node.__transition,\n        schedule,\n        i;\n\n    if (schedules) {\n      name = name == null ? null : name + \"\";\n      for (i in schedules) {\n        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n          return new Transition([[node]], root$1, name, +i);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  var slice$4 = Array.prototype.slice;\n\n  function identity$5(x) {\n    return x;\n  }\n\n  var top = 1;\n  var right = 2;\n  var bottom = 3;\n  var left = 4;\nvar   epsilon$2 = 1e-6;\n  function translateX(scale0, scale1, d) {\n    var x = scale0(d);\n    return \"translate(\" + (isFinite(x) ? x : scale1(d)) + \",0)\";\n  }\n\n  function translateY(scale0, scale1, d) {\n    var y = scale0(d);\n    return \"translate(0,\" + (isFinite(y) ? y : scale1(d)) + \")\";\n  }\n\n  function center(scale) {\n    var width = scale.bandwidth() / 2;\n    return function(d) {\n      return scale(d) + width;\n    };\n  }\n\n  function entering() {\n    return !this.__axis;\n  }\n\n  function axis(orient, scale) {\n    var tickArguments = [],\n        tickValues = null,\n        tickFormat = null,\n        tickSizeInner = 6,\n        tickSizeOuter = 6,\n        tickPadding = 3;\n\n    function axis(context) {\n      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,\n          spacing = Math.max(tickSizeInner, 0) + tickPadding,\n          transform = orient === top || orient === bottom ? translateX : translateY,\n          range = scale.range(),\n          range0 = range[0] + 0.5,\n          range1 = range[range.length - 1] + 0.5,\n          position = (scale.bandwidth ? center : identity$5)(scale.copy()),\n          selection = context.selection ? context.selection() : context,\n          path = selection.selectAll(\".domain\").data([null]),\n          tick = selection.selectAll(\".tick\").data(values, scale).order(),\n          tickExit = tick.exit(),\n          tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n          line = tick.select(\"line\"),\n          text = tick.select(\"text\"),\n          k = orient === top || orient === left ? -1 : 1,\n          x, y = orient === left || orient === right ? (x = \"x\", \"y\") : (x = \"y\", \"x\");\n\n      path = path.merge(path.enter().insert(\"path\", \".tick\")\n          .attr(\"class\", \"domain\")\n          .attr(\"stroke\", \"#000\"));\n\n      tick = tick.merge(tickEnter);\n\n      line = line.merge(tickEnter.append(\"line\")\n          .attr(\"stroke\", \"#000\")\n          .attr(x + \"2\", k * tickSizeInner)\n          .attr(y + \"1\", 0.5)\n          .attr(y + \"2\", 0.5));\n\n      text = text.merge(tickEnter.append(\"text\")\n          .attr(\"fill\", \"#000\")\n          .attr(x, k * spacing)\n          .attr(y, 0.5)\n          .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \".71em\" : \".32em\"));\n\n      if (context !== selection) {\n        path = path.transition(context);\n        tick = tick.transition(context);\n        line = line.transition(context);\n        text = text.transition(context);\n\n        tickExit = tickExit.transition(context)\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(position, this.parentNode.__axis || position, d); });\n\n        tickEnter\n            .attr(\"opacity\", epsilon$2)\n            .attr(\"transform\", function(d) { return transform(this.parentNode.__axis || position, position, d); });\n      }\n\n      tickExit.remove();\n\n      path\n          .attr(\"d\", orient === left || orient == right\n              ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\n              : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\n\n      tick\n          .attr(\"opacity\", 1)\n          .attr(\"transform\", function(d) { return transform(position, position, d); });\n\n      line\n          .attr(x + \"2\", k * tickSizeInner);\n\n      text\n          .attr(x, k * spacing)\n          .text(format);\n\n      selection.filter(entering)\n          .attr(\"fill\", \"none\")\n          .attr(\"font-size\", 10)\n          .attr(\"font-family\", \"sans-serif\")\n          .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n      selection\n          .each(function() { this.__axis = position; });\n    }\n\n    axis.scale = function(_) {\n      return arguments.length ? (scale = _, axis) : scale;\n    };\n\n    axis.ticks = function() {\n      return tickArguments = slice$4.call(arguments), axis;\n    };\n\n    axis.tickArguments = function(_) {\n      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();\n    };\n\n    axis.tickValues = function(_) {\n      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();\n    };\n\n    axis.tickFormat = function(_) {\n      return arguments.length ? (tickFormat = _, axis) : tickFormat;\n    };\n\n    axis.tickSize = function(_) {\n      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeInner = function(_) {\n      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n    };\n\n    axis.tickSizeOuter = function(_) {\n      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n    };\n\n    axis.tickPadding = function(_) {\n      return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n    };\n\n    return axis;\n  }\n\n  function axisTop(scale) {\n    return axis(top, scale);\n  }\n\n  function axisRight(scale) {\n    return axis(right, scale);\n  }\n\n  function axisBottom(scale) {\n    return axis(bottom, scale);\n  }\n\n  function axisLeft(scale) {\n    return axis(left, scale);\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n    while (children = node.children) node = children[0];\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n    while (children = node.children) node = children[children.length - 1];\n    return node;\n  }\n\n  function cluster() {\n    var separation = defaultSeparation,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0;\n\n      // First walk, computing the initial x & y values.\n      root.eachAfter(function(node) {\n        var children = node.children;\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2;\n\n      // Second walk, normalizing x & y to the desired size.\n      return root.eachAfter(nodeSize ? function(node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function(x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n    };\n\n    cluster.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return cluster;\n  }\n\n  function node_each(callback) {\n    var node = this, current, next = [node], children, i, n;\n    do {\n      current = next.reverse(), next = [];\n      while (node = current.pop()) {\n        callback(node), children = node.children;\n        if (children) for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    } while (next.length);\n    return this;\n  }\n\n  function node_eachBefore(callback) {\n    var node = this, nodes = [node], children, i;\n    while (node = nodes.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n    return this;\n  }\n\n  function node_eachAfter(callback) {\n    var node = this, nodes = [node], next = [], children, i, n;\n    while (node = nodes.pop()) {\n      next.push(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n    while (node = next.pop()) {\n      callback(node);\n    }\n    return this;\n  }\n\n  function node_sum(value) {\n    return this.eachAfter(function(node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n      while (--i >= 0) sum += children[i].value;\n      node.value = sum;\n    });\n  }\n\n  function node_sort(compare) {\n    return this.eachBefore(function(node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path(end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n    var k = nodes.length;\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n    return c;\n  }\n\n  function node_ancestors() {\n    var node = this, nodes = [node];\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n    return nodes;\n  }\n\n  function node_descendants() {\n    var nodes = [];\n    this.each(function(node) {\n      nodes.push(node);\n    });\n    return nodes;\n  }\n\n  function node_leaves() {\n    var leaves = [];\n    this.eachBefore(function(node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links() {\n    var root = this, links = [];\n    root.each(function(node) {\n      if (node !== root) { // Don’t include the root’s parent, if any.\n        links.push({source: node.parent, target: node});\n      }\n    });\n    return links;\n  }\n\n  function hierarchy(data, children) {\n    var root = new Node(data),\n        valued = +data.value && (root.value = data.value),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    if (children == null) children = defaultChildren;\n\n    while (node = nodes.pop()) {\n      if (valued) node.value = +node.data.value;\n      if ((childs = children(node.data)) && (n = childs.length)) {\n        node.children = new Array(n);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new Node(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function defaultChildren(d) {\n    return d.children;\n  }\n\n  function copyData(node) {\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n    do node.height = height;\n    while ((node = node.parent) && (node.height < ++height));\n  }\n\n  function Node(data) {\n    this.data = data;\n    this.depth =\n    this.height = 0;\n    this.parent = null;\n  }\n\n  Node.prototype = hierarchy.prototype = {\n    constructor: Node,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy\n  };\n\n  function Node$2(value) {\n    this._ = value;\n    this.next = null;\n  }\n\n  function shuffle$1(array) {\n    var i,\n        n = (array = array.slice()).length,\n        head = null,\n        node = head;\n\n    while (n) {\n      var next = new Node$2(array[n - 1]);\n      if (node) node = node.next = next;\n      else node = head = next;\n      array[i] = array[--n];\n    }\n\n    return {\n      head: head,\n      tail: node\n    };\n  }\n\n  function enclose(circles) {\n    return encloseN(shuffle$1(circles), []);\n  }\n\n  function encloses(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r - b.r;\n    return dr * dr + 1e-6 > dx * dx + dy * dy;\n  }\n\n  // Returns the smallest circle that contains circles L and intersects circles B.\n  function encloseN(L, B) {\n    var circle,\n        l0 = null,\n        l1 = L.head,\n        l2,\n        p1;\n\n    switch (B.length) {\n      case 1: circle = enclose1(B[0]); break;\n      case 2: circle = enclose2(B[0], B[1]); break;\n      case 3: circle = enclose3(B[0], B[1], B[2]); break;\n    }\n\n    while (l1) {\n      p1 = l1._, l2 = l1.next;\n      if (!circle || !encloses(circle, p1)) {\n\n        // Temporarily truncate L before l1.\n        if (l0) L.tail = l0, l0.next = null;\n        else L.head = L.tail = null;\n\n        B.push(p1);\n        circle = encloseN(L, B); // Note: reorders L!\n        B.pop();\n\n        // Move l1 to the front of L and reconnect the truncated list L.\n        if (L.head) l1.next = L.head, L.head = l1;\n        else l1.next = null, L.head = L.tail = l1;\n        l0 = L.tail, l0.next = l2;\n\n      } else {\n        l0 = l1;\n      }\n      l1 = l2;\n    }\n\n    L.tail = l0;\n    return circle;\n  }\n\n  function enclose1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function enclose2(a, b) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function enclose3(a, b, c) {\n    var x1 = a.x, y1 = a.y, r1 = a.r,\n        x2 = b.x, y2 = b.y, r2 = b.r,\n        x3 = c.x, y3 = c.y, r3 = c.r,\n        a2 = 2 * (x1 - x2),\n        b2 = 2 * (y1 - y2),\n        c2 = 2 * (r2 - r1),\n        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,\n        a3 = 2 * (x1 - x3),\n        b3 = 2 * (y1 - y3),\n        c3 = 2 * (r3 - r1),\n        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / ab - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / ab - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (xa * xb + ya * yb + r1),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);\n    return {\n      x: xa + xb * r + x1,\n      y: ya + yb * r + y1,\n      r: r\n    };\n  }\n\n  function place(a, b, c) {\n    var ax = a.x,\n        ay = a.y,\n        da = b.r + c.r,\n        db = a.r + c.r,\n        dx = b.x - ax,\n        dy = b.y - ay,\n        dc = dx * dx + dy * dy;\n    if (dc) {\n      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = ax + x * dx + y * dy;\n      c.y = ay + x * dy - y * dx;\n    } else {\n      c.x = ax + db;\n      c.y = ay;\n    }\n  }\n\n  function intersects(a, b) {\n    var dx = b.x - a.x,\n        dy = b.y - a.y,\n        dr = a.r + b.r;\n    return dr * dr > dx * dx + dy * dy;\n  }\n\n  function distance2(circle, x, y) {\n    var dx = circle.x - x,\n        dy = circle.y - y;\n    return dx * dx + dy * dy;\n  }\n\n  function Node$1(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = circles.length)) return 0;\n\n    var a, b, c, n;\n\n    // Place the first circle.\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r;\n\n    // Place the second circle.\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r;\n\n    // Place the third circle.\n    place(b, a, c = circles[2]);\n\n    // Initialize the weighted centroid.\n    var aa = a.r * a.r,\n        ba = b.r * b.r,\n        ca = c.r * c.r,\n        oa = aa + ba + ca,\n        ox = aa * a.x + ba * b.x + ca * c.x,\n        oy = aa * a.y + ba * b.y + ca * c.y,\n        cx, cy, i, j, k, sj, sk;\n\n    // Initialize the front-chain using the first three circles a, b and c.\n    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a;\n\n    // Attempt to place each remaining circle…\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n      // If there are only three elements in the front-chain…\n      if ((k = a.previous) === (j = b.next)) {\n        // If the new circle intersects the third circle,\n        // rotate the front chain to try the next position.\n        if (intersects(j._, c._)) {\n          a = b, b = j, --i;\n          continue pack;\n        }\n      }\n\n      // Find the closest intersecting circle on the front-chain, if any.\n      else {\n        sj = j._.r, sk = k._.r;\n        do {\n          if (sj <= sk) {\n            if (intersects(j._, c._)) {\n              b = j, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            j = j.next, sj += j._.r;\n          } else {\n            if (intersects(k._, c._)) {\n              a = k, a.next = b, b.previous = a, --i;\n              continue pack;\n            }\n            k = k.previous, sk += k._.r;\n          }\n        } while (j !== k.next);\n      }\n\n      // Success! Insert the new circle c between a and b.\n      c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n      // Update the weighted centroid.\n      oa += ca = c._.r * c._.r;\n      ox += ca * c._.x;\n      oy += ca * c._.y;\n\n      // Compute the new closest circle a to centroid.\n      aa = distance2(a._, cx = ox / oa, cy = oy / oa);\n      while ((c = c.next) !== b) {\n        if ((ca = distance2(c._, cx, cy)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n      b = a.next;\n    }\n\n    // Compute the enclosing circle of the front chain.\n    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n    // Translate the circles to put the enclosing circle around the origin.\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function siblings(circles) {\n    packEnclose(circles);\n    return circles;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error;\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n\n  function constant$5(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function index() {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius))\n            .eachAfter(packChildren(padding, 0.5))\n            .eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius))\n            .eachAfter(packChildren(constantZero, 1))\n            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n      return root;\n    }\n\n    pack.radius = function(x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function(x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant$5(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function(node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function(node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function(node) {\n      var parent = node.parent;\n      node.r *= k;\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition() {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 =\n      root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function(node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function(x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function(x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\nvar   keyPrefix$1 = \"$\";\n  var preroot = {depth: -1};\n  var ambiguous = {};\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify() {\n    var id = defaultId,\n        parentId = defaultParentId;\n\n    function stratify(data) {\n      var d,\n          i,\n          n = data.length,\n          root,\n          parent,\n          node,\n          nodes = new Array(n),\n          nodeId,\n          nodeKey,\n          nodeByKey = {};\n\n      for (i = 0; i < n; ++i) {\n        d = data[i], node = nodes[i] = new Node(d);\n        if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = keyPrefix$1 + (node.id = nodeId);\n          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], nodeId = parentId(data[i], i, data);\n        if (nodeId == null || !(nodeId += \"\")) {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        } else {\n          parent = nodeByKey[keyPrefix$1 + nodeId];\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);\n          else parent.children = [node];\n          node.parent = parent;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\");\n      root.parent = preroot;\n      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n\n      return root;\n    }\n\n    stratify.id = function(x) {\n      return arguments.length ? (id = required(x), stratify) : id;\n    };\n\n    stratify.parentId = function(x) {\n      return arguments.length ? (parentId = required(x), stratify) : parentId;\n    };\n\n    return stratify;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  }\n\n  // This function works analogously to nextLeft.\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  }\n\n  // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n\n  // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n\n  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n    this.a = this; // ancestor\n    this.z = 0; // prelim\n    this.m = 0; // mod\n    this.c = 0; // change\n    this.s = 0; // shift\n    this.t = null; // thread\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  }\n\n  // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n  function tree() {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root);\n\n      // Compute the layout using Buchheim et al.’s algorithm.\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk);\n\n      // If a fixed node size is specified, scale x and y.\n      if (nodeSize) root.eachBefore(sizeNode);\n\n      // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n\n      return root;\n    }\n\n    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n\n    // Computes all real x-coordinates by summing up the modifiers recursively.\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n\n    // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function(x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function(x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n    };\n\n    tree.nodeSize = function(x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n    };\n\n    return tree;\n  }\n\n  function treemapSlice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1,\n        n = nodes.length,\n        dx, dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0;\n      minValue = maxValue = sumValue = nodes[i0].value;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (i1 = i0 + 1; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n        minRatio = newRatio;\n      }\n\n      // Position and record the row orientation.\n      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n\n  var squarify = (function custom(ratio) {\n\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function index$1() {\n    var tile = squarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 =\n      root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function(x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function(x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function(x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function(x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function(x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function(x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function(x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function(x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function(x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function(x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant$5(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function binary(parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i, n = nodes.length,\n        sum, sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = (value / 2) + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;\n        else hi = mid;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if ((y1 - y0) > (x1 - x0)) {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      } else {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      }\n    }\n  }\n\n  function sliceDice(parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var resquarify = (function custom(ratio) {\n\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function(x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  function center$1(x, y) {\n    var nodes;\n\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n\n    function force() {\n      var i,\n          n = nodes.length,\n          node,\n          sx = 0,\n          sy = 0;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i], sx += node.x, sy += node.y;\n      }\n\n      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\n        node = nodes[i], node.x -= sx, node.y -= sy;\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = +_, force) : x;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = +_, force) : y;\n    };\n\n    return force;\n  }\n\n  function constant$6(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function jiggle() {\n    return (Math.random() - 0.5) * 1e-6;\n  }\n\n  function x$1(d) {\n    return d.x + d.vx;\n  }\n\n  function y$1(d) {\n    return d.y + d.vy;\n  }\n\n  function collide(radius) {\n    var nodes,\n        radii,\n        strength = 1,\n        iterations = 1;\n\n    if (typeof radius !== \"function\") radius = constant$6(radius == null ? 1 : +radius);\n\n    function force() {\n      var i, n = nodes.length,\n          tree,\n          node,\n          xi,\n          yi,\n          ri,\n          ri2;\n\n      for (var k = 0; k < iterations; ++k) {\n        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          ri = radii[i], ri2 = ri * ri;\n          xi = node.x + node.vx;\n          yi = node.y + node.vy;\n          tree.visit(apply);\n        }\n      }\n\n      function apply(quad, x0, y0, x1, y1) {\n        var data = quad.data, rj = quad.r, r = ri + rj;\n        if (data) {\n          if (data.index > i) {\n            var x = xi - data.x - data.vx,\n                y = yi - data.y - data.vy,\n                l = x * x + y * y;\n            if (l < r * r) {\n              if (x === 0) x = jiggle(), l += x * x;\n              if (y === 0) y = jiggle(), l += y * y;\n              l = (r - (l = Math.sqrt(l))) / l * strength;\n              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n              node.vy += (y *= l) * r;\n              data.vx -= x * (r = 1 - r);\n              data.vy -= y * r;\n            }\n          }\n          return;\n        }\n        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n      }\n    }\n\n    function prepare(quad) {\n      if (quad.data) return quad.r = radii[quad.data.index];\n      for (var i = quad.r = 0; i < 4; ++i) {\n        if (quad[i] && quad[i].r > quad.r) {\n          quad.r = quad[i].r;\n        }\n      }\n    }\n\n    force.initialize = function(_) {\n      var i, n = (nodes = _).length; radii = new Array(n);\n      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = +_, force) : strength;\n    };\n\n    force.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$6(+_), force) : radius;\n    };\n\n    return force;\n  }\n\n  function index$2(d, i) {\n    return i;\n  }\n\n  function link(links) {\n    var id = index$2,\n        strength = defaultStrength,\n        strengths,\n        distance = constant$6(30),\n        distances,\n        nodes,\n        count,\n        bias,\n        iterations = 1;\n\n    if (links == null) links = [];\n\n    function defaultStrength(link) {\n      return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n\n    function force(alpha) {\n      for (var k = 0, n = links.length; k < iterations; ++k) {\n        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n          link = links[i], source = link.source, target = link.target;\n          x = target.x + target.vx - source.x - source.vx || jiggle();\n          y = target.y + target.vy - source.y - source.vy || jiggle();\n          l = Math.sqrt(x * x + y * y);\n          l = (l - distances[i]) / l * alpha * strengths[i];\n          x *= l, y *= l;\n          target.vx -= x * (b = bias[i]);\n          target.vy -= y * b;\n          source.vx += x * (b = 1 - b);\n          source.vy += y * b;\n        }\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n\n      var i,\n          n = nodes.length,\n          m = links.length,\n          nodeById = map$1(nodes, id),\n          link;\n\n      for (i = 0, count = new Array(n); i < n; ++i) {\n        count[i] = 0;\n      }\n\n      for (i = 0; i < m; ++i) {\n        link = links[i], link.index = i;\n        if (typeof link.source !== \"object\") link.source = nodeById.get(link.source);\n        if (typeof link.target !== \"object\") link.target = nodeById.get(link.target);\n        ++count[link.source.index], ++count[link.target.index];\n      }\n\n      for (i = 0, bias = new Array(m); i < m; ++i) {\n        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n      }\n\n      strengths = new Array(m), initializeStrength();\n      distances = new Array(m), initializeDistance();\n    }\n\n    function initializeStrength() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        strengths[i] = +strength(links[i], i, links);\n      }\n    }\n\n    function initializeDistance() {\n      if (!nodes) return;\n\n      for (var i = 0, n = links.length; i < n; ++i) {\n        distances[i] = +distance(links[i], i, links);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.links = function(_) {\n      return arguments.length ? (links = _, initialize(), force) : links;\n    };\n\n    force.id = function(_) {\n      return arguments.length ? (id = _, force) : id;\n    };\n\n    force.iterations = function(_) {\n      return arguments.length ? (iterations = +_, force) : iterations;\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initializeStrength(), force) : strength;\n    };\n\n    force.distance = function(_) {\n      return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant$6(+_), initializeDistance(), force) : distance;\n    };\n\n    return force;\n  }\n\n  function x$2(d) {\n    return d.x;\n  }\n\n  function y$2(d) {\n    return d.y;\n  }\n\n  var initialRadius = 10;\n  var initialAngle = Math.PI * (3 - Math.sqrt(5));\n  function simulation(nodes) {\n    var simulation,\n        alpha = 1,\n        alphaMin = 0.001,\n        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n        alphaTarget = 0,\n        drag = 0.6,\n        forces = map$1(),\n        fixes = {},\n        stepper = timer(step),\n        event = dispatch(\"tick\", \"end\");\n\n    if (nodes == null) nodes = [];\n\n    function step() {\n      tick();\n      event.call(\"tick\", simulation);\n      if (alpha < alphaMin) {\n        stepper.stop();\n        event.call(\"end\", simulation);\n      }\n    }\n\n    function tick() {\n      var i, n = nodes.length, node, fix;\n\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.each(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        node.x += node.vx *= drag;\n        node.y += node.vy *= drag;\n      }\n\n      for (i in fixes) {\n        fix = fixes[i], node = nodes[i];\n        node.x = fix.x;\n        node.y = fix.y;\n        node.vx =\n        node.vy = 0;\n      }\n    }\n\n    function initializeNodes() {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.index = i;\n        if (isNaN(node.x) || isNaN(node.y)) {\n          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;\n          node.x = radius * Math.cos(angle);\n          node.y = radius * Math.sin(angle);\n        }\n        if (isNaN(node.vx) || isNaN(node.vy)) {\n          node.vx = node.vy = 0;\n        }\n      }\n    }\n\n    function initializeForce(force) {\n      if (force.initialize) force.initialize(nodes);\n      return force;\n    }\n\n    initializeNodes();\n\n    return simulation = {\n      tick: tick,\n\n      restart: function() {\n        return stepper.restart(step), simulation;\n      },\n\n      stop: function() {\n        return stepper.stop(), simulation;\n      },\n\n      nodes: function(_) {\n        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;\n      },\n\n      alpha: function(_) {\n        return arguments.length ? (alpha = +_, simulation) : alpha;\n      },\n\n      alphaMin: function(_) {\n        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n      },\n\n      alphaDecay: function(_) {\n        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n      },\n\n      alphaTarget: function(_) {\n        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n      },\n\n      drag: function(_) {\n        return arguments.length ? (drag = 1 - _, simulation) : 1 - drag;\n      },\n\n      force: function(name, _) {\n        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n      },\n\n      fix: function(node, x, y) {\n        return fixes[node.index] = {x: x == null ? node.x : +x, y: y == null ? node.y : +y}, simulation;\n      },\n\n      unfix: function(node) {\n        return delete fixes[node.index], simulation;\n      },\n\n      unfixAll: function() {\n        return fixes = {}, simulation;\n      },\n\n      find: function(x, y, radius) {\n        var i = 0,\n            n = nodes.length,\n            dx,\n            dy,\n            d2,\n            node,\n            closest;\n\n        if (radius == null) radius = Infinity;\n        else radius *= radius;\n\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dx = x - node.x;\n          dy = y - node.y;\n          d2 = dx * dx + dy * dy;\n          if (d2 < radius) closest = node, radius = d2;\n        }\n\n        return closest;\n      },\n\n      on: function(name, _) {\n        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n      }\n    };\n  }\n\n  function manyBody() {\n    var nodes,\n        node,\n        alpha,\n        strength = constant$6(-30),\n        strengths,\n        distanceMin2 = 1,\n        distanceMax2 = Infinity,\n        theta2 = 0.81;\n\n    function force(_) {\n      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);\n      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);\n    }\n\n    function accumulate(quad) {\n      var strength = 0, q, c, x, y, i;\n\n      // For internal nodes, accumulate forces from child quadrants.\n      if (quad.length) {\n        for (x = y = i = 0; i < 4; ++i) {\n          if ((q = quad[i]) && (c = q.value)) {\n            strength += c, x += c * q.x, y += c * q.y;\n          }\n        }\n        quad.x = x / strength;\n        quad.y = y / strength;\n      }\n\n      // For leaf nodes, accumulate forces from coincident quadrants.\n      else {\n        q = quad;\n        q.x = q.data.x;\n        q.y = q.data.y;\n        do strength += strengths[q.data.index];\n        while (q = q.next);\n      }\n\n      quad.value = strength;\n    }\n\n    function apply(quad, x1, _, x2) {\n      if (!quad.value) return true;\n\n      var x = quad.x - node.x,\n          y = quad.y - node.y,\n          w = x2 - x1,\n          l = x * x + y * y;\n\n      // Apply the Barnes-Hut approximation if possible.\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (w * w / theta2 < l) {\n        if (l < distanceMax2) {\n          if (x === 0) x = jiggle(), l += x * x;\n          if (y === 0) y = jiggle(), l += y * y;\n          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n          node.vx += x * quad.value * alpha / l;\n          node.vy += y * quad.value * alpha / l;\n        }\n        return true;\n      }\n\n      // Otherwise, process points directly.\n      else if (quad.length || l >= distanceMax2) return;\n\n      // Limit forces for very close nodes; randomize direction if coincident.\n      if (quad.data !== node || quad.next) {\n        if (x === 0) x = jiggle(), l += x * x;\n        if (y === 0) y = jiggle(), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n      }\n\n      do if (quad.data !== node) {\n        w = strengths[quad.data.index] * alpha / l;\n        node.vx += x * w;\n        node.vy += y * w;\n      } while (quad = quad.next);\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.distanceMin = function(_) {\n      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n\n    force.distanceMax = function(_) {\n      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n\n    force.theta = function(_) {\n      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n\n    return force;\n  }\n\n  function x$3(x) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        xz;\n\n    if (typeof x !== \"function\") x = constant$6(x == null ? 0 : +x);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      xz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : x;\n    };\n\n    return force;\n  }\n\n  function y$3(y) {\n    var strength = constant$6(0.1),\n        nodes,\n        strengths,\n        yz;\n\n    if (typeof y !== \"function\") y = constant$6(y == null ? 0 : +y);\n\n    function force(alpha) {\n      for (var i = 0, n = nodes.length, node; i < n; ++i) {\n        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n      }\n    }\n\n    function initialize() {\n      if (!nodes) return;\n      var i, n = nodes.length;\n      strengths = new Array(n);\n      yz = new Array(n);\n      for (i = 0; i < n; ++i) {\n        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n      }\n    }\n\n    force.initialize = function(_) {\n      nodes = _;\n      initialize();\n    };\n\n    force.strength = function(_) {\n      return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : strength;\n    };\n\n    force.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$6(+_), initialize(), force) : y;\n    };\n\n    return force;\n  }\n\n  function nopropagation() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  function dragDisable(view) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", noevent, true);\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", noevent, true);\n    } else {\n      root.__noselect = root.style.MozUserSelect;\n      root.style.MozUserSelect = \"none\";\n    }\n  }\n\n  function dragEnable(view, noclick) {\n    var root = view.document.documentElement,\n        selection = select(view).on(\"dragstart.drag\", null);\n    if (noclick) {\n      selection.on(\"click.drag\", noevent, true);\n      setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n    }\n    if (\"onselectstart\" in root) {\n      selection.on(\"selectstart.drag\", null);\n    } else {\n      root.style.MozUserSelect = root.__noselect;\n      delete root.__noselect;\n    }\n  }\n\n  function constant$7(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n    this.target = target;\n    this.type = type;\n    this.subject = subject;\n    this.identifier = id;\n    this.active = active;\n    this.x = x;\n    this.y = y;\n    this.dx = dx;\n    this.dy = dy;\n    this._ = dispatch;\n  }\n\n  DragEvent.prototype.on = function() {\n    var value = this._.on.apply(this._, arguments);\n    return value === this._ ? this : value;\n  };\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter() {\n    return !exports.event.button;\n  }\n\n  function defaultContainer() {\n    return this.parentNode;\n  }\n\n  function defaultSubject(d) {\n    return d == null ? {x: exports.event.x, y: exports.event.y} : d;\n  }\n\n  function drag() {\n    var filter = defaultFilter,\n        container = defaultContainer,\n        subject = defaultSubject,\n        gestures = {},\n        listeners = dispatch(\"start\", \"drag\", \"end\"),\n        active = 0,\n        mousemoving,\n        touchending;\n\n    function drag(selection) {\n      selection\n          .on(\"mousedown.drag\", mousedowned)\n          .on(\"touchstart.drag\", touchstarted)\n          .on(\"touchmove.drag\", touchmoved)\n          .on(\"touchend.drag touchcancel.drag\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var gesture = beforestart(\"mouse\", container.apply(this, arguments), mouse, this, arguments);\n      if (!gesture) return;\n      select(exports.event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n      dragDisable(exports.event.view);\n      nopropagation();\n      mousemoving = false;\n      gesture(\"start\");\n    }\n\n    function mousemoved() {\n      noevent();\n      mousemoving = true;\n      gestures.mouse(\"drag\");\n    }\n\n    function mouseupped() {\n      select(exports.event.view).on(\"mousemove.drag mouseup.drag\", null);\n      dragEnable(exports.event.view, mousemoving);\n      noevent();\n      gestures.mouse(\"end\");\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var touches = exports.event.changedTouches,\n          c = container.apply(this, arguments),\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {\n          nopropagation();\n          gesture(\"start\");\n        }\n      }\n    }\n\n    function touchmoved() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          noevent();\n          gesture(\"drag\");\n        }\n      }\n    }\n\n    function touchended() {\n      var touches = exports.event.changedTouches,\n          n = touches.length, i, gesture;\n\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      for (i = 0; i < n; ++i) {\n        if (gesture = gestures[touches[i].identifier]) {\n          nopropagation();\n          gesture(\"end\");\n        }\n      }\n    }\n\n    function beforestart(id, container, point, that, args) {\n      var p = point(container, id), s, dx, dy,\n          sublisteners = listeners.copy();\n\n      if (!customEvent(new DragEvent(drag, \"beforestart\", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {\n        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;\n        dx = s.x - p[0] || 0;\n        dy = s.y - p[1] || 0;\n        return true;\n      })) return;\n\n      return function gesture(type) {\n        var p0 = p, n;\n        switch (type) {\n          case \"start\": gestures[id] = gesture, n = active++; break;\n          case \"end\": delete gestures[id], --active; // nobreak\n          case \"drag\": p = point(container, id), n = active; break;\n        }\n        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);\n      };\n    }\n\n    drag.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$7(!!_), drag) : filter;\n    };\n\n    drag.container = function(_) {\n      return arguments.length ? (container = typeof _ === \"function\" ? _ : constant$7(_), drag) : container;\n    };\n\n    drag.subject = function(_) {\n      return arguments.length ? (subject = typeof _ === \"function\" ? _ : constant$7(_), drag) : subject;\n    };\n\n    drag.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? drag : value;\n    };\n\n    return drag;\n  }\n\n  function constant$8(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function x$4(d) {\n    return d[0];\n  }\n\n  function y$4(d) {\n    return d[1];\n  }\n\n  function RedBlackTree() {\n    this._ = null; // root node\n  }\n\n  function RedBlackNode(node) {\n    node.U = // parent node\n    node.C = // color - true for red, false for black\n    node.L = // left node\n    node.R = // right node\n    node.P = // previous node\n    node.N = null; // next node\n  }\n\n  RedBlackTree.prototype = {\n    constructor: RedBlackTree,\n\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = RedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              RedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              RedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            RedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n\n      var parent = node.U,\n          sibling,\n          left = node.L,\n          right = node.R,\n          next,\n          red;\n\n      if (!left) next = right;\n      else if (!right) next = left;\n      else next = RedBlackFirst(right);\n\n      if (parent) {\n        if (parent.L === node) parent.L = next;\n        else parent.R = next;\n      } else {\n        this._ = next;\n      }\n\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) { node.C = false; return; }\n\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if ((sibling.L && sibling.L.C)\n              || (sibling.R && sibling.R.C)) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              RedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            RedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            RedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              RedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            RedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n\n      if (node) node.C = false;\n    }\n  };\n\n  function RedBlackRotateLeft(tree, node) {\n    var p = node,\n        q = node.R,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n\n  function RedBlackRotateRight(tree, node) {\n    var p = node,\n        q = node.L,\n        parent = p.U;\n\n    if (parent) {\n      if (parent.L === p) parent.L = q;\n      else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n\n  function RedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n\n  function createEdge(left, right, v0, v1) {\n    var edge = [null, null],\n        index = edges.push(edge) - 1;\n    edge.left = left;\n    edge.right = right;\n    if (v0) setEdgeEnd(edge, left, right, v0);\n    if (v1) setEdgeEnd(edge, right, left, v1);\n    cells[left.index].halfedges.push(index);\n    cells[right.index].halfedges.push(index);\n    return edge;\n  }\n\n  function createBorderEdge(left, v0, v1) {\n    var edge = [v0, v1];\n    edge.left = left;\n    return edge;\n  }\n\n  function setEdgeEnd(edge, left, right, vertex) {\n    if (!edge[0] && !edge[1]) {\n      edge[0] = vertex;\n      edge.left = left;\n      edge.right = right;\n    } else if (edge.left === right) {\n      edge[1] = vertex;\n    } else {\n      edge[0] = vertex;\n    }\n  }\n\n  // Liang–Barsky line clipping.\n  function clipEdge(edge, x0, y0, x1, y1) {\n    var a = edge[0],\n        b = edge[1],\n        ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n    return true;\n  }\n\n  function connectEdge(edge, x0, y0, x1, y1) {\n    var v1 = edge[1];\n    if (v1) return true;\n\n    var v0 = edge[0],\n        left = edge.left,\n        right = edge.right,\n        lx = left[0],\n        ly = left[1],\n        rx = right[0],\n        ry = right[1],\n        fx = (lx + rx) / 2,\n        fy = (ly + ry) / 2,\n        fm,\n        fb;\n\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!v0) v0 = [fx, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [fx, y1];\n      } else {\n        if (!v0) v0 = [fx, y1];\n        else if (v0[1] < y0) return;\n        v1 = [fx, y0];\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!v0) v0 = [(y0 - fb) / fm, y0];\n          else if (v0[1] >= y1) return;\n          v1 = [(y1 - fb) / fm, y1];\n        } else {\n          if (!v0) v0 = [(y1 - fb) / fm, y1];\n          else if (v0[1] < y0) return;\n          v1 = [(y0 - fb) / fm, y0];\n        }\n      } else {\n        if (ly < ry) {\n          if (!v0) v0 = [x0, fm * x0 + fb];\n          else if (v0[0] >= x1) return;\n          v1 = [x1, fm * x1 + fb];\n        } else {\n          if (!v0) v0 = [x1, fm * x1 + fb];\n          else if (v0[0] < x0) return;\n          v1 = [x0, fm * x0 + fb];\n        }\n      }\n    }\n\n    edge[0] = v0;\n    edge[1] = v1;\n    return true;\n  }\n\n  function clipEdges(x0, y0, x1, y1) {\n    var i = edges.length,\n        edge;\n\n    while (i--) {\n      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n          || !clipEdge(edge, x0, y0, x1, y1)\n          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3\n              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {\n        delete edges[i];\n      }\n    }\n  }\n\n  function createCell(site) {\n    return cells[site.index] = {\n      site: site,\n      halfedges: []\n    };\n  }\n\n  function cellHalfedgeAngle(cell, edge) {\n    var site = cell.site,\n        va = edge.left,\n        vb = edge.right;\n    if (site === vb) vb = va, va = site;\n    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n    if (site === va) va = edge[1], vb = edge[0];\n    else va = edge[0], vb = edge[1];\n    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n  }\n\n  function cellHalfedgeStart(cell, edge) {\n    return edge[+(edge.left !== cell.site)];\n  }\n\n  function cellHalfedgeEnd(cell, edge) {\n    return edge[+(edge.left === cell.site)];\n  }\n\n  function sortCellHalfedges() {\n    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n        var index = new Array(m),\n            array = new Array(m);\n        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n        index.sort(function(i, j) { return array[j] - array[i]; });\n        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n        for (j = 0; j < m; ++j) halfedges[j] = array[j];\n      }\n    }\n  }\n\n  function clipCells(x0, y0, x1, y1) {\n    var nCells = cells.length,\n        iCell,\n        cell,\n        site,\n        iHalfedge,\n        halfedges,\n        nHalfedges,\n        start,\n        startX,\n        startY,\n        end,\n        endX,\n        endY,\n        cover = true;\n\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        halfedges = cell.halfedges;\n        iHalfedge = halfedges.length;\n\n        // Remove any dangling clipped edges.\n        while (iHalfedge--) {\n          if (!edges[halfedges[iHalfedge]]) {\n            halfedges.splice(iHalfedge, 1);\n          }\n        }\n\n        // Insert any border edges as necessary.\n        iHalfedge = 0, nHalfedges = halfedges.length;\n        while (iHalfedge < nHalfedges) {\n          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {\n            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]\n                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]\n                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]\n                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]\n                : null)) - 1);\n            ++nHalfedges;\n          }\n        }\n\n        if (nHalfedges) cover = false;\n      }\n    }\n\n    // If there weren’t any edges, have the closest site cover the extent.\n    // It doesn’t matter which corner of the extent we measure!\n    if (cover) {\n      var dx, dy, d2, dc = Infinity;\n\n      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n        if (cell = cells[iCell]) {\n          site = cell.site;\n          dx = site[0] - x0;\n          dy = site[1] - y0;\n          d2 = dx * dx + dy * dy;\n          if (d2 < dc) dc = d2, cover = cell;\n        }\n      }\n\n      if (cover) {\n        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n        cover.halfedges.push(\n          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n          edges.push(createBorderEdge(site, v01, v11)) - 1,\n          edges.push(createBorderEdge(site, v11, v10)) - 1,\n          edges.push(createBorderEdge(site, v10, v00)) - 1\n        );\n      }\n    }\n\n    // Lastly delete any cells with no edges; these were entirely clipped.\n    for (iCell = 0; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        if (!cell.halfedges.length) {\n          delete cells[iCell];\n        }\n      }\n    }\n  }\n\n  var circlePool = [];\n\n  var firstCircle;\n\n  function Circle() {\n    RedBlackNode(this);\n    this.x =\n    this.y =\n    this.arc =\n    this.site =\n    this.cy = null;\n  }\n\n  function attachCircle(arc) {\n    var lArc = arc.P,\n        rArc = arc.N;\n\n    if (!lArc || !rArc) return;\n\n    var lSite = lArc.site,\n        cSite = arc.site,\n        rSite = rArc.site;\n\n    if (lSite === rSite) return;\n\n    var bx = cSite[0],\n        by = cSite[1],\n        ax = lSite[0] - bx,\n        ay = lSite[1] - by,\n        cx = rSite[0] - bx,\n        cy = rSite[1] - by;\n\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -epsilon2$1) return;\n\n    var ha = ax * ax + ay * ay,\n        hc = cx * cx + cy * cy,\n        x = (cy * ha - ay * hc) / d,\n        y = (ax * hc - cx * ha) / d;\n\n    var circle = circlePool.pop() || new Circle;\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n    arc.circle = circle;\n\n    var before = null,\n        node = circles._;\n\n    while (node) {\n      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n        if (node.L) node = node.L;\n        else { before = node.P; break; }\n      } else {\n        if (node.R) node = node.R;\n        else { before = node; break; }\n      }\n    }\n\n    circles.insert(before, circle);\n    if (!before) firstCircle = circle;\n  }\n\n  function detachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) firstCircle = circle.N;\n      circles.remove(circle);\n      circlePool.push(circle);\n      RedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n\n  var beachPool = [];\n\n  function Beach() {\n    RedBlackNode(this);\n    this.edge =\n    this.site =\n    this.circle = null;\n  }\n\n  function createBeach(site) {\n    var beach = beachPool.pop() || new Beach;\n    beach.site = site;\n    return beach;\n  }\n\n  function detachBeach(beach) {\n    detachCircle(beach);\n    beaches.remove(beach);\n    beachPool.push(beach);\n    RedBlackNode(beach);\n  }\n\n  function removeBeach(beach) {\n    var circle = beach.circle,\n        x = circle.x,\n        y = circle.cy,\n        vertex = [x, y],\n        previous = beach.P,\n        next = beach.N,\n        disappearing = [beach];\n\n    detachBeach(beach);\n\n    var lArc = previous;\n    while (lArc.circle\n        && Math.abs(x - lArc.circle.x) < epsilon$3\n        && Math.abs(y - lArc.circle.cy) < epsilon$3) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      detachBeach(lArc);\n      lArc = previous;\n    }\n\n    disappearing.unshift(lArc);\n    detachCircle(lArc);\n\n    var rArc = next;\n    while (rArc.circle\n        && Math.abs(x - rArc.circle.x) < epsilon$3\n        && Math.abs(y - rArc.circle.cy) < epsilon$3) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      detachBeach(rArc);\n      rArc = next;\n    }\n\n    disappearing.push(rArc);\n    detachCircle(rArc);\n\n    var nArcs = disappearing.length,\n        iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function addBeach(site) {\n    var x = site[0],\n        directrix = site[1],\n        lArc,\n        rArc,\n        dxl,\n        dxr,\n        node = beaches._;\n\n    while (node) {\n      dxl = leftBreakPoint(node, directrix) - x;\n      if (dxl > epsilon$3) node = node.L; else {\n        dxr = x - rightBreakPoint(node, directrix);\n        if (dxr > epsilon$3) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -epsilon$3) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -epsilon$3) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n\n    createCell(site);\n    var newArc = createBeach(site);\n    beaches.insert(lArc, newArc);\n\n    if (!lArc && !rArc) return;\n\n    if (lArc === rArc) {\n      detachCircle(lArc);\n      rArc = createBeach(lArc.site);\n      beaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n      attachCircle(lArc);\n      attachCircle(rArc);\n      return;\n    }\n\n    if (!rArc) { // && lArc\n      newArc.edge = createEdge(lArc.site, newArc.site);\n      return;\n    }\n\n    // else lArc !== rArc\n    detachCircle(lArc);\n    detachCircle(rArc);\n\n    var lSite = lArc.site,\n        ax = lSite[0],\n        ay = lSite[1],\n        bx = site[0] - ax,\n        by = site[1] - ay,\n        rSite = rArc.site,\n        cx = rSite[0] - ax,\n        cy = rSite[1] - ay,\n        d = 2 * (bx * cy - by * cx),\n        hb = bx * bx + by * by,\n        hc = cx * cx + cy * cy,\n        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n    setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = createEdge(lSite, site, null, vertex);\n    rArc.edge = createEdge(site, rSite, null, vertex);\n    attachCircle(lArc);\n    attachCircle(rArc);\n  }\n\n  function leftBreakPoint(arc, directrix) {\n    var site = arc.site,\n        rfocx = site[0],\n        rfocy = site[1],\n        pby2 = rfocy - directrix;\n\n    if (!pby2) return rfocx;\n\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n\n    site = lArc.site;\n    var lfocx = site[0],\n        lfocy = site[1],\n        plby2 = lfocy - directrix;\n\n    if (!plby2) return lfocx;\n\n    var hl = lfocx - rfocx,\n        aby2 = 1 / pby2 - 1 / plby2,\n        b = hl / plby2;\n\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n    return (rfocx + lfocx) / 2;\n  }\n\n  function rightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return leftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site[1] === directrix ? site[0] : Infinity;\n  }\n\n  var epsilon$3 = 1e-6;\n  var epsilon2$1 = 1e-12;\n  var beaches;\n  var cells;\n  var circles;\n  var edges;\n\n  function triangleArea(a, b, c) {\n    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n  }\n\n  function lexicographic(a, b) {\n    return b[1] - a[1]\n        || b[0] - a[0];\n  }\n\n  function Diagram(sites, extent) {\n    var site = sites.sort(lexicographic).pop(),\n        x,\n        y,\n        circle;\n\n    edges = [];\n    cells = new Array(sites.length);\n    beaches = new RedBlackTree;\n    circles = new RedBlackTree;\n\n    while (true) {\n      circle = firstCircle;\n      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n        if (site[0] !== x || site[1] !== y) {\n          addBeach(site);\n          x = site[0], y = site[1];\n        }\n        site = sites.pop();\n      } else if (circle) {\n        removeBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n\n    sortCellHalfedges();\n\n    if (extent) {\n      var x0 = +extent[0][0],\n          y0 = +extent[0][1],\n          x1 = +extent[1][0],\n          y1 = +extent[1][1];\n      clipEdges(x0, y0, x1, y1);\n      clipCells(x0, y0, x1, y1);\n    }\n\n    this.edges = edges;\n    this.cells = cells;\n\n    beaches =\n    circles =\n    edges =\n    cells = null;\n  }\n\n  Diagram.prototype = {\n    constructor: Diagram,\n\n    polygons: function() {\n      var edges = this.edges;\n\n      return this.cells.map(function(cell) {\n        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n        polygon.data = cell.site.data;\n        return polygon;\n      });\n    },\n\n    triangles: function() {\n      var triangles = [],\n          edges = this.edges;\n\n      this.cells.forEach(function(cell, i) {\n        var site = cell.site,\n            halfedges = cell.halfedges,\n            j = -1,\n            m = halfedges.length,\n            s0,\n            e1 = edges[halfedges[m - 1]],\n            s1 = e1.left === site ? e1.right : e1.left;\n\n        while (++j < m) {\n          s0 = s1;\n          e1 = edges[halfedges[j]];\n          s1 = e1.left === site ? e1.right : e1.left;\n          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n            triangles.push([site.data, s0.data, s1.data]);\n          }\n        }\n      });\n\n      return triangles;\n    },\n\n    links: function() {\n      return this.edges.filter(function(edge) {\n        return edge.right;\n      }).map(function(edge) {\n        return {\n          source: edge.left.data,\n          target: edge.right.data\n        };\n      });\n    }\n  }\n\n  function voronoi() {\n    var x = x$4,\n        y = y$4,\n        extent = null;\n\n    function voronoi(data) {\n      return new Diagram(data.map(function(d, i) {\n        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];\n        s.index = i;\n        s.data = d;\n        return s;\n      }), extent);\n    }\n\n    voronoi.polygons = function(data) {\n      return voronoi(data).polygons();\n    };\n\n    voronoi.links = function(data) {\n      return voronoi(data).links();\n    };\n\n    voronoi.triangles = function(data) {\n      return voronoi(data).triangles();\n    };\n\n    voronoi.x = function(_) {\n      return arguments.length ? (x = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : x;\n    };\n\n    voronoi.y = function(_) {\n      return arguments.length ? (y = typeof _ === \"function\" ? _ : constant$8(+_), voronoi) : y;\n    };\n\n    voronoi.extent = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n    };\n\n    voronoi.size = function(_) {\n      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0], extent[1][1]];\n    };\n\n    return voronoi;\n  }\n\n  function constant$9(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function ZoomEvent(target, type, transform) {\n    this.target = target;\n    this.type = type;\n    this.transform = transform;\n  }\n\n  function Transform(k, x, y) {\n    this.k = k;\n    this.x = x;\n    this.y = y;\n  }\n\n  Transform.prototype = {\n    constructor: Transform,\n    scale: function(k) {\n      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n    },\n    translate: function(x, y) {\n      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n    },\n    apply: function(point) {\n      return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n    },\n    applyX: function(x) {\n      return x * this.k + this.x;\n    },\n    applyY: function(y) {\n      return y * this.k + this.y;\n    },\n    invert: function(location) {\n      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n    },\n    invertX: function(x) {\n      return (x - this.x) / this.k;\n    },\n    invertY: function(y) {\n      return (y - this.y) / this.k;\n    },\n    rescaleX: function(x) {\n      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n    },\n    rescaleY: function(y) {\n      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n    },\n    toString: function() {\n      return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n    }\n  };\n\n  var identity$6 = new Transform(1, 0, 0);\n\n  transform.prototype = Transform.prototype;\n\n  function transform(node) {\n    return node.__zoom || identity$6;\n  }\n\n  function nopropagation$1() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$1() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$1() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent() {\n    var svg = this.ownerSVGElement;\n    return [[0, 0], svg\n        ? [svg.width.baseVal.value, svg.height.baseVal.value]\n        : [this.clientWidth, this.clientHeight]];\n  }\n\n  function defaultTransform() {\n    return this.__zoom || identity$6;\n  }\n\n  function zoom() {\n    var filter = defaultFilter$1,\n        extent = defaultExtent,\n        k0 = 0,\n        k1 = Infinity,\n        x0 = -k1,\n        x1 = k1,\n        y0 = x0,\n        y1 = x1,\n        duration = 250,\n        gestures = [],\n        listeners = dispatch(\"start\", \"zoom\", \"end\"),\n        mousemoving,\n        mousePoint,\n        mouseLocation,\n        touchstarting,\n        touchending,\n        touchDelay = 500,\n        wheelTimer,\n        wheelDelay = 150;\n\n    function zoom(selection) {\n      selection\n          .on(\"wheel.zoom\", wheeled)\n          .on(\"mousedown.zoom\", mousedowned)\n          .on(\"dblclick.zoom\", dblclicked)\n          .on(\"touchstart.zoom\", touchstarted)\n          .on(\"touchmove.zoom\", touchmoved)\n          .on(\"touchend.zoom touchcancel.zoom\", touchended)\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .property(\"__zoom\", defaultTransform);\n    }\n\n    zoom.transform = function(collection, transform) {\n      var selection = collection.selection ? collection.selection() : collection;\n      selection.property(\"__zoom\", defaultTransform);\n      if (collection !== selection) {\n        schedule(collection, transform);\n      } else {\n        selection.interrupt().each(function() {\n          gesture(this, arguments)\n              .start()\n              .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n              .end();\n        });\n      }\n    };\n\n    zoom.scaleBy = function(selection, k) {\n      zoom.scaleTo(selection, function() {\n        var k0 = this.__zoom.k,\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return k0 * k1;\n      });\n    };\n\n    zoom.scaleTo = function(selection, k) {\n      zoom.transform(selection, function() {\n        var e = extent.apply(this, arguments),\n            t0 = this.__zoom,\n            p0 = centroid(e),\n            p1 = t0.invert(p0),\n            k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n        return constrain(translate(scale(t0, k1), p0, p1), e);\n      });\n    };\n\n    zoom.translateBy = function(selection, x, y) {\n      zoom.transform(selection, function() {\n        return constrain(this.__zoom.translate(\n          typeof x === \"function\" ? x.apply(this, arguments) : x,\n          typeof y === \"function\" ? y.apply(this, arguments) : y\n        ), extent.apply(this, arguments));\n      });\n    };\n\n    function scale(transform, k) {\n      k = Math.max(k0, Math.min(k1, k));\n      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n    }\n\n    function translate(transform, p0, p1) {\n      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n    }\n\n    function constrain(transform, extent) {\n      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),\n          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);\n      return dx || dy ? transform.translate(dx, dy) : transform;\n    }\n\n    function centroid(extent) {\n      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n    }\n\n    function schedule(transition, transform, center) {\n      transition\n          .on(\"start.zoom\", function() { gesture(this, arguments).start(); })\n          .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).end(); })\n          .tween(\"zoom\", function() {\n            var that = this,\n                args = arguments,\n                g = gesture(that, args),\n                e = extent.apply(that, args),\n                p = center || centroid(e),\n                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n                a = that.__zoom,\n                b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n            return function(t) {\n              if (t === 1) t = b; // Avoid rounding error on end.\n              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n              g.zoom(null, t);\n            };\n          });\n    }\n\n    function gesture(that, args) {\n      for (var i = 0, n = gestures.length, g; i < n; ++i) {\n        if ((g = gestures[i]).that === that) {\n          return g;\n        }\n      }\n      return new Gesture(that, args);\n    }\n\n    function Gesture(that, args) {\n      this.that = that;\n      this.args = args;\n      this.index = -1;\n      this.active = 0;\n    }\n\n    Gesture.prototype = {\n      start: function() {\n        if (++this.active === 1) {\n          this.index = gestures.push(this) - 1;\n          this.emit(\"start\");\n        }\n        return this;\n      },\n      zoom: function(key, transform) {\n        if (mousePoint && key !== \"mouse\") mouseLocation = transform.invert(mousePoint);\n        if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n        if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n        this.that.__zoom = transform;\n        this.emit(\"zoom\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) {\n          gestures.splice(this.index, 1);\n          mousePoint = mouseLocation = null;\n          this.index = -1;\n          this.emit(\"end\");\n        }\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function wheeled() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          t = this.__zoom,\n          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500)));\n\n      // If the mouse is in the same location as before, reuse it.\n      // If there were recent wheel events, reset the wheel idle timeout.\n      if (wheelTimer) {\n        var point = mouse(this);\n        if (mousePoint[0] !== point[0] || mousePoint[1] !== point[1]) {\n          mouseLocation = t.invert(mousePoint = point);\n        }\n        clearTimeout(wheelTimer);\n      }\n\n      // If this wheel event won’t trigger a transform change, ignore it.\n      else if (t.k === k) return;\n\n      // Otherwise, capture the mouse point and location at the start.\n      else {\n        g.extent = extent.apply(this, arguments);\n        mouseLocation = t.invert(mousePoint = mouse(this));\n        interrupt(this);\n        g.start();\n      }\n\n      noevent$1();\n      wheelTimer = setTimeout(wheelidled, wheelDelay);\n      g.zoom(\"mouse\", constrain(translate(scale(t, k), mousePoint, mouseLocation), g.extent));\n\n      function wheelidled() {\n        wheelTimer = null;\n        g.end();\n      }\n    }\n\n    function mousedowned() {\n      if (touchending || !filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          v = select(exports.event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true);\n\n      dragDisable(exports.event.view);\n      nopropagation$1();\n      mousemoving = false;\n      g.extent = extent.apply(this, arguments);\n      mouseLocation = this.__zoom.invert(mousePoint = mouse(this));\n      interrupt(this);\n      g.start();\n\n      function mousemoved() {\n        noevent$1();\n        mousemoving = true;\n        g.zoom(\"mouse\", constrain(translate(g.that.__zoom, mousePoint = mouse(g.that), mouseLocation), g.extent));\n      }\n\n      function mouseupped() {\n        v.on(\"mousemove.zoom mouseup.zoom\", null);\n        dragEnable(exports.event.view, mousemoving);\n        noevent$1();\n        g.end();\n      }\n    }\n\n    function dblclicked() {\n      if (!filter.apply(this, arguments)) return;\n      var t0 = this.__zoom,\n          p0 = mouse(this),\n          p1 = t0.invert(p0),\n          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),\n          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));\n\n      noevent$1();\n      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);\n      else select(this).call(zoom.transform, t1);\n    }\n\n    function touchstarted() {\n      if (!filter.apply(this, arguments)) return;\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p;\n\n      nopropagation$1();\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        p = [p, this.__zoom.invert(p), t.identifier];\n        if (!g.touch0) g.touch0 = p;\n        else if (!g.touch1) g.touch1 = p;\n      }\n      if (touchstarting) {\n        touchstarting = clearTimeout(touchstarting);\n        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);\n      }\n      if (exports.event.touches.length === n) {\n        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n        interrupt(this);\n        g.extent = extent.apply(this, arguments);\n        g.start();\n      }\n    }\n\n    function touchmoved() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t, p, l;\n\n      noevent$1();\n      if (touchstarting) touchstarting = clearTimeout(touchstarting);\n      for (i = 0; i < n; ++i) {\n        t = touches[i], p = touch(this, touches, t.identifier);\n        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n      }\n      t = g.that.__zoom;\n      if (g.touch1) {\n        var p0 = g.touch0[0], l0 = g.touch0[1],\n            p1 = g.touch1[0], l1 = g.touch1[1],\n            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n        t = scale(t, Math.sqrt(dp / dl));\n        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n      }\n      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n      else return;\n      g.zoom(\"touch\", constrain(translate(t, p, l), g.extent));\n    }\n\n    function touchended() {\n      var g = gesture(this, arguments),\n          touches = exports.event.changedTouches,\n          n = touches.length, i, t;\n\n      nopropagation$1();\n      if (touchending) clearTimeout(touchending);\n      touchending = setTimeout(function() { touchending = null; }, touchDelay);\n      for (i = 0; i < n; ++i) {\n        t = touches[i];\n        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n      }\n      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n      if (!g.touch0) g.end();\n    }\n\n    zoom.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$9(!!_), zoom) : filter;\n    };\n\n    zoom.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n    };\n\n    zoom.scaleExtent = function(_) {\n      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];\n    };\n\n    zoom.translateExtent = function(_) {\n      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];\n    };\n\n    zoom.duration = function(_) {\n      return arguments.length ? (duration = +_, zoom) : duration;\n    };\n\n    zoom.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? zoom : value;\n    };\n\n    return zoom;\n  }\n\n  function constant$10(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function BrushEvent(target, type, selection) {\n    this.target = target;\n    this.type = type;\n    this.selection = selection;\n  }\n\n  function nopropagation$2() {\n    exports.event.stopImmediatePropagation();\n  }\n\n  function noevent$2() {\n    exports.event.preventDefault();\n    exports.event.stopImmediatePropagation();\n  }\n\n  var MODE_DRAG = {name: \"drag\"};\n  var MODE_SPACE = {name: \"space\"};\n  var MODE_HANDLE = {name: \"handle\"};\n  var MODE_CENTER = {name: \"center\"};\n  var X = {\n    name: \"x\",\n    handles: [\"e\", \"w\"].map(type$1),\n    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n  };\n\n  var Y = {\n    name: \"y\",\n    handles: [\"n\", \"s\"].map(type$1),\n    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n  };\n\n  var XY = {\n    name: \"xy\",\n    handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type$1),\n    input: function(xy) { return xy; },\n    output: function(xy) { return xy; }\n  };\n\n  var cursors = {\n    overlay: \"crosshair\",\n    selection: \"move\",\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n\n  var flipX = {\n    e: \"w\",\n    w: \"e\",\n    nw: \"ne\",\n    ne: \"nw\",\n    se: \"sw\",\n    sw: \"se\"\n  };\n\n  var flipY = {\n    n: \"s\",\n    s: \"n\",\n    nw: \"sw\",\n    ne: \"se\",\n    se: \"ne\",\n    sw: \"nw\"\n  };\n\n  var signsX = {\n    overlay: +1,\n    selection: +1,\n    n: null,\n    e: +1,\n    s: null,\n    w: -1,\n    nw: -1,\n    ne: +1,\n    se: +1,\n    sw: -1\n  };\n\n  var signsY = {\n    overlay: +1,\n    selection: +1,\n    n: -1,\n    e: null,\n    s: +1,\n    w: null,\n    nw: -1,\n    ne: -1,\n    se: +1,\n    sw: +1\n  };\n\n  function type$1(t) {\n    return {type: t};\n  }\n\n  // Ignore right-click, since that should open the context menu.\n  function defaultFilter$2() {\n    return !exports.event.button;\n  }\n\n  function defaultExtent$1() {\n    var svg = this.ownerSVGElement;\n    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n  }\n\n  // Like d3.local, but with the name “__brush” rather than auto-generated.\n  function local$1(node) {\n    while (!node.__brush) if (!(node = node.parentNode)) return;\n    return node.__brush;\n  }\n\n  function empty(extent) {\n    return extent[0][0] === extent[1][0]\n        || extent[0][1] === extent[1][1];\n  }\n\n  function brushSelection(node) {\n    var state = node.__brush;\n    return state ? state.dim.output(state.selection) : null;\n  }\n\n  function brushX() {\n    return brush$1(X);\n  }\n\n  function brushY() {\n    return brush$1(Y);\n  }\n\n  function brush() {\n    return brush$1(XY);\n  }\n\n  function brush$1(dim) {\n    var extent = defaultExtent$1,\n        filter = defaultFilter$2,\n        listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n        handleSize = 6,\n        touchending;\n\n    function brush(group) {\n      var overlay = group\n          .property(\"__brush\", initialize)\n        .selectAll(\".overlay\")\n        .data([type$1(\"overlay\")]);\n\n      overlay.enter().append(\"rect\")\n          .attr(\"class\", \"overlay\")\n          .attr(\"pointer-events\", \"all\")\n          .attr(\"cursor\", cursors.overlay)\n        .merge(overlay)\n          .each(function() {\n            var extent = local$1(this).extent;\n            select(this)\n                .attr(\"x\", extent[0][0])\n                .attr(\"y\", extent[0][1])\n                .attr(\"width\", extent[1][0] - extent[0][0])\n                .attr(\"height\", extent[1][1] - extent[0][1]);\n          });\n\n      group.selectAll(\".selection\")\n        .data([type$1(\"selection\")])\n        .enter().append(\"rect\")\n          .attr(\"class\", \"selection\")\n          .attr(\"cursor\", cursors.selection)\n          .attr(\"fill\", \"#777\")\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"shape-rendering\", \"crispEdges\");\n\n      var handle = group.selectAll(\".handle\")\n        .data(dim.handles, function(d) { return d.type; });\n\n      handle.exit().remove();\n\n      handle.enter().append(\"rect\")\n          .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n          .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n      group\n          .each(redraw)\n          .attr(\"fill\", \"none\")\n          .attr(\"pointer-events\", \"all\")\n          .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n          .on(\"mousedown.brush touchstart.brush\", started);\n    }\n\n    brush.move = function(group, selection) {\n      if (group.selection) {\n        group\n            .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n            .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n            .tween(\"brush\", function() {\n              var that = this,\n                  state = that.__brush,\n                  emit = emitter(that, arguments),\n                  selection0 = state.selection,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                  i = interpolate(selection0, selection1);\n\n              function tween(t) {\n                state.selection = t === 1 && empty(selection1) ? null : i(t);\n                redraw.call(that);\n                emit.brush();\n              }\n\n              return selection0 && selection1 ? tween : tween(1);\n            });\n      } else {\n        group\n            .each(function() {\n              var that = this,\n                  args = arguments,\n                  state = that.__brush,\n                  selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                  emit = emitter(that, args).beforestart();\n\n              interrupt(that);\n              state.selection = selection1 == null || empty(selection1) ? null : selection1;\n              redraw.call(that);\n              emit.start().brush().end();\n            });\n      }\n    };\n\n    function redraw() {\n      var group = select(this),\n          selection = local$1(this).selection;\n\n      if (selection) {\n        group.selectAll(\".selection\")\n            .style(\"display\", null)\n            .attr(\"x\", selection[0][0])\n            .attr(\"y\", selection[0][1])\n            .attr(\"width\", selection[1][0] - selection[0][0])\n            .attr(\"height\", selection[1][1] - selection[0][1]);\n\n        group.selectAll(\".handle\")\n            .style(\"display\", null)\n            .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n            .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n            .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n            .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n      }\n\n      else {\n        group.selectAll(\".selection,.handle\")\n            .style(\"display\", \"none\")\n            .attr(\"x\", null)\n            .attr(\"y\", null)\n            .attr(\"width\", null)\n            .attr(\"height\", null);\n      }\n    }\n\n    function emitter(that, args) {\n      return that.__brush.emitter || new Emitter(that, args);\n    }\n\n    function Emitter(that, args) {\n      this.that = that;\n      this.args = args;\n      this.state = that.__brush;\n      this.active = 0;\n    }\n\n    Emitter.prototype = {\n      beforestart: function() {\n        if (++this.active === 1) this.state.emitter = this, this.starting = true;\n        return this;\n      },\n      start: function() {\n        if (this.starting) this.starting = false, this.emit(\"start\");\n        return this;\n      },\n      brush: function() {\n        this.emit(\"brush\");\n        return this;\n      },\n      end: function() {\n        if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n        return this;\n      },\n      emit: function(type) {\n        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n      }\n    };\n\n    function started() {\n      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }\n      else if (touchending) return;\n      if (!filter.apply(this, arguments)) return;\n\n      var that = this,\n          type = exports.event.target.__data__.type,\n          mode = (exports.event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),\n          signX = dim === Y ? null : signsX[type],\n          signY = dim === X ? null : signsY[type],\n          state = local$1(that),\n          extent = state.extent,\n          selection = state.selection,\n          W = extent[0][0], w0, w1,\n          N = extent[0][1], n0, n1,\n          E = extent[1][0], e0, e1,\n          S = extent[1][1], s0, s1,\n          dx,\n          dy,\n          moving,\n          shifting = signX && signY && exports.event.shiftKey,\n          lockX,\n          lockY,\n          point0 = mouse(that),\n          point = point0,\n          emit = emitter(that, arguments).beforestart();\n\n      if (type === \"overlay\") {\n        state.selection = selection = [\n          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n        ];\n      } else {\n        w0 = selection[0][0];\n        n0 = selection[0][1];\n        e0 = selection[1][0];\n        s0 = selection[1][1];\n      }\n\n      w1 = w0;\n      n1 = n0;\n      e1 = e0;\n      s1 = s0;\n\n      var group = select(that)\n          .attr(\"pointer-events\", \"none\");\n\n      var overlay = group.selectAll(\".overlay\")\n          .attr(\"cursor\", cursors[type]);\n\n      if (exports.event.touches) {\n        group\n            .on(\"touchmove.brush\", moved, true)\n            .on(\"touchend.brush touchcancel.brush\", ended, true);\n      } else {\n        var view = select(exports.event.view)\n            .on(\"keydown.brush\", keydowned, true)\n            .on(\"keyup.brush\", keyupped, true)\n            .on(\"mousemove.brush\", moved, true)\n            .on(\"mouseup.brush\", ended, true);\n\n        dragDisable(exports.event.view);\n      }\n\n      nopropagation$2();\n      interrupt(that);\n      redraw.call(that);\n      emit.start();\n\n      function moved() {\n        var point1 = mouse(that);\n        if (shifting && !lockX && !lockY) {\n          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n          else lockX = true;\n        }\n        point = point1;\n        moving = true;\n        noevent$2();\n        move();\n      }\n\n      function move() {\n        var t;\n\n        dx = point[0] - point0[0];\n        dy = point[1] - point0[1];\n\n        switch (mode) {\n          case MODE_SPACE:\n          case MODE_DRAG: {\n            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n            break;\n          }\n          case MODE_HANDLE: {\n            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n            break;\n          }\n          case MODE_CENTER: {\n            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n            break;\n          }\n        }\n\n        if (e1 < w1) {\n          signX *= -1;\n          t = w0, w0 = e0, e0 = t;\n          t = w1, w1 = e1, e1 = t;\n          if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n        }\n\n        if (s1 < n1) {\n          signY *= -1;\n          t = n0, n0 = s0, s0 = t;\n          t = n1, n1 = s1, s1 = t;\n          if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n        }\n\n        selection = state.selection; // May be set by brush.move!\n\n        if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n        if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n        if (selection[0][0] !== w1\n            || selection[0][1] !== n1\n            || selection[1][0] !== e1\n            || selection[1][1] !== s1) {\n          state.selection = [[w1, n1], [e1, s1]];\n          redraw.call(that);\n          emit.brush();\n        }\n      }\n\n      function ended() {\n        nopropagation$2();\n        if (exports.event.touches) {\n          if (exports.event.touches.length) return;\n          if (touchending) clearTimeout(touchending);\n          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n          group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n        } else {\n          dragEnable(exports.event.view, moving);\n          view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n        }\n        group.attr(\"pointer-events\", \"all\");\n        overlay.attr(\"cursor\", cursors.overlay);\n        if (empty(selection)) state.selection = null, redraw.call(that);\n        emit.end();\n      }\n\n      function keydowned() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            shifting = signX && signY;\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_HANDLE) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE; takes priority over ALT\n            if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n              mode = MODE_SPACE;\n              overlay.attr(\"cursor\", cursors.selection);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n\n      function keyupped() {\n        switch (exports.event.keyCode) {\n          case 16: { // SHIFT\n            if (shifting) {\n              lockX = lockY = shifting = false;\n              move();\n            }\n            break;\n          }\n          case 18: { // ALT\n            if (mode === MODE_CENTER) {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n              move();\n            }\n            break;\n          }\n          case 32: { // SPACE\n            if (mode === MODE_SPACE) {\n              if (exports.event.altKey) {\n                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n                mode = MODE_CENTER;\n              } else {\n                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n                mode = MODE_HANDLE;\n              }\n              overlay.attr(\"cursor\", cursors[type]);\n              move();\n            }\n            break;\n          }\n          default: return;\n        }\n        noevent$2();\n      }\n    }\n\n    function initialize() {\n      var state = this.__brush || {selection: null};\n      state.extent = extent.apply(this, arguments);\n      state.dim = dim;\n      return state;\n    }\n\n    brush.extent = function(_) {\n      return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n    };\n\n    brush.filter = function(_) {\n      return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant$10(!!_), brush) : filter;\n    };\n\n    brush.handleSize = function(_) {\n      return arguments.length ? (handleSize = +_, brush) : handleSize;\n    };\n\n    brush.on = function() {\n      var value = listeners.on.apply(listeners, arguments);\n      return value === listeners ? brush : value;\n    };\n\n    return brush;\n  }\n\n  // Adds floating point numbers with twice the normal precision.\n  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n  // 305–363 (1997).\n  // Code adapted from GeographicLib by Charles F. F. Karney,\n  // http://geographiclib.sourceforge.net/\n\n  function adder() {\n    return new Adder;\n  }\n\n  function Adder() {\n    this.reset();\n  }\n\n  Adder.prototype = {\n    constructor: Adder,\n    reset: function() {\n      this.s = // rounded value\n      this.t = 0; // exact error\n    },\n    add: function(y) {\n      add$1(temp, y, this.t);\n      add$1(this, temp.s, this.s);\n      if (this.s) this.t += temp.t;\n      else this.s = temp.t;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n\n  var temp = new Adder;\n\n  function add$1(adder, a, b) {\n    var x = adder.s = a + b,\n        bv = x - a,\n        av = x - bv;\n    adder.t = (a - av) + (b - bv);\n  }\n\n  var epsilon$4 = 1e-6;\n  var epsilon2$2 = 1e-12;\n  var pi$3 = Math.PI;\n  var halfPi$2 = pi$3 / 2;\n  var quarterPi = pi$3 / 4;\n  var tau$3 = pi$3 * 2;\n\n  var degrees$1 = 180 / pi$3;\n  var radians = pi$3 / 180;\n\n  var abs = Math.abs;\n  var atan = Math.atan;\n  var atan2 = Math.atan2;\n  var cos = Math.cos;\n  var ceil = Math.ceil;\n  var exp = Math.exp;\n  var log$1 = Math.log;\n  var pow$1 = Math.pow;\n  var sin = Math.sin;\n  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\n  var sqrt$1 = Math.sqrt;\n  var tan = Math.tan;\n\n  function acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);\n  }\n\n  function asin$1(x) {\n    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);\n  }\n\n  function haversin(x) {\n    return (x = sin(x / 2)) * x;\n  }\n\n  function noop$2() {}\n\n  function streamGeometry(geometry, sink) {\n    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n      streamGeometryType[geometry.type](geometry, sink);\n    }\n  }\n\n  var streamObjectType = {\n    Feature: function(feature, sink) {\n      streamGeometry(feature.geometry, sink);\n    },\n    FeatureCollection: function(object, sink) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) streamGeometry(features[i].geometry, sink);\n    }\n  };\n\n  var streamGeometryType = {\n    Sphere: function(object, sink) {\n      sink.sphere();\n    },\n    Point: function(object, sink) {\n      object = object.coordinates;\n      sink.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, sink) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], sink.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, sink) {\n      streamLine(object.coordinates, sink, 0);\n    },\n    MultiLineString: function(object, sink) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamLine(coordinates[i], sink, 0);\n    },\n    Polygon: function(object, sink) {\n      streamPolygon(object.coordinates, sink);\n    },\n    MultiPolygon: function(object, sink) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) streamPolygon(coordinates[i], sink);\n    },\n    GeometryCollection: function(object, sink) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) streamGeometry(geometries[i], sink);\n    }\n  };\n\n  function streamLine(coordinates, sink, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    sink.lineStart();\n    while (++i < n) coordinate = coordinates[i], sink.point(coordinate[0], coordinate[1], coordinate[2]);\n    sink.lineEnd();\n  }\n\n  function streamPolygon(coordinates, sink) {\n    var i = -1, n = coordinates.length;\n    sink.polygonStart();\n    while (++i < n) streamLine(coordinates[i], sink, 1);\n    sink.polygonEnd();\n  }\n\n  function stream(object, sink) {\n    if (object && streamObjectType.hasOwnProperty(object.type)) {\n      streamObjectType[object.type](object, sink);\n    } else {\n      streamGeometry(object, sink);\n    }\n  }\n\n  var areaRingSum;\n\n  var areaSum;\n  var lambda00;\n  var phi00;\n  var lambda0;\n  var cosPhi0;\n  var sinPhi0;\n  var areaSink = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaRingSum.reset();\n      areaSink.lineStart = areaRingStart;\n      areaSink.lineEnd = areaRingEnd;\n    },\n    polygonEnd: function() {\n      var areaRing = +areaRingSum;\n      areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);\n      this.lineStart = this.lineEnd = this.point = noop$2;\n    },\n    sphere: function() {\n      areaSum.add(tau$3);\n    }\n  };\n\n  function areaRingStart() {\n    areaSink.point = areaPointFirst;\n  }\n\n  function areaRingEnd() {\n    areaPoint(lambda00, phi00);\n  }\n\n  function areaPointFirst(lambda, phi) {\n    areaSink.point = areaPoint;\n    lambda00 = lambda, phi00 = phi;\n    lambda *= radians, phi *= radians;\n    lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n  }\n\n  function areaPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n    // Spherical excess E for a spherical triangle with vertices: south pole,\n    // previous point, current point.  Uses a formula derived from Cagnoli’s\n    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n    var dLambda = lambda - lambda0,\n        sdLambda = dLambda >= 0 ? 1 : -1,\n        adLambda = sdLambda * dLambda,\n        cosPhi = cos(phi),\n        sinPhi = sin(phi),\n        k = sinPhi0 * sinPhi,\n        u = cosPhi0 * cosPhi + k * cos(adLambda),\n        v = k * sdLambda * sin(adLambda);\n    areaRingSum.add(atan2(v, u));\n\n    // Advance the previous points.\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n  }\n\n  function area$2(object) {\n    if (areaSum) areaSum.reset();\n    else areaSum = adder(), areaRingSum = adder();\n    stream(object, areaSink);\n    return areaSum * 2;\n  }\n\n  function spherical(cartesian) {\n    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];\n  }\n\n  function cartesian(spherical) {\n    var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n  }\n\n  function cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n\n  function cartesianCross(a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  }\n\n  // TODO return a\n  function cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n  }\n\n  function cartesianScale(vector, k) {\n    return [vector[0] * k, vector[1] * k, vector[2] * k];\n  }\n\n  // TODO return d\n  function cartesianNormalizeInPlace(d) {\n    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n  }\n\nvar   lambda0$1;\n  var phi0;\n  var lambda1;\n  var phi1;\n  var lambda2;\nvar   lambda00$1;\nvar   phi00$1;\n  var p0;\n  var deltaSum;\n  var ranges;\nvar   range$1;\n  var boundsSink = {\n    point: boundsPoint,\n    lineStart: boundsLineStart,\n    lineEnd: boundsLineEnd,\n    polygonStart: function() {\n      boundsSink.point = boundsRingPoint;\n      boundsSink.lineStart = boundsRingStart;\n      boundsSink.lineEnd = boundsRingEnd;\n      deltaSum.reset();\n      areaSink.polygonStart();\n    },\n    polygonEnd: function() {\n      areaSink.polygonEnd();\n      boundsSink.point = boundsPoint;\n      boundsSink.lineStart = boundsLineStart;\n      boundsSink.lineEnd = boundsLineEnd;\n      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n      else if (deltaSum > epsilon$4) phi1 = 90;\n      else if (deltaSum < -epsilon$4) phi0 = -90;\n      range$1[0] = lambda0$1, range$1[1] = lambda1;\n    }\n  };\n\n  function boundsPoint(lambda, phi) {\n    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);\n    if (phi < phi0) phi0 = phi;\n    if (phi > phi1) phi1 = phi;\n  }\n\n  function linePoint(lambda, phi) {\n    var p = cartesian([lambda * radians, phi * radians]);\n    if (p0) {\n      var normal = cartesianCross(p0, p),\n          equatorial = [normal[1], -normal[0], 0],\n          inflection = cartesianCross(equatorial, normal);\n      cartesianNormalizeInPlace(inflection);\n      inflection = spherical(inflection);\n      var delta = lambda - lambda2,\n          sign = delta > 0 ? 1 : -1,\n          lambdai = inflection[0] * degrees$1 * sign,\n          phii,\n          antimeridian = abs(delta) > 180;\n      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = inflection[1] * degrees$1;\n        if (phii > phi1) phi1 = phii;\n      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n        phii = -inflection[1] * degrees$1;\n        if (phii < phi0) phi0 = phii;\n      } else {\n        if (phi < phi0) phi0 = phi;\n        if (phi > phi1) phi1 = phi;\n      }\n      if (antimeridian) {\n        if (lambda < lambda2) {\n          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n        }\n      } else {\n        if (lambda1 >= lambda0$1) {\n          if (lambda < lambda0$1) lambda0$1 = lambda;\n          if (lambda > lambda1) lambda1 = lambda;\n        } else {\n          if (lambda > lambda2) {\n            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;\n          } else {\n            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;\n          }\n        }\n      }\n    } else {\n      boundsPoint(lambda, phi);\n    }\n    p0 = p, lambda2 = lambda;\n  }\n\n  function boundsLineStart() {\n    boundsSink.point = linePoint;\n  }\n\n  function boundsLineEnd() {\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    boundsSink.point = boundsPoint;\n    p0 = null;\n  }\n\n  function boundsRingPoint(lambda, phi) {\n    if (p0) {\n      var delta = lambda - lambda2;\n      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n    } else {\n      lambda00$1 = lambda, phi00$1 = phi;\n    }\n    areaSink.point(lambda, phi);\n    linePoint(lambda, phi);\n  }\n\n  function boundsRingStart() {\n    areaSink.lineStart();\n  }\n\n  function boundsRingEnd() {\n    boundsRingPoint(lambda00$1, phi00$1);\n    areaSink.lineEnd();\n    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);\n    range$1[0] = lambda0$1, range$1[1] = lambda1;\n    p0 = null;\n  }\n\n  // Finds the left-right distance between two longitudes.\n  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n  // the distance between ±180° to be 360°.\n  function angle(lambda0, lambda1) {\n    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n  }\n\n  function rangeCompare(a, b) {\n    return a[0] - b[0];\n  }\n\n  function rangeContains(range, x) {\n    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n  }\n\n  function bounds(feature) {\n    var i, n, a, b, merged, deltaMax, delta;\n\n    if (deltaSum) deltaSum.reset();\n    else deltaSum = adder();\n    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);\n    ranges = [];\n    stream(feature, boundsSink);\n\n    // First, sort ranges by their minimum longitudes.\n    if (n = ranges.length) {\n      ranges.sort(rangeCompare);\n\n      // Then, merge any ranges that overlap.\n      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n        b = ranges[i];\n        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n        } else {\n          merged.push(a = b);\n        }\n      }\n\n      // Finally, find the largest gap between the merged ranges.\n      // The final bounding box will be the inverse of this gap.\n      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n        b = merged[i];\n        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];\n      }\n    }\n\n    ranges = range$1 = null;\n\n    return lambda0$1 === Infinity || phi0 === Infinity\n        ? [[NaN, NaN], [NaN, NaN]]\n        : [[lambda0$1, phi0], [lambda1, phi1]];\n  }\n\n  var W0;\n  var W1;\n  var X0;\n  var Y0;\n  var Z0;\n  var X1;\n  var Y1;\n  var Z1;\n  var X2;\n  var Y2;\n  var Z2;\nvar   lambda00$2;\nvar   phi00$2;\n  var x0;\n  var y0;\n  var z0;\n  // previous point\n\n  var centroidSink = {\n    sphere: noop$2,\n    point: centroidPoint,\n    lineStart: centroidLineStart,\n    lineEnd: centroidLineEnd,\n    polygonStart: function() {\n      centroidSink.lineStart = centroidRingStart;\n      centroidSink.lineEnd = centroidRingEnd;\n    },\n    polygonEnd: function() {\n      centroidSink.lineStart = centroidLineStart;\n      centroidSink.lineEnd = centroidLineEnd;\n    }\n  };\n\n  // Arithmetic mean of Cartesian vectors.\n  function centroidPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi);\n    centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n  }\n\n  function centroidPointCartesian(x, y, z) {\n    ++W0;\n    X0 += (x - X0) / W0;\n    Y0 += (y - Y0) / W0;\n    Z0 += (z - Z0) / W0;\n  }\n\n  function centroidLineStart() {\n    centroidSink.point = centroidLinePointFirst;\n  }\n\n  function centroidLinePointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi);\n    x0 = cosPhi * cos(lambda);\n    y0 = cosPhi * sin(lambda);\n    z0 = sin(phi);\n    centroidSink.point = centroidLinePoint;\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLinePoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi),\n        x = cosPhi * cos(lambda),\n        y = cosPhi * sin(lambda),\n        z = sin(phi),\n        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidLineEnd() {\n    centroidSink.point = centroidPoint;\n  }\n\n  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n  // J. Applied Mechanics 42, 239 (1975).\n  function centroidRingStart() {\n    centroidSink.point = centroidRingPointFirst;\n  }\n\n  function centroidRingEnd() {\n    centroidRingPoint(lambda00$2, phi00$2);\n    centroidSink.point = centroidPoint;\n  }\n\n  function centroidRingPointFirst(lambda, phi) {\n    lambda00$2 = lambda, phi00$2 = phi;\n    lambda *= radians, phi *= radians;\n    centroidSink.point = centroidRingPoint;\n    var cosPhi = cos(phi);\n    x0 = cosPhi * cos(lambda);\n    y0 = cosPhi * sin(lambda);\n    z0 = sin(phi);\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroidRingPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var cosPhi = cos(phi),\n        x = cosPhi * cos(lambda),\n        y = cosPhi * sin(lambda),\n        z = sin(phi),\n        cx = y0 * z - z0 * y,\n        cy = z0 * x - x0 * z,\n        cz = x0 * y - y0 * x,\n        m = sqrt$1(cx * cx + cy * cy + cz * cz),\n        u = x0 * x + y0 * y + z0 * z,\n        v = m && -acos(u) / m, // area weight\n        w = atan2(m, u); // line weight\n    X2 += v * cx;\n    Y2 += v * cy;\n    Z2 += v * cz;\n    W1 += w;\n    X1 += w * (x0 + (x0 = x));\n    Y1 += w * (y0 + (y0 = y));\n    Z1 += w * (z0 + (z0 = z));\n    centroidPointCartesian(x0, y0, z0);\n  }\n\n  function centroid$1(object) {\n    W0 = W1 =\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    stream(object, centroidSink);\n\n    var x = X2,\n        y = Y2,\n        z = Z2,\n        m = x * x + y * y + z * z;\n\n    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n    if (m < epsilon2$2) {\n      x = X1, y = Y1, z = Z1;\n      // If the feature has zero length, fall back to arithmetic mean of point vectors.\n      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;\n      m = x * x + y * y + z * z;\n      // If the feature still has an undefined ccentroid, then return.\n      if (m < epsilon2$2) return [NaN, NaN];\n    }\n\n    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];\n  }\n\n  function constant$11(x) {\n    return function() {\n      return x;\n    };\n  }\n\n  function compose(a, b) {\n\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n\n    return compose;\n  }\n\n  function rotationIdentity(lambda, phi) {\n    return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\n  }\n\n  rotationIdentity.invert = rotationIdentity;\n\n  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n    return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n      : rotationLambda(deltaLambda))\n      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n      : rotationIdentity);\n  }\n\n  function forwardRotationLambda(deltaLambda) {\n    return function(lambda, phi) {\n      return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];\n    };\n  }\n\n  function rotationLambda(deltaLambda) {\n    var rotation = forwardRotationLambda(deltaLambda);\n    rotation.invert = forwardRotationLambda(-deltaLambda);\n    return rotation;\n  }\n\n  function rotationPhiGamma(deltaPhi, deltaGamma) {\n    var cosDeltaPhi = cos(deltaPhi),\n        sinDeltaPhi = sin(deltaPhi),\n        cosDeltaGamma = cos(deltaGamma),\n        sinDeltaGamma = sin(deltaGamma);\n\n    function rotation(lambda, phi) {\n      var cosPhi = cos(phi),\n          x = cos(lambda) * cosPhi,\n          y = sin(lambda) * cosPhi,\n          z = sin(phi),\n          k = z * cosDeltaPhi + x * sinDeltaPhi;\n      return [\n        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)\n      ];\n    }\n\n    rotation.invert = function(lambda, phi) {\n      var cosPhi = cos(phi),\n          x = cos(lambda) * cosPhi,\n          y = sin(lambda) * cosPhi,\n          z = sin(phi),\n          k = z * cosDeltaGamma - y * sinDeltaGamma;\n      return [\n        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)\n      ];\n    };\n\n    return rotation;\n  }\n\n  function rotation(rotate) {\n    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    }\n\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n    };\n\n    return forward;\n  }\n\n  // Generates a circle centered at [0°, 0°], with a given radius and precision.\n  function circleStream(sink, radius, delta, direction, t0, t1) {\n    if (!delta) return;\n    var cosRadius = cos(radius),\n        sinRadius = sin(radius),\n        step = direction * delta;\n    if (t0 == null) {\n      t0 = radius + direction * tau$3;\n      t1 = radius - step / 2;\n    } else {\n      t0 = circleRadius(cosRadius, t0);\n      t1 = circleRadius(cosRadius, t1);\n      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;\n    }\n    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n      sink.point(point[0], point[1]);\n    }\n  }\n\n  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n  function circleRadius(cosRadius, point) {\n    point = cartesian(point), point[0] -= cosRadius;\n    cartesianNormalizeInPlace(point);\n    var radius = acos(-point[1]);\n    return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$4) % tau$3;\n  }\n\n  function circle$1() {\n    var center = constant$11([0, 0]),\n        radius = constant$11(90),\n        precision = constant$11(6),\n        ring,\n        rotate,\n        sink = {point: point};\n\n    function point(x, y) {\n      ring.push(x = rotate(x, y));\n      x[0] *= degrees$1, x[1] *= degrees$1;\n    }\n\n    function circle() {\n      var c = center.apply(this, arguments),\n          r = radius.apply(this, arguments) * radians,\n          p = precision.apply(this, arguments) * radians;\n      ring = [];\n      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n      circleStream(sink, r, p, 1);\n      c = {type: \"Polygon\", coordinates: [ring]};\n      ring = rotate = null;\n      return c;\n    }\n\n    circle.center = function(_) {\n      return arguments.length ? (center = typeof _ === \"function\" ? _ : constant$11([+_[0], +_[1]]), circle) : center;\n    };\n\n    circle.radius = function(_) {\n      return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant$11(+_), circle) : radius;\n    };\n\n    circle.precision = function(_) {\n      return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant$11(+_), circle) : precision;\n    };\n\n    return circle;\n  }\n\n  function clipBuffer() {\n    var lines = [],\n        line;\n    return {\n      point: function(x, y) {\n        line.push([x, y]);\n      },\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      lineEnd: noop$2,\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      },\n      result: function() {\n        var result = lines;\n        lines = [];\n        line = null;\n        return result;\n      }\n    };\n  }\n\n  function clipLine(a, b, x0, y0, x1, y1) {\n    var ax = a[0],\n        ay = a[1],\n        bx = b[0],\n        by = b[1],\n        t0 = 0,\n        t1 = 1,\n        dx = bx - ax,\n        dy = by - ay,\n        r;\n\n    r = x0 - ax;\n    if (!dx && r > 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dx > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = x1 - ax;\n    if (!dx && r < 0) return;\n    r /= dx;\n    if (dx < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dx > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    r = y0 - ay;\n    if (!dy && r > 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    } else if (dy > 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    }\n\n    r = y1 - ay;\n    if (!dy && r < 0) return;\n    r /= dy;\n    if (dy < 0) {\n      if (r > t1) return;\n      if (r > t0) t0 = r;\n    } else if (dy > 0) {\n      if (r < t0) return;\n      if (r < t1) t1 = r;\n    }\n\n    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n    return true;\n  }\n\n  function pointEqual(a, b) {\n    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;\n  }\n\n  function Intersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other; // another intersection\n    this.e = entry; // is an entry?\n    this.v = false; // visited\n    this.n = this.p = null; // next & previous\n  }\n\n  // A generalized polygon clipping algorithm: given a polygon that has been cut\n  // into its visible line segments, and rejoins the segments by interpolating\n  // along the clip edge.\n  function clipPolygon(segments, compareIntersection, startInside, interpolate, sink) {\n    var subject = [],\n        clip = [],\n        i,\n        n;\n\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n], x;\n\n      // If the first and last points of a segment are coincident, then treat as a\n      // closed ring. TODO if all rings are closed, then the winding order of the\n      // exterior ring should be checked.\n      if (pointEqual(p0, p1)) {\n        sink.lineStart();\n        for (i = 0; i < n; ++i) sink.point((p0 = segment[i])[0], p0[1]);\n        sink.lineEnd();\n        return;\n      }\n\n      subject.push(x = new Intersection(p0, segment, null, true));\n      clip.push(x.o = new Intersection(p0, null, x, false));\n      subject.push(x = new Intersection(p1, segment, null, false));\n      clip.push(x.o = new Intersection(p1, null, x, true));\n    });\n\n    if (!subject.length) return;\n\n    clip.sort(compareIntersection);\n    link$1(subject);\n    link$1(clip);\n\n    for (i = 0, n = clip.length; i < n; ++i) {\n      clip[i].e = startInside = !startInside;\n    }\n\n    var start = subject[0],\n        points,\n        point;\n\n    while (1) {\n      // Find first unvisited intersection.\n      var current = start,\n          isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      sink.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (i = 0, n = points.length; i < n; ++i) sink.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, sink);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (i = points.length - 1; i >= 0; --i) sink.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, sink);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      sink.lineEnd();\n    }\n  }\n\n  function link$1(array) {\n    if (!(n = array.length)) return;\n    var n,\n        i = 0,\n        a = array[0],\n        b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n\n  var clipMax = 1e9;\n  var clipMin = -clipMax;\n  // TODO Use d3-polygon’s polygonContains here for the ring check?\n  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\n  function clipExtent(x0, y0, x1, y1) {\n\n    function visible(x, y) {\n      return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n    }\n\n    function interpolate(from, to, direction, sink) {\n      var a = 0, a1 = 0;\n      if (from == null\n          || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n          || comparePoint(from, to) < 0 ^ direction > 0) {\n        do sink.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n        while ((a = (a + direction + 4) % 4) !== a1);\n      } else {\n        sink.point(to[0], to[1]);\n      }\n    }\n\n    function corner(p, direction) {\n      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3\n          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1\n          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0\n          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n    }\n\n    function compareIntersection(a, b) {\n      return comparePoint(a.x, b.x);\n    }\n\n    function comparePoint(a, b) {\n      var ca = corner(a, 1),\n          cb = corner(b, 1);\n      return ca !== cb ? ca - cb\n          : ca === 0 ? b[1] - a[1]\n          : ca === 1 ? a[0] - b[0]\n          : ca === 2 ? a[1] - b[1]\n          : b[0] - a[0];\n    }\n\n    return function(sink) {\n      var activeSink = sink,\n          bufferSink = clipBuffer(),\n          segments,\n          polygon,\n          ring,\n          x__, y__, v__, // first point\n          x_, y_, v_, // previous point\n          first,\n          clean;\n\n      var clipSink = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: polygonStart,\n        polygonEnd: polygonEnd\n      };\n\n      function point(x, y) {\n        if (visible(x, y)) activeSink.point(x, y);\n      }\n\n      function polygonInside() {\n        var winding = 0;\n\n        for (var i = 0, n = polygon.length; i < n; ++i) {\n          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n          }\n        }\n\n        return winding;\n      }\n\n      // Buffer geometry within a polygon and then clip it en masse.\n      function polygonStart() {\n        activeSink = bufferSink, segments = [], polygon = [], clean = true;\n      }\n\n      function polygonEnd() {\n        var startInside = polygonInside(),\n            cleanInside = clean && startInside,\n            visible = (segments = merge(segments)).length;\n        if (cleanInside || visible) {\n          sink.polygonStart();\n          if (cleanInside) {\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (visible) {\n            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n          }\n          sink.polygonEnd();\n        }\n        activeSink = sink, segments = polygon = ring = null;\n      }\n\n      function lineStart() {\n        clipSink.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n\n      // TODO rather than special-case polygons, simply handle them separately.\n      // Ideally, coincident intersection points should be jittered to avoid\n      // clipping issues.\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferSink.rejoin();\n          segments.push(bufferSink.result());\n        }\n        clipSink.point = point;\n        if (v_) activeSink.lineEnd();\n      }\n\n      function linePoint(x, y) {\n        var v = visible(x, y);\n        if (polygon) ring.push([x, y]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            activeSink.lineStart();\n            activeSink.point(x, y);\n          }\n        } else {\n          if (v && v_) activeSink.point(x, y);\n          else {\n            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n            if (clipLine(a, b, x0, y0, x1, y1)) {\n              if (!v_) {\n                activeSink.lineStart();\n                activeSink.point(a[0], a[1]);\n              }\n              activeSink.point(b[0], b[1]);\n              if (!v) activeSink.lineEnd();\n              clean = false;\n            } else if (v) {\n              activeSink.lineStart();\n              activeSink.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n\n      return clipSink;\n    };\n  }\n\n  function extent$1() {\n    var x0 = 0,\n        y0 = 0,\n        x1 = 960,\n        y1 = 500,\n        stream,\n        streamSink,\n        clip;\n\n    return clip = {\n      stream: function(sink) {\n        return stream && streamSink === sink ? stream : stream = clipExtent(x0, y0, x1, y1)(streamSink = sink);\n      },\n      extent: function(_) {\n        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], stream = streamSink = null, clip) : [[x0, y0], [x1, y1]];\n      }\n    };\n  }\n\n  var lengthSum;\nvar   lambda0$2;\nvar   sinPhi0$1;\nvar   cosPhi0$1;\n  var lengthSink = {\n    sphere: noop$2,\n    point: noop$2,\n    lineStart: lengthLineStart,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2\n  };\n\n  function lengthLineStart() {\n    lengthSink.point = lengthPointFirst;\n    lengthSink.lineEnd = lengthLineEnd;\n  }\n\n  function lengthLineEnd() {\n    lengthSink.point = lengthSink.lineEnd = noop$2;\n  }\n\n  function lengthPointFirst(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);\n    lengthSink.point = lengthPoint;\n  }\n\n  function lengthPoint(lambda, phi) {\n    lambda *= radians, phi *= radians;\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        delta = abs(lambda - lambda0$2),\n        cosDelta = cos(delta),\n        sinDelta = sin(delta),\n        x = cosPhi * sinDelta,\n        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,\n        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;\n    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));\n    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;\n  }\n\n  function length$2(object) {\n    if (lengthSum) lengthSum.reset();\n    else lengthSum = adder();\n    stream(object, lengthSink);\n    return +lengthSum;\n  }\n\n  var coordinates = [null, null];\nvar   object$1 = {type: \"LineString\", coordinates: coordinates};\n  function distance(a, b) {\n    coordinates[0] = a;\n    coordinates[1] = b;\n    return length$2(object$1);\n  }\n\n  function graticuleX(y0, y1, dy) {\n    var y = range(y0, y1 - epsilon$4, dy).concat(y1);\n    return function(x) { return y.map(function(y) { return [x, y]; }); };\n  }\n\n  function graticuleY(x0, x1, dx) {\n    var x = range(x0, x1 - epsilon$4, dx).concat(x1);\n    return function(y) { return x.map(function(x) { return [x, y]; }); };\n  }\n\n  function graticule() {\n    var x1, x0, X1, X0,\n        y1, y0, Y1, Y0,\n        dx = 10, dy = dx, DX = 90, DY = 360,\n        x, y, X, Y,\n        precision = 2.5;\n\n    function graticule() {\n      return {type: \"MultiLineString\", coordinates: lines()};\n    }\n\n    function lines() {\n      return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))\n          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));\n    }\n\n    graticule.lines = function() {\n      return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n    };\n\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [\n          X(X0).concat(\n          Y(Y1).slice(1),\n          X(X1).reverse().slice(1),\n          Y(Y0).reverse().slice(1))\n        ]\n      };\n    };\n\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.extentMinor();\n      return graticule.extentMajor(_).extentMinor(_);\n    };\n\n    graticule.extentMajor = function(_) {\n      if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.extentMinor = function(_) {\n      if (!arguments.length) return [[x0, y0], [x1, y1]];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.stepMinor();\n      return graticule.stepMajor(_).stepMinor(_);\n    };\n\n    graticule.stepMajor = function(_) {\n      if (!arguments.length) return [DX, DY];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n\n    graticule.stepMinor = function(_) {\n      if (!arguments.length) return [dx, dy];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = graticuleX(y0, y1, 90);\n      y = graticuleY(x0, x1, precision);\n      X = graticuleX(Y0, Y1, 90);\n      Y = graticuleY(X0, X1, precision);\n      return graticule;\n    };\n\n    return graticule\n        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])\n        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);\n  }\n\n  function interpolate$2(a, b) {\n    var x0 = a[0] * radians,\n        y0 = a[1] * radians,\n        x1 = b[0] * radians,\n        y1 = b[1] * radians,\n        cy0 = cos(y0),\n        sy0 = sin(y0),\n        cy1 = cos(y1),\n        sy1 = sin(y1),\n        kx0 = cy0 * cos(x0),\n        ky0 = cy0 * sin(x0),\n        kx1 = cy1 * cos(x1),\n        ky1 = cy1 * sin(x1),\n        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n        k = sin(d);\n\n    var interpolate = d ? function(t) {\n      var B = sin(t *= d) / k,\n          A = sin(d - t) / k,\n          x = A * kx0 + B * kx1,\n          y = A * ky0 + B * ky1,\n          z = A * sy0 + B * sy1;\n      return [\n        atan2(y, x) * degrees$1,\n        atan2(z, sqrt$1(x * x + y * y)) * degrees$1\n      ];\n    } : function() {\n      return [x0 * degrees$1, y0 * degrees$1];\n    };\n\n    interpolate.distance = d;\n\n    return interpolate;\n  }\n\n  function identity$7(x) {\n    return x;\n  }\n\nvar   areaSum$1 = adder();\nvar   areaRingSum$1 = adder();\n  var x00;\n  var y00;\nvar   x0$1;\nvar   y0$1;\n  var areaSink$1 = {\n    point: noop$2,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: function() {\n      areaSink$1.lineStart = areaRingStart$1;\n      areaSink$1.lineEnd = areaRingEnd$1;\n    },\n    polygonEnd: function() {\n      areaSink$1.lineStart = areaSink$1.lineEnd = areaSink$1.point = noop$2;\n      areaSum$1.add(abs(areaRingSum$1));\n      areaRingSum$1.reset();\n    },\n    result: function() {\n      var area = areaSum$1 / 2;\n      areaSum$1.reset();\n      return area;\n    }\n  };\n\n  function areaRingStart$1() {\n    areaSink$1.point = areaPointFirst$1;\n  }\n\n  function areaPointFirst$1(x, y) {\n    areaSink$1.point = areaPoint$1;\n    x00 = x0$1 = x, y00 = y0$1 = y;\n  }\n\n  function areaPoint$1(x, y) {\n    areaRingSum$1.add(y0$1 * x - x0$1 * y);\n    x0$1 = x, y0$1 = y;\n  }\n\n  function areaRingEnd$1() {\n    areaPoint$1(x00, y00);\n  }\n\nvar   x0$2 = Infinity;\nvar   y0$2 = x0$2;\n  var x1 = -x0$2;\n  var y1 = x1;\n  var boundsSink$1 = {\n    point: boundsPoint$1,\n    lineStart: noop$2,\n    lineEnd: noop$2,\n    polygonStart: noop$2,\n    polygonEnd: noop$2,\n    result: function() {\n      var bounds = [[x0$2, y0$2], [x1, y1]];\n      x1 = y1 = -(y0$2 = x0$2 = Infinity);\n      return bounds;\n    }\n  };\n\n  function boundsPoint$1(x, y) {\n    if (x < x0$2) x0$2 = x;\n    if (x > x1) x1 = x;\n    if (y < y0$2) y0$2 = y;\n    if (y > y1) y1 = y;\n  }\n\nvar   X0$1 = 0;\nvar   Y0$1 = 0;\nvar   Z0$1 = 0;\nvar   X1$1 = 0;\nvar   Y1$1 = 0;\nvar   Z1$1 = 0;\nvar   X2$1 = 0;\nvar   Y2$1 = 0;\nvar   Z2$1 = 0;\nvar   x00$1;\nvar   y00$1;\nvar   x0$3;\nvar   y0$3;\n  var centroidSink$1 = {\n    point: centroidPoint$1,\n    lineStart: centroidLineStart$1,\n    lineEnd: centroidLineEnd$1,\n    polygonStart: function() {\n      centroidSink$1.lineStart = centroidRingStart$1;\n      centroidSink$1.lineEnd = centroidRingEnd$1;\n    },\n    polygonEnd: function() {\n      centroidSink$1.point = centroidPoint$1;\n      centroidSink$1.lineStart = centroidLineStart$1;\n      centroidSink$1.lineEnd = centroidLineEnd$1;\n    },\n    result: function() {\n      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]\n          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]\n          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]\n          : [NaN, NaN];\n      X0$1 = Y0$1 = Z0$1 =\n      X1$1 = Y1$1 = Z1$1 =\n      X2$1 = Y2$1 = Z2$1 = 0;\n      return centroid;\n    }\n  };\n\n  function centroidPoint$1(x, y) {\n    X0$1 += x;\n    Y0$1 += y;\n    ++Z0$1;\n  }\n\n  function centroidLineStart$1() {\n    centroidSink$1.point = centroidPointFirstLine;\n  }\n\n  function centroidPointFirstLine(x, y) {\n    centroidSink$1.point = centroidPointLine;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidPointLine(x, y) {\n    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function centroidLineEnd$1() {\n    centroidSink$1.point = centroidPoint$1;\n  }\n\n  function centroidRingStart$1() {\n    centroidSink$1.point = centroidPointFirstRing;\n  }\n\n  function centroidRingEnd$1() {\n    centroidPointRing(x00$1, y00$1);\n  }\n\n  function centroidPointFirstRing(x, y) {\n    centroidSink$1.point = centroidPointRing;\n    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n  }\n\n  function centroidPointRing(x, y) {\n    var dx = x - x0$3,\n        dy = y - y0$3,\n        z = sqrt$1(dx * dx + dy * dy);\n\n    X1$1 += z * (x0$3 + x) / 2;\n    Y1$1 += z * (y0$3 + y) / 2;\n    Z1$1 += z;\n\n    z = y0$3 * x - x0$3 * y;\n    X2$1 += z * (x0$3 + x);\n    Y2$1 += z * (y0$3 + y);\n    Z2$1 += z * 3;\n    centroidPoint$1(x0$3 = x, y0$3 = y);\n  }\n\n  function PathContext(context) {\n    var pointRadius = 4.5;\n\n    var stream = {\n      point: point,\n\n      // While inside a line, override point to moveTo then lineTo.\n      lineStart: function() { stream.point = pointLineStart; },\n      lineEnd: lineEnd,\n\n      // While inside a polygon, override lineEnd to closePath.\n      polygonStart: function() { stream.lineEnd = lineEndPolygon; },\n      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },\n\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n\n      result: noop$2\n    };\n\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, tau$3);\n    }\n\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n\n    function lineEnd() {\n      stream.point = point;\n    }\n\n    function lineEndPolygon() {\n      context.closePath();\n    }\n\n    return stream;\n  }\n\n  function PathString() {\n    var pointCircle = circle$2(4.5),\n        string = [];\n\n    var sink = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        sink.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        sink.lineEnd = lineEnd;\n        sink.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = circle$2(_);\n        return sink;\n      },\n      result: function() {\n        if (string.length) {\n          var result = string.join(\"\");\n          string = [];\n          return result;\n        }\n      }\n    };\n\n    function point(x, y) {\n      string.push(\"M\", x, \",\", y, pointCircle);\n    }\n\n    function pointLineStart(x, y) {\n      string.push(\"M\", x, \",\", y);\n      sink.point = pointLine;\n    }\n\n    function pointLine(x, y) {\n      string.push(\"L\", x, \",\", y);\n    }\n\n    function lineStart() {\n      sink.point = pointLineStart;\n    }\n\n    function lineEnd() {\n      sink.point = point;\n    }\n\n    function lineEndPolygon() {\n      string.push(\"Z\");\n    }\n\n    return sink;\n  }\n\n  function circle$2(radius) {\n    return \"m0,\" + radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n        + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n        + \"z\";\n  }\n\n  function index$3() {\n    var pointRadius = 4.5,\n        projection,\n        context,\n        projectStream,\n        contextStream;\n\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        stream(object, projectStream(contextStream));\n      }\n      return contextStream.result();\n    }\n\n    path.area = function(object) {\n      stream(object, projectStream(areaSink$1));\n      return areaSink$1.result();\n    };\n\n    path.bounds = function(object) {\n      stream(object, projectStream(boundsSink$1));\n      return boundsSink$1.result();\n    };\n\n    path.centroid = function(object) {\n      stream(object, projectStream(centroidSink$1));\n      return centroidSink$1.result();\n    };\n\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream : identity$7;\n      return path;\n    };\n\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new PathString : new PathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return path;\n    };\n\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n\n    return path.projection(null).context(null); // TODO albersUsa\n  }\n\n  var sum$2 = adder();\n\n  function polygonContains(polygon, point) {\n    var lambda = point[0],\n        phi = point[1],\n        normal = [sin(lambda), -cos(lambda), 0],\n        angle = 0,\n        winding = 0;\n\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      if (!(m = (ring = polygon[i]).length)) continue;\n      var ring,\n          m,\n          point0 = ring[m - 1],\n          lambda0 = point0[0],\n          phi0 = point0[1] / 2 + quarterPi,\n          sinPhi0 = sin(phi0),\n          cosPhi0 = cos(phi0);\n\n      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n        var point1 = ring[j],\n            lambda1 = point1[0],\n            phi1 = point1[1] / 2 + quarterPi,\n            sinPhi1 = sin(phi1),\n            cosPhi1 = cos(phi1),\n            delta = lambda1 - lambda0,\n            sign = delta >= 0 ? 1 : -1,\n            absDelta = sign * delta,\n            antimeridian = absDelta > pi$3,\n            k = sinPhi0 * sinPhi1;\n\n        sum$2.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n        angle += antimeridian ? delta + sign * tau$3 : delta;\n\n        // Are the longitudes either side of the point’s meridian (lambda),\n        // and are the latitudes smaller than the parallel (phi)?\n        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n          var arc = cartesianCross(cartesian(point0), cartesian(point1));\n          cartesianNormalizeInPlace(arc);\n          var intersection = cartesianCross(normal, arc);\n          cartesianNormalizeInPlace(intersection);\n          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);\n          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ delta >= 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n\n    // First, determine whether the South pole is inside or outside:\n    //\n    // It is inside if:\n    // * the polygon winds around it in a clockwise direction.\n    // * the polygon does not (cumulatively) wind around it, but has a negative\n    //   (counter-clockwise) area.\n    //\n    // Second, count the (signed) number of times a segment crosses a lambda\n    // from the point to the South pole.  If it is zero, then the point is the\n    // same side as the South pole.\n\n    var contains = (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);\n    sum$2.reset();\n    return contains;\n  }\n\n  function clip(pointVisible, clipLine, interpolate, start) {\n    return function(rotate, sink) {\n      var line = clipLine(sink),\n          rotatedStart = rotate.invert(start[0], start[1]),\n          ringBuffer = clipBuffer(),\n          ringSink = clipLine(ringBuffer),\n          polygonStarted = false,\n          polygon,\n          segments,\n          ring;\n\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = merge(segments);\n          var startInside = polygonContains(polygon, rotatedStart);\n          if (segments.length) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);\n          } else if (startInside) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            interpolate(null, null, 1, sink);\n            sink.lineEnd();\n          }\n          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          sink.polygonStart();\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n          sink.polygonEnd();\n        }\n      };\n\n      function point(lambda, phi) {\n        var point = rotate(lambda, phi);\n        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);\n      }\n\n      function pointLine(lambda, phi) {\n        var point = rotate(lambda, phi);\n        line.point(point[0], point[1]);\n      }\n\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n\n      function pointRing(lambda, phi) {\n        ring.push([lambda, phi]);\n        var point = rotate(lambda, phi);\n        ringSink.point(point[0], point[1]);\n      }\n\n      function ringStart() {\n        ringSink.lineStart();\n        ring = [];\n      }\n\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringSink.lineEnd();\n\n        var clean = ringSink.clean(),\n            ringSegments = ringBuffer.result(),\n            i, n = ringSegments.length, m,\n            segment,\n            point;\n\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n\n        if (!n) return;\n\n        // No intersections.\n        if (clean & 1) {\n          segment = ringSegments[0];\n          if ((m = segment.length - 1) > 0) {\n            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n            sink.lineStart();\n            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n            sink.lineEnd();\n          }\n          return;\n        }\n\n        // Rejoin connected segments.\n        // TODO reuse ringBuffer.rejoin()?\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n        segments.push(ringSegments.filter(validSegment));\n      }\n\n      return clip;\n    };\n  }\n\n  function validSegment(segment) {\n    return segment.length > 1;\n  }\n\n  // Intersections are sorted along the clip edge. For both antimeridian cutting\n  // and circle clipping, the same comparison is used.\n  function compareIntersection(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$4 : halfPi$2 - a[1])\n         - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$4 : halfPi$2 - b[1]);\n  }\n\n  var clipAntimeridian = clip(\n    function() { return true; },\n    clipAntimeridianLine,\n    clipAntimeridianInterpolate,\n    [-pi$3, -halfPi$2]\n  );\n\n  // Takes a line and cuts into visible segments. Return values: 0 - there were\n  // intersections or the line was empty; 1 - no intersections; 2 - there were\n  // intersections, and the first and last segments should be rejoined.\n  function clipAntimeridianLine(sink) {\n    var lambda0 = NaN,\n        phi0 = NaN,\n        sign0 = NaN,\n        clean; // no intersections\n\n    return {\n      lineStart: function() {\n        sink.lineStart();\n        clean = 1;\n      },\n      point: function(lambda1, phi1) {\n        var sign1 = lambda1 > 0 ? pi$3 : -pi$3,\n            delta = abs(lambda1 - lambda0);\n        if (abs(delta - pi$3) < epsilon$4) { // line crosses a pole\n          sink.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);\n          sink.point(sign0, phi0);\n          sink.lineEnd();\n          sink.lineStart();\n          sink.point(sign1, phi0);\n          sink.point(lambda1, phi0);\n          clean = 0;\n        } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian\n          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies\n          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;\n          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n          sink.point(sign0, phi0);\n          sink.lineEnd();\n          sink.lineStart();\n          sink.point(sign1, phi0);\n          clean = 0;\n        }\n        sink.point(lambda0 = lambda1, phi0 = phi1);\n        sign0 = sign1;\n      },\n      lineEnd: function() {\n        sink.lineEnd();\n        lambda0 = phi0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean; // if intersections, rejoin first and last segments\n      }\n    };\n  }\n\n  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n    var cosPhi0,\n        cosPhi1,\n        sinLambda0Lambda1 = sin(lambda0 - lambda1);\n    return abs(sinLambda0Lambda1) > epsilon$4\n        ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n            - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n        : (phi0 + phi1) / 2;\n  }\n\n  function clipAntimeridianInterpolate(from, to, direction, sink) {\n    var phi;\n    if (from == null) {\n      phi = direction * halfPi$2;\n      sink.point(-pi$3, phi);\n      sink.point(0, phi);\n      sink.point(pi$3, phi);\n      sink.point(pi$3, 0);\n      sink.point(pi$3, -phi);\n      sink.point(0, -phi);\n      sink.point(-pi$3, -phi);\n      sink.point(-pi$3, 0);\n      sink.point(-pi$3, phi);\n    } else if (abs(from[0] - to[0]) > epsilon$4) {\n      var lambda = from[0] < to[0] ? pi$3 : -pi$3;\n      phi = direction * lambda / 2;\n      sink.point(-lambda, phi);\n      sink.point(0, phi);\n      sink.point(lambda, phi);\n    } else {\n      sink.point(to[0], to[1]);\n    }\n  }\n\n  function clipCircle(radius, delta) {\n    var cr = cos(radius),\n        smallRadius = cr > 0,\n        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case\n\n    function interpolate(from, to, direction, sink) {\n      circleStream(sink, radius, delta, direction, from, to);\n    }\n\n    function visible(lambda, phi) {\n      return cos(lambda) * cos(phi) > cr;\n    }\n\n    // Takes a line and cuts into visible segments. Return values used for polygon\n    // clipping: 0 - there were intersections or the line was empty; 1 - no\n    // intersections 2 - there were intersections, and the first and last segments\n    // should be rejoined.\n    function clipLine(sink) {\n      var point0, // previous point\n          c0, // code for previous point\n          v0, // visibility of previous point\n          v00, // visibility of first point\n          clean; // no intersections\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(lambda, phi) {\n          var point1 = [lambda, phi],\n              point2,\n              v = visible(lambda, phi),\n              c = smallRadius\n                ? v ? 0 : code(lambda, phi)\n                : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;\n          if (!point0 && (v00 = v0 = v)) sink.lineStart();\n          // Handle degeneracies.\n          // TODO ignore if not clipping polygons.\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {\n              point1[0] += epsilon$4;\n              point1[1] += epsilon$4;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              // outside going in\n              sink.lineStart();\n              point2 = intersect(point1, point0);\n              sink.point(point2[0], point2[1]);\n            } else {\n              // inside going out\n              point2 = intersect(point0, point1);\n              sink.point(point2[0], point2[1]);\n              sink.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            // If the codes for two points are different, or are both zero,\n            // and there this segment intersects with the small circle.\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                sink.lineStart();\n                sink.point(t[0][0], t[0][1]);\n                sink.point(t[1][0], t[1][1]);\n                sink.lineEnd();\n              } else {\n                sink.point(t[1][0], t[1][1]);\n                sink.lineEnd();\n                sink.lineStart();\n                sink.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !pointEqual(point0, point1))) {\n            sink.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) sink.lineEnd();\n          point0 = null;\n        },\n        // Rejoin first and last segments if there were intersections and the first\n        // and last points were visible.\n        clean: function() {\n          return clean | ((v00 && v0) << 1);\n        }\n      };\n    }\n\n    // Intersects the great circle between a and b with the clip circle.\n    function intersect(a, b, two) {\n      var pa = cartesian(a),\n          pb = cartesian(b);\n\n      // We have two planes, n1.p = d1 and n2.p = d2.\n      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n      var n1 = [1, 0, 0], // normal\n          n2 = cartesianCross(pa, pb),\n          n2n2 = cartesianDot(n2, n2),\n          n1n2 = n2[0], // cartesianDot(n1, n2),\n          determinant = n2n2 - n1n2 * n1n2;\n\n      // Two polar points.\n      if (!determinant) return !two && a;\n\n      var c1 =  cr * n2n2 / determinant,\n          c2 = -cr * n1n2 / determinant,\n          n1xn2 = cartesianCross(n1, n2),\n          A = cartesianScale(n1, c1),\n          B = cartesianScale(n2, c2);\n      cartesianAddInPlace(A, B);\n\n      // Solve |p(t)|^2 = 1.\n      var u = n1xn2,\n          w = cartesianDot(A, u),\n          uu = cartesianDot(u, u),\n          t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n      if (t2 < 0) return;\n\n      var t = sqrt$1(t2),\n          q = cartesianScale(u, (-w - t) / uu);\n      cartesianAddInPlace(q, A);\n      q = spherical(q);\n\n      if (!two) return q;\n\n      // Two intersection points.\n      var lambda0 = a[0],\n          lambda1 = b[0],\n          phi0 = a[1],\n          phi1 = b[1],\n          z;\n\n      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n      var delta = lambda1 - lambda0,\n          polar = abs(delta - pi$3) < epsilon$4,\n          meridian = polar || delta < epsilon$4;\n\n      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n      // Check that the first point is between a and b.\n      if (meridian\n          ? polar\n            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)\n            : phi0 <= q[1] && q[1] <= phi1\n          : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n        var q1 = cartesianScale(u, (-w + t) / uu);\n        cartesianAddInPlace(q1, A);\n        return [q, spherical(q1)];\n      }\n    }\n\n    // Generates a 4-bit vector representing the location of a point relative to\n    // the small circle's bounding box.\n    function code(lambda, phi) {\n      var r = smallRadius ? radius : pi$3 - radius,\n          code = 0;\n      if (lambda < -r) code |= 1; // left\n      else if (lambda > r) code |= 2; // right\n      if (phi < -r) code |= 4; // below\n      else if (phi > r) code |= 8; // above\n      return code;\n    }\n\n    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);\n  }\n\n  function transform$1(prototype) {\n    function T() {}\n    var p = T.prototype = Object.create(Transform$1.prototype);\n    for (var k in prototype) p[k] = prototype[k];\n    return function(stream) {\n      var t = new T;\n      t.stream = stream;\n      return t;\n    };\n  }\n\n  function Transform$1() {}\n\n  Transform$1.prototype = {\n    point: function(x, y) { this.stream.point(x, y); },\n    sphere: function() { this.stream.sphere(); },\n    lineStart: function() { this.stream.lineStart(); },\n    lineEnd: function() { this.stream.lineEnd(); },\n    polygonStart: function() { this.stream.polygonStart(); },\n    polygonEnd: function() { this.stream.polygonEnd(); }\n  };\n\n  var maxDepth = 16;\n  var cosMinDistance = cos(30 * radians);\n  // cos(minimum angular distance)\n\n  function resample(project, delta2) {\n    return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n  }\n\n  function resampleNone(project) {\n    return transform$1({\n      point: function(x, y) {\n        x = project(x, y);\n        this.stream.point(x[0], x[1]);\n      }\n    });\n  }\n\n  function resample$1(project, delta2) {\n\n    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0,\n          dy = y1 - y0,\n          d2 = dx * dx + dy * dy;\n      if (d2 > 4 * delta2 && depth--) {\n        var a = a0 + a1,\n            b = b0 + b1,\n            c = c0 + c1,\n            m = sqrt$1(a * a + b * b + c * c),\n            phi2 = asin$1(c /= m),\n            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n            p = project(lambda2, phi2),\n            x2 = p[0],\n            y2 = p[1],\n            dx2 = x2 - x0,\n            dy2 = y2 - y0,\n            dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > delta2 // perpendicular projected distance\n            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n\n    return function(stream) {\n      var lambda00, x00, y00, a00, b00, c00, // first point\n          lambda0, x0, y0, a0, b0, c0; // previous point\n\n      var resampleSink = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() { stream.polygonStart(); resampleSink.lineStart = ringStart; },\n        polygonEnd: function() { stream.polygonEnd(); resampleSink.lineStart = lineStart; }\n      };\n\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n\n      function lineStart() {\n        x0 = NaN;\n        resampleSink.point = linePoint;\n        stream.lineStart();\n      }\n\n      function linePoint(lambda, phi) {\n        var c = cartesian([lambda, phi]), p = project(lambda, phi);\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n\n      function lineEnd() {\n        resampleSink.point = point;\n        stream.lineEnd();\n      }\n\n      function ringStart() {\n        lineStart();\n        resampleSink.point = ringPoint;\n        resampleSink.lineEnd = ringEnd;\n      }\n\n      function ringPoint(lambda, phi) {\n        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resampleSink.point = linePoint;\n      }\n\n      function ringEnd() {\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n        resampleSink.lineEnd = lineEnd;\n        lineEnd();\n      }\n\n      return resampleSink;\n    };\n  }\n\n  var transformRadians = transform$1({\n    point: function(x, y) {\n      this.stream.point(x * radians, y * radians);\n    }\n  });\n\n  function projection(project) {\n    return projectionMutator(function() { return project; })();\n  }\n\n  function projectionMutator(projectAt) {\n    var project,\n        k = 150, // scale\n        x = 480, y = 250, // translate\n        dx, dy, lambda = 0, phi = 0, // center\n        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n        theta = null, preclip = clipAntimeridian, // clip angle\n        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent\n        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n        stream,\n        streamSink;\n\n    function projection(point) {\n      point = projectRotate(point[0] * radians, point[1] * radians);\n      return [point[0] * k + dx, dy - point[1] * k];\n    }\n\n    function invert(point) {\n      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n      return point && [point[0] * degrees$1, point[1] * degrees$1];\n    }\n\n    function projectTransform(x, y) {\n      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n    }\n\n    projection.stream = function(sink) {\n      return stream && streamSink === sink ? stream : stream = transformRadians(preclip(rotate, projectResample(postclip(streamSink = sink))));\n    };\n\n    projection.clipAngle = function(_) {\n      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n    };\n\n    projection.clipExtent = function(_) {\n      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n    };\n\n    projection.scale = function(_) {\n      return arguments.length ? (k = +_, recenter()) : k;\n    };\n\n    projection.translate = function(_) {\n      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n    };\n\n    projection.center = function(_) {\n      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n    };\n\n    projection.rotate = function(_) {\n      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n    };\n\n    projection.precision = function(_) {\n      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n    };\n\n    function recenter() {\n      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n      var center = project(lambda, phi);\n      dx = x - center[0] * k;\n      dy = y + center[1] * k;\n      return reset();\n    }\n\n    function reset() {\n      stream = streamSink = null;\n      return projection;\n    }\n\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return recenter();\n    };\n  }\n\n  function conicProjection(projectAt) {\n    var phi0 = 0,\n        phi1 = pi$3 / 3,\n        m = projectionMutator(projectAt),\n        p = m(phi0, phi1);\n\n    p.parallels = function(_) {\n      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];\n    };\n\n    return p;\n  }\n\n  function conicEqualArea(y0, y1) {\n    var sy0 = sin(y0),\n        n = (sy0 + sin(y1)) / 2,\n        c = 1 + sy0 * (2 * n - sy0),\n        r0 = sqrt$1(c) / n;\n\n    function project(x, y) {\n      var r = sqrt$1(c - 2 * n * sin(y)) / n;\n      return [r * sin(x *= n), r0 - r * cos(x)];\n    }\n\n    project.invert = function(x, y) {\n      var r0y = r0 - y;\n      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n    };\n\n    return project;\n  }\n\n  function conicEqualArea$1() {\n    return conicProjection(conicEqualArea)\n        .scale(151)\n        .translate([480, 347]);\n  }\n\n  function albers() {\n    return conicEqualArea$1()\n        .parallels([29.5, 45.5])\n        .scale(1070)\n        .translate([480, 250])\n        .rotate([96, 0])\n        .center([-0.6, 38.7]);\n  }\n\n  // The projections must have mutually exclusive clip regions on the sphere,\n  // as this will avoid emitting interleaving lines and polygons.\n  function multiplex(sinks) {\n    var n = sinks.length;\n    return {\n      point: function(x, y) { var i = -1; while (++i < n) sinks[i].point(x, y); },\n      sphere: function() { var i = -1; while (++i < n) sinks[i].sphere(); },\n      lineStart: function() { var i = -1; while (++i < n) sinks[i].lineStart(); },\n      lineEnd: function() { var i = -1; while (++i < n) sinks[i].lineEnd(); },\n      polygonStart: function() { var i = -1; while (++i < n) sinks[i].polygonStart(); },\n      polygonEnd: function() { var i = -1; while (++i < n) sinks[i].polygonEnd(); }\n    };\n  }\n\n  // A composite projection for the United States, configured by default for\n  // 960×500. Also works quite well at 960×600 with scale 1285. The set of\n  // standard parallels for each region comes from USGS, which is published here:\n  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n  function albersUsa() {\n    var stream,\n        streamSink,\n        lower48 = albers(), lower48Point,\n        alaska = conicEqualArea$1().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n        hawaii = conicEqualArea$1().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n        point, pointSink = {point: function(x, y) { point = [x, y]; }};\n\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      return point = null, (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || (hawaiiPoint(x, y), point);\n    }\n\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(),\n          t = lower48.translate(),\n          x = (coordinates[0] - t[0]) / k,\n          y = (coordinates[1] - t[1]) / k;\n      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n          : lower48).invert(coordinates);\n    };\n\n    albersUsa.stream = function(sink) {\n      return stream && streamSink === sink ? stream : stream = multiplex([lower48.stream(streamSink = sink), alaska.stream(sink), hawaii.stream(sink)]);\n    };\n\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n      return albersUsa;\n    };\n\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n\n      lower48Point = lower48\n          .translate(_)\n          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n          .stream(pointSink).point;\n\n      alaskaPoint = alaska\n          .translate([x - 0.307 * k, y + 0.201 * k])\n          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointSink).point;\n\n      hawaiiPoint = hawaii\n          .translate([x - 0.205 * k, y + 0.212 * k])\n          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])\n          .stream(pointSink).point;\n\n      return albersUsa;\n    };\n\n    return albersUsa.scale(1070);\n  }\n\n  function azimuthal(scale) {\n    return function(x, y) {\n      var cx = cos(x),\n          cy = cos(y),\n          k = scale(cx * cy);\n      return [\n        k * cy * sin(x),\n        k * sin(y)\n      ];\n    }\n  }\n\n  function azimuthalInvert(angle) {\n    return function(x, y) {\n      var z = sqrt$1(x * x + y * y),\n          c = angle(z),\n          sc = sin(c),\n          cc = cos(c);\n      return [\n        atan2(x * sc, z * cc),\n        asin$1(z && y * sc / z)\n      ];\n    }\n  }\n\n  var azimuthalEqualArea = azimuthal(function(cxcy) {\n    return sqrt$1(2 / (1 + cxcy));\n  });\n\n  azimuthalEqualArea.invert = azimuthalInvert(function(z) {\n    return 2 * asin$1(z / 2);\n  });\n\n  function azimuthalEqualArea$1() {\n    return projection(azimuthalEqualArea)\n        .scale(120)\n        .clipAngle(180 - 1e-3);\n  }\n\n  var azimuthalEquidistant = azimuthal(function(c) {\n    return (c = acos(c)) && c / sin(c);\n  });\n\n  azimuthalEquidistant.invert = azimuthalInvert(function(z) {\n    return z;\n  });\n\n  function azimuthalEquidistant$1() {\n    return projection(azimuthalEquidistant)\n        .scale(480 / tau$3)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function mercator(lambda, phi) {\n    return [lambda, log$1(tan((halfPi$2 + phi) / 2))];\n  }\n\n  mercator.invert = function(x, y) {\n    return [x, 2 * atan(exp(y)) - halfPi$2];\n  };\n\n  function mercator$1() {\n    return mercatorProjection(mercator);\n  }\n\n  function mercatorProjection(project) {\n    var m = projection(project),\n        scale = m.scale,\n        translate = m.translate,\n        clipExtent = m.clipExtent,\n        clipAuto;\n\n    m.scale = function(_) {\n      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();\n    };\n\n    m.translate = function(_) {\n      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();\n    };\n\n    m.clipExtent = function(_) {\n      if (!arguments.length) return clipAuto ? null : clipExtent();\n      if (clipAuto = _ == null) {\n        var k = pi$3 * scale(), t = translate();\n        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];\n      }\n      clipExtent(_);\n      return m;\n    };\n\n    return m.clipExtent(null).scale(961 / tau$3);\n  }\n\n  function tany(y) {\n    return tan((halfPi$2 + y) / 2);\n  }\n\n  function conicConformal(y0, y1) {\n    var cy0 = cos(y0),\n        n = y0 === y1 ? sin(y0) : log$1(cy0 / cos(y1)) / log$1(tany(y1) / tany(y0)),\n        f = cy0 * pow$1(tany(y0), n) / n;\n\n    if (!n) return mercator;\n\n    function project(x, y) {\n      if (f > 0) { if (y < -halfPi$2 + epsilon$4) y = -halfPi$2 + epsilon$4; }\n      else { if (y > halfPi$2 - epsilon$4) y = halfPi$2 - epsilon$4; }\n      var r = f / pow$1(tany(y), n);\n      return [r * sin(n * x), f - r * cos(n * x)];\n    }\n\n    project.invert = function(x, y) {\n      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);\n      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$2];\n    };\n\n    return project;\n  }\n\n  function conicConformal$1() {\n    return conicProjection(conicConformal);\n  }\n\n  function equirectangular(lambda, phi) {\n    return [lambda, phi];\n  }\n\n  equirectangular.invert = equirectangular;\n\n  function equirectangular$1() {\n    return projection(equirectangular);\n  }\n\n  function conicEquidistant(y0, y1) {\n    var cy0 = cos(y0),\n        n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n        g = cy0 / n + y0;\n\n    if (abs(n) < epsilon$4) return equirectangular;\n\n    function project(x, y) {\n      var gy = g - y, nx = n * x;\n      return [gy * sin(nx), g - gy * cos(nx)];\n    }\n\n    project.invert = function(x, y) {\n      var gy = g - y;\n      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];\n    };\n\n    return project;\n  }\n\n  function conicEquidistant$1() {\n    return conicProjection(conicEquidistant)\n      .scale(128)\n      .translate([480, 280]);\n  }\n\n  function gnomonic(x, y) {\n    var cy = cos(y), k = cos(x) * cy;\n    return [cy * sin(x) / k, sin(y) / k];\n  }\n\n  gnomonic.invert = azimuthalInvert(atan);\n\n  function gnomonic$1() {\n    return projection(gnomonic)\n        .scale(139)\n        .clipAngle(70);\n  }\n\n  function orthographic(x, y) {\n    return [cos(y) * sin(x), sin(y)];\n  }\n\n  orthographic.invert = azimuthalInvert(asin$1);\n\n  function orthographic$1() {\n    return projection(orthographic)\n        .scale(240)\n        .clipAngle(90 + epsilon$4);\n  }\n\n  function stereographic(x, y) {\n    var cy = cos(y), k = 1 + cos(x) * cy;\n    return [cy * sin(x) / k, sin(y) / k];\n  }\n\n  stereographic.invert = azimuthalInvert(function(z) {\n    return 2 + atan(z);\n  });\n\n  function stereographic$1() {\n    return projection(stereographic)\n        .scale(240)\n        .clipAngle(180 - 1e-3);\n  }\n\n  function transverseMercator(lambda, phi) {\n    return [log$1(tan((halfPi$2 + phi) / 2)), -lambda];\n  }\n\n  transverseMercator.invert = function(x, y) {\n    return [-y, 2 * atan(exp(x)) - halfPi$2];\n  };\n\n  function transverseMercator$1() {\n    var m = mercatorProjection(transverseMercator),\n        center = m.center,\n        rotate = m.rotate;\n\n    m.center = function(_) {\n      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n    };\n\n    m.rotate = function(_) {\n      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n    };\n\n    return rotate([0, 0, 90]);\n  }\n\n  exports.version = version;\n  exports.bisect = bisectRight;\n  exports.bisectRight = bisectRight;\n  exports.bisectLeft = bisectLeft;\n  exports.ascending = ascending;\n  exports.bisector = bisector;\n  exports.descending = descending;\n  exports.deviation = deviation;\n  exports.extent = extent;\n  exports.histogram = histogram;\n  exports.thresholdFreedmanDiaconis = freedmanDiaconis;\n  exports.thresholdScott = scott;\n  exports.thresholdSturges = sturges;\n  exports.max = max;\n  exports.mean = mean;\n  exports.median = median;\n  exports.merge = merge;\n  exports.min = min;\n  exports.pairs = pairs;\n  exports.permute = permute;\n  exports.quantile = threshold;\n  exports.range = range;\n  exports.scan = scan;\n  exports.shuffle = shuffle;\n  exports.sum = sum;\n  exports.ticks = ticks;\n  exports.tickStep = tickStep;\n  exports.transpose = transpose;\n  exports.variance = variance;\n  exports.zip = zip;\n  exports.entries = entries;\n  exports.keys = keys;\n  exports.values = values;\n  exports.map = map$1;\n  exports.set = set;\n  exports.nest = nest;\n  exports.randomUniform = uniform;\n  exports.randomNormal = normal;\n  exports.randomLogNormal = logNormal;\n  exports.randomBates = bates;\n  exports.randomIrwinHall = irwinHall;\n  exports.randomExponential = exponential;\n  exports.easeLinear = linear;\n  exports.easeQuad = quadInOut;\n  exports.easeQuadIn = quadIn;\n  exports.easeQuadOut = quadOut;\n  exports.easeQuadInOut = quadInOut;\n  exports.easeCubic = easeCubicInOut;\n  exports.easeCubicIn = cubicIn;\n  exports.easeCubicOut = cubicOut;\n  exports.easeCubicInOut = easeCubicInOut;\n  exports.easePoly = polyInOut;\n  exports.easePolyIn = polyIn;\n  exports.easePolyOut = polyOut;\n  exports.easePolyInOut = polyInOut;\n  exports.easeSin = sinInOut;\n  exports.easeSinIn = sinIn;\n  exports.easeSinOut = sinOut;\n  exports.easeSinInOut = sinInOut;\n  exports.easeExp = expInOut;\n  exports.easeExpIn = expIn;\n  exports.easeExpOut = expOut;\n  exports.easeExpInOut = expInOut;\n  exports.easeCircle = circleInOut;\n  exports.easeCircleIn = circleIn;\n  exports.easeCircleOut = circleOut;\n  exports.easeCircleInOut = circleInOut;\n  exports.easeBounce = bounceOut;\n  exports.easeBounceIn = bounceIn;\n  exports.easeBounceOut = bounceOut;\n  exports.easeBounceInOut = bounceInOut;\n  exports.easeBack = backInOut;\n  exports.easeBackIn = backIn;\n  exports.easeBackOut = backOut;\n  exports.easeBackInOut = backInOut;\n  exports.easeElastic = elasticOut;\n  exports.easeElasticIn = elasticIn;\n  exports.easeElasticOut = elasticOut;\n  exports.easeElasticInOut = elasticInOut;\n  exports.polygonArea = area;\n  exports.polygonCentroid = centroid;\n  exports.polygonHull = hull;\n  exports.polygonContains = contains;\n  exports.polygonLength = length$1;\n  exports.path = path;\n  exports.quadtree = quadtree;\n  exports.queue = queue;\n  exports.arc = arc;\n  exports.area = area$1;\n  exports.line = line;\n  exports.pie = pie;\n  exports.radialArea = radialArea;\n  exports.radialLine = radialLine$1;\n  exports.symbol = symbol;\n  exports.symbols = symbols;\n  exports.symbolCircle = circle;\n  exports.symbolCross = cross$1;\n  exports.symbolDiamond = diamond;\n  exports.symbolSquare = square;\n  exports.symbolStar = star;\n  exports.symbolTriangle = triangle;\n  exports.symbolWye = wye;\n  exports.curveBasisClosed = basisClosed;\n  exports.curveBasisOpen = basisOpen;\n  exports.curveBasis = basis;\n  exports.curveBundle = bundle;\n  exports.curveCardinalClosed = cardinalClosed;\n  exports.curveCardinalOpen = cardinalOpen;\n  exports.curveCardinal = cardinal;\n  exports.curveCatmullRomClosed = catmullRomClosed;\n  exports.curveCatmullRomOpen = catmullRomOpen;\n  exports.curveCatmullRom = catmullRom;\n  exports.curveLinearClosed = linearClosed;\n  exports.curveLinear = curveLinear;\n  exports.curveMonotoneX = monotoneX;\n  exports.curveMonotoneY = monotoneY;\n  exports.curveNatural = natural;\n  exports.curveStep = step;\n  exports.curveStepAfter = stepAfter;\n  exports.curveStepBefore = stepBefore;\n  exports.stack = stack;\n  exports.stackOffsetExpand = expand;\n  exports.stackOffsetNone = none;\n  exports.stackOffsetSilhouette = silhouette;\n  exports.stackOffsetWiggle = wiggle;\n  exports.stackOrderAscending = ascending$1;\n  exports.stackOrderDescending = descending$2;\n  exports.stackOrderInsideOut = insideOut;\n  exports.stackOrderNone = none$1;\n  exports.stackOrderReverse = reverse;\n  exports.color = color;\n  exports.rgb = colorRgb;\n  exports.hsl = colorHsl;\n  exports.lab = lab;\n  exports.hcl = colorHcl;\n  exports.cubehelix = cubehelix;\n  exports.interpolate = interpolate;\n  exports.interpolateArray = array$1;\n  exports.interpolateNumber = interpolateNumber;\n  exports.interpolateObject = object;\n  exports.interpolateRound = interpolateRound;\n  exports.interpolateString = interpolateString;\n  exports.interpolateTransformCss = interpolateTransform$1;\n  exports.interpolateTransformSvg = interpolateTransform$2;\n  exports.interpolateZoom = interpolateZoom;\n  exports.interpolateRgb = interpolateRgb;\n  exports.interpolateRgbBasis = rgbBasis;\n  exports.interpolateRgbBasisClosed = rgbBasisClosed;\n  exports.interpolateHsl = hsl$1;\n  exports.interpolateHslLong = hslLong;\n  exports.interpolateLab = lab$1;\n  exports.interpolateHcl = hcl$1;\n  exports.interpolateHclLong = hclLong;\n  exports.interpolateCubehelix = cubehelix$2;\n  exports.interpolateCubehelixLong = interpolateCubehelixLong;\n  exports.interpolateBasis = basis$2;\n  exports.interpolateBasisClosed = basisClosed$1;\n  exports.quantize = quantize;\n  exports.dispatch = dispatch;\n  exports.dsvFormat = dsv;\n  exports.csvParse = csvParse;\n  exports.csvParseRows = csvParseRows;\n  exports.csvFormat = csvFormat;\n  exports.csvFormatRows = csvFormatRows;\n  exports.tsvParse = tsvParse;\n  exports.tsvParseRows = tsvParseRows;\n  exports.tsvFormat = tsvFormat;\n  exports.tsvFormatRows = tsvFormatRows;\n  exports.request = request;\n  exports.html = html;\n  exports.json = json;\n  exports.text = text;\n  exports.xml = xml;\n  exports.csv = csv$1;\n  exports.tsv = tsv$1;\n  exports.now = now;\n  exports.timer = timer;\n  exports.timerFlush = timerFlush;\n  exports.timeout = timeout$1;\n  exports.interval = interval$1;\n  exports.timeInterval = newInterval;\n  exports.timeMillisecond = millisecond;\n  exports.timeMilliseconds = milliseconds;\n  exports.timeSecond = second;\n  exports.timeSeconds = seconds;\n  exports.timeMinute = minute;\n  exports.timeMinutes = minutes;\n  exports.timeHour = hour;\n  exports.timeHours = hours;\n  exports.timeDay = day;\n  exports.timeDays = days;\n  exports.timeWeek = timeWeek;\n  exports.timeWeeks = sundays;\n  exports.timeSunday = timeWeek;\n  exports.timeSundays = sundays;\n  exports.timeMonday = timeMonday;\n  exports.timeMondays = mondays;\n  exports.timeTuesday = tuesday;\n  exports.timeTuesdays = tuesdays;\n  exports.timeWednesday = wednesday;\n  exports.timeWednesdays = wednesdays;\n  exports.timeThursday = thursday;\n  exports.timeThursdays = thursdays;\n  exports.timeFriday = friday;\n  exports.timeFridays = fridays;\n  exports.timeSaturday = saturday;\n  exports.timeSaturdays = saturdays;\n  exports.timeMonth = month;\n  exports.timeMonths = months;\n  exports.timeYear = year;\n  exports.timeYears = years;\n  exports.utcMillisecond = millisecond;\n  exports.utcMilliseconds = milliseconds;\n  exports.utcSecond = second;\n  exports.utcSeconds = seconds;\n  exports.utcMinute = utcMinute;\n  exports.utcMinutes = utcMinutes;\n  exports.utcHour = utcHour;\n  exports.utcHours = utcHours;\n  exports.utcDay = utcDay;\n  exports.utcDays = utcDays;\n  exports.utcWeek = utcWeek;\n  exports.utcWeeks = utcSundays;\n  exports.utcSunday = utcWeek;\n  exports.utcSundays = utcSundays;\n  exports.utcMonday = utcMonday;\n  exports.utcMondays = utcMondays;\n  exports.utcTuesday = utcTuesday;\n  exports.utcTuesdays = utcTuesdays;\n  exports.utcWednesday = utcWednesday;\n  exports.utcWednesdays = utcWednesdays;\n  exports.utcThursday = utcThursday;\n  exports.utcThursdays = utcThursdays;\n  exports.utcFriday = utcFriday;\n  exports.utcFridays = utcFridays;\n  exports.utcSaturday = utcSaturday;\n  exports.utcSaturdays = utcSaturdays;\n  exports.utcMonth = utcMonth;\n  exports.utcMonths = utcMonths;\n  exports.utcYear = utcYear;\n  exports.utcYears = utcYears;\n  exports.format = format;\n  exports.formatPrefix = formatPrefix;\n  exports.formatLocale = formatLocale;\n  exports.formatSpecifier = formatSpecifier;\n  exports.precisionFixed = precisionFixed;\n  exports.precisionPrefix = precisionPrefix;\n  exports.precisionRound = precisionRound;\n  exports.timeFormat = timeFormat;\n  exports.timeParse = timeParse;\n  exports.utcFormat = utcFormat;\n  exports.utcParse = utcParse;\n  exports.isoFormat = formatIso;\n  exports.isoParse = parseIso;\n  exports.timeFormatLocale = formatLocale$1;\n  exports.scaleBand = band;\n  exports.scalePoint = point$4;\n  exports.scaleIdentity = identity$4;\n  exports.scaleLinear = linear$2;\n  exports.scaleLog = log;\n  exports.scaleOrdinal = ordinal;\n  exports.scaleImplicit = implicit;\n  exports.scalePow = pow;\n  exports.scaleSqrt = sqrt;\n  exports.scaleQuantile = quantile;\n  exports.scaleQuantize = quantize$1;\n  exports.scaleThreshold = threshold$1;\n  exports.scaleTime = time;\n  exports.scaleUtc = utcTime;\n  exports.schemeCategory10 = category10;\n  exports.schemeCategory20b = category20b;\n  exports.schemeCategory20c = category20c;\n  exports.schemeCategory20 = category20;\n  exports.scaleSequential = sequential;\n  exports.interpolateCubehelixDefault = cubehelix$3;\n  exports.interpolateRainbow = rainbow$1;\n  exports.interpolateWarm = warm;\n  exports.interpolateCool = cool;\n  exports.interpolateViridis = viridis;\n  exports.interpolateMagma = magma;\n  exports.interpolateInferno = inferno;\n  exports.interpolatePlasma = plasma;\n  exports.creator = creator;\n  exports.customEvent = customEvent;\n  exports.local = local;\n  exports.matcher = matcher$1;\n  exports.mouse = mouse;\n  exports.namespace = namespace;\n  exports.namespaces = namespaces;\n  exports.select = select;\n  exports.selectAll = selectAll;\n  exports.selection = selection;\n  exports.selector = selector;\n  exports.selectorAll = selectorAll;\n  exports.touch = touch;\n  exports.touches = touches;\n  exports.window = window;\n  exports.active = active;\n  exports.interrupt = interrupt;\n  exports.transition = transition;\n  exports.axisTop = axisTop;\n  exports.axisRight = axisRight;\n  exports.axisBottom = axisBottom;\n  exports.axisLeft = axisLeft;\n  exports.cluster = cluster;\n  exports.hierarchy = hierarchy;\n  exports.pack = index;\n  exports.packSiblings = siblings;\n  exports.packEnclose = enclose;\n  exports.partition = partition;\n  exports.stratify = stratify;\n  exports.tree = tree;\n  exports.treemap = index$1;\n  exports.treemapBinary = binary;\n  exports.treemapDice = treemapDice;\n  exports.treemapSlice = treemapSlice;\n  exports.treemapSliceDice = sliceDice;\n  exports.treemapSquarify = squarify;\n  exports.treemapResquarify = resquarify;\n  exports.forceCenter = center$1;\n  exports.forceCollide = collide;\n  exports.forceLink = link;\n  exports.forceManyBody = manyBody;\n  exports.forceSimulation = simulation;\n  exports.forceX = x$3;\n  exports.forceY = y$3;\n  exports.drag = drag;\n  exports.dragDisable = dragDisable;\n  exports.dragEnable = dragEnable;\n  exports.voronoi = voronoi;\n  exports.zoom = zoom;\n  exports.zoomIdentity = identity$6;\n  exports.zoomTransform = transform;\n  exports.brush = brush;\n  exports.brushX = brushX;\n  exports.brushY = brushY;\n  exports.brushSelection = brushSelection;\n  exports.geoArea = area$2;\n  exports.geoBounds = bounds;\n  exports.geoCentroid = centroid$1;\n  exports.geoCircle = circle$1;\n  exports.geoClipExtent = extent$1;\n  exports.geoDistance = distance;\n  exports.geoGraticule = graticule;\n  exports.geoInterpolate = interpolate$2;\n  exports.geoLength = length$2;\n  exports.geoPath = index$3;\n  exports.geoAlbers = albers;\n  exports.geoAlbersUsa = albersUsa;\n  exports.geoAzimuthalEqualArea = azimuthalEqualArea$1;\n  exports.geoAzimuthalEquidistant = azimuthalEquidistant$1;\n  exports.geoConicConformal = conicConformal$1;\n  exports.geoConicEqualArea = conicEqualArea$1;\n  exports.geoConicEquidistant = conicEquidistant$1;\n  exports.geoEquirectangular = equirectangular$1;\n  exports.geoGnomonic = gnomonic$1;\n  exports.geoProjection = projection;\n  exports.geoProjectionMutator = projectionMutator;\n  exports.geoMercator = mercator$1;\n  exports.geoOrthographic = orthographic$1;\n  exports.geoStereographic = stereographic$1;\n  exports.geoTransverseMercator = transverseMercator$1;\n  exports.geoRotation = rotation;\n  exports.geoStream = stream;\n  exports.geoTransform = transform$1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/d3/build/d3.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}